// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/dydxprotocol/daemons/liquidation/liquidation.proto

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/joltify-finance/joltify_lending/x/third_party_dydx/clob/types"
	types "github.com/joltify-finance/joltify_lending/x/third_party_dydx/subaccounts/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LiquidateSubaccountsRequest is a request message that contains a list of
// subaccount ids that potentially need to be liquidated. The list of subaccount
// ids should not contain duplicates. The application should re-verify these
// subaccount ids against current state before liquidating their positions.
type LiquidateSubaccountsRequest struct {
	// The block height at which the liquidation daemon is processing.
	BlockHeight uint32 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// The list of liquidatable subaccount ids.
	LiquidatableSubaccountIds []types.SubaccountId `protobuf:"bytes,2,rep,name=liquidatable_subaccount_ids,json=liquidatableSubaccountIds,proto3" json:"liquidatable_subaccount_ids"`
	// The list of subaccount ids with negative total net collateral.
	NegativeTncSubaccountIds []types.SubaccountId `protobuf:"bytes,3,rep,name=negative_tnc_subaccount_ids,json=negativeTncSubaccountIds,proto3" json:"negative_tnc_subaccount_ids"`
	// A map of perpetual id to subaccount open position info.
	SubaccountOpenPositionInfo []types1.SubaccountOpenPositionInfo `protobuf:"bytes,4,rep,name=subaccount_open_position_info,json=subaccountOpenPositionInfo,proto3" json:"subaccount_open_position_info"`
}

func (m *LiquidateSubaccountsRequest) Reset()         { *m = LiquidateSubaccountsRequest{} }
func (m *LiquidateSubaccountsRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidateSubaccountsRequest) ProtoMessage()    {}
func (*LiquidateSubaccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06b6fcce80843c7, []int{0}
}
func (m *LiquidateSubaccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidateSubaccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidateSubaccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidateSubaccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidateSubaccountsRequest.Merge(m, src)
}
func (m *LiquidateSubaccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidateSubaccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidateSubaccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidateSubaccountsRequest proto.InternalMessageInfo

func (m *LiquidateSubaccountsRequest) GetBlockHeight() uint32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *LiquidateSubaccountsRequest) GetLiquidatableSubaccountIds() []types.SubaccountId {
	if m != nil {
		return m.LiquidatableSubaccountIds
	}
	return nil
}

func (m *LiquidateSubaccountsRequest) GetNegativeTncSubaccountIds() []types.SubaccountId {
	if m != nil {
		return m.NegativeTncSubaccountIds
	}
	return nil
}

func (m *LiquidateSubaccountsRequest) GetSubaccountOpenPositionInfo() []types1.SubaccountOpenPositionInfo {
	if m != nil {
		return m.SubaccountOpenPositionInfo
	}
	return nil
}

// LiquidateSubaccountsResponse is a response message for
// LiquidateSubaccountsRequest.
type LiquidateSubaccountsResponse struct {
}

func (m *LiquidateSubaccountsResponse) Reset()         { *m = LiquidateSubaccountsResponse{} }
func (m *LiquidateSubaccountsResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidateSubaccountsResponse) ProtoMessage()    {}
func (*LiquidateSubaccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d06b6fcce80843c7, []int{1}
}
func (m *LiquidateSubaccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidateSubaccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidateSubaccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidateSubaccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidateSubaccountsResponse.Merge(m, src)
}
func (m *LiquidateSubaccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidateSubaccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidateSubaccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidateSubaccountsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*LiquidateSubaccountsRequest)(nil), "joltify.third_party.dydxprotocol.daemons.liquidation.LiquidateSubaccountsRequest")
	proto.RegisterType((*LiquidateSubaccountsResponse)(nil), "joltify.third_party.dydxprotocol.daemons.liquidation.LiquidateSubaccountsResponse")
}

func init() {
	proto.RegisterFile("joltify/third_party/dydxprotocol/daemons/liquidation/liquidation.proto", fileDescriptor_d06b6fcce80843c7)
}

var fileDescriptor_d06b6fcce80843c7 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x31, 0x6f, 0xd4, 0x30,
	0x14, 0xc7, 0x63, 0xae, 0x62, 0x70, 0x61, 0x89, 0x3a, 0x84, 0x1c, 0x84, 0xd2, 0xa9, 0x0b, 0x8e,
	0x54, 0x18, 0x10, 0x12, 0x03, 0x37, 0x20, 0x2a, 0x55, 0x02, 0x52, 0x26, 0x84, 0x64, 0x39, 0xb6,
	0x93, 0x18, 0x52, 0xbf, 0x34, 0x76, 0x2a, 0x6e, 0x82, 0x99, 0x89, 0x2f, 0xc4, 0xde, 0xf1, 0x90,
	0x18, 0x98, 0x10, 0xba, 0xfb, 0x22, 0xe8, 0x72, 0x39, 0xc5, 0xa0, 0x83, 0x48, 0xd5, 0x6d, 0x2f,
	0x2f, 0xef, 0xfd, 0xff, 0xbf, 0x67, 0x3f, 0xe3, 0x67, 0xef, 0xa0, 0xb4, 0x2a, 0x9b, 0xc6, 0xb6,
	0x50, 0xb5, 0xa0, 0x15, 0xab, 0xed, 0x34, 0x16, 0x53, 0xf1, 0xa1, 0xaa, 0xc1, 0x02, 0x87, 0x32,
	0x16, 0x4c, 0x9e, 0x81, 0x36, 0x71, 0xa9, 0xce, 0x1b, 0x25, 0x98, 0x55, 0xa0, 0xdd, 0x98, 0xb4,
	0x85, 0xfe, 0xc3, 0x4e, 0x87, 0x38, 0x3a, 0xc4, 0xd5, 0x21, 0x9d, 0x0e, 0x71, 0x7a, 0xc3, 0xbd,
	0x1c, 0x72, 0x68, 0x2b, 0xe2, 0x65, 0xb4, 0xd2, 0x0a, 0x9f, 0x0c, 0x32, 0x99, 0x26, 0x65, 0x9c,
	0x43, 0xa3, 0xad, 0x71, 0xe2, 0xae, 0xfd, 0xd1, 0x60, 0x3b, 0x2f, 0x21, 0x75, 0x67, 0x30, 0xab,
	0xce, 0x83, 0x6f, 0x23, 0x3c, 0x3e, 0xe9, 0xd2, 0xf2, 0xb4, 0xf7, 0x48, 0xe4, 0x79, 0x23, 0x8d,
	0xf5, 0xef, 0xe1, 0x1b, 0x69, 0x09, 0xfc, 0x3d, 0x2d, 0xa4, 0xca, 0x0b, 0x1b, 0xa0, 0x7d, 0x74,
	0x78, 0x33, 0xd9, 0x6d, 0x73, 0xcf, 0xdb, 0x94, 0xff, 0x09, 0xe1, 0xf1, 0x5a, 0x99, 0xa5, 0xa5,
	0xa4, 0x3d, 0x1e, 0x55, 0xc2, 0x04, 0xd7, 0xf6, 0x47, 0x87, 0xbb, 0x47, 0x8f, 0xc9, 0xe0, 0x71,
	0x39, 0x23, 0x92, 0x1e, 0xe5, 0x58, 0x4c, 0x76, 0x2e, 0x7f, 0xde, 0xf5, 0x92, 0x5b, 0xae, 0x89,
	0xfb, 0xdf, 0xf8, 0x1f, 0xf1, 0x58, 0xcb, 0x9c, 0x59, 0x75, 0x21, 0xa9, 0xd5, 0xfc, 0x6f, 0x82,
	0xd1, 0x96, 0x08, 0x82, 0xb5, 0xc9, 0x6b, 0xcd, 0xff, 0x04, 0xf8, 0x8c, 0xf0, 0x1d, 0xc7, 0x14,
	0x2a, 0xa9, 0x69, 0x05, 0x46, 0x2d, 0x8f, 0x9a, 0x2a, 0x9d, 0x41, 0xb0, 0xd3, 0x32, 0x3c, 0x1d,
	0x66, 0x58, 0xde, 0x94, 0x63, 0xfe, 0xa2, 0x92, 0xfa, 0x65, 0xa7, 0x74, 0xac, 0x33, 0xe8, 0x50,
	0x42, 0xf3, 0xcf, 0x8a, 0x83, 0x08, 0xdf, 0xde, 0x7c, 0xa5, 0xa6, 0x02, 0x6d, 0xe4, 0xd1, 0x77,
	0x84, 0xfd, 0x93, 0x7e, 0x15, 0x4e, 0x65, 0x7d, 0xa1, 0xb8, 0xf4, 0xbf, 0x22, 0xbc, 0xb7, 0xa9,
	0xcf, 0x7f, 0x45, 0xae, 0xb2, 0xe9, 0xe4, 0x3f, 0x6b, 0x15, 0x26, 0xdb, 0x94, 0x5c, 0x8d, 0x35,
	0x79, 0x7b, 0x39, 0x8f, 0xd0, 0x6c, 0x1e, 0xa1, 0x5f, 0xf3, 0x08, 0x7d, 0x59, 0x44, 0xde, 0x6c,
	0x11, 0x79, 0x3f, 0x16, 0x91, 0xf7, 0x66, 0x92, 0x2b, 0x5b, 0x34, 0x29, 0xe1, 0x70, 0x16, 0x77,
	0xbe, 0xf7, 0x33, 0xa5, 0x99, 0xe6, 0x72, 0xfd, 0x4d, 0x4b, 0xa9, 0x85, 0xd2, 0xf9, 0xc6, 0xb7,
	0xcf, 0x2a, 0x95, 0x5e, 0x6f, 0xc1, 0x1e, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xd2, 0x59,
	0x17, 0x3e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LiquidationServiceClient is the client API for LiquidationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LiquidationServiceClient interface {
	// Sends a list of subaccount ids that are potentially liquidatable.
	LiquidateSubaccounts(ctx context.Context, in *LiquidateSubaccountsRequest, opts ...grpc.CallOption) (*LiquidateSubaccountsResponse, error)
}

type liquidationServiceClient struct {
	cc grpc1.ClientConn
}

func NewLiquidationServiceClient(cc grpc1.ClientConn) LiquidationServiceClient {
	return &liquidationServiceClient{cc}
}

func (c *liquidationServiceClient) LiquidateSubaccounts(ctx context.Context, in *LiquidateSubaccountsRequest, opts ...grpc.CallOption) (*LiquidateSubaccountsResponse, error) {
	out := new(LiquidateSubaccountsResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.dydxprotocol.daemons.liquidation.LiquidationService/LiquidateSubaccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiquidationServiceServer is the server API for LiquidationService service.
type LiquidationServiceServer interface {
	// Sends a list of subaccount ids that are potentially liquidatable.
	LiquidateSubaccounts(context.Context, *LiquidateSubaccountsRequest) (*LiquidateSubaccountsResponse, error)
}

// UnimplementedLiquidationServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLiquidationServiceServer struct {
}

func (*UnimplementedLiquidationServiceServer) LiquidateSubaccounts(ctx context.Context, req *LiquidateSubaccountsRequest) (*LiquidateSubaccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidateSubaccounts not implemented")
}

func RegisterLiquidationServiceServer(s grpc1.Server, srv LiquidationServiceServer) {
	s.RegisterService(&_LiquidationService_serviceDesc, srv)
}

func _LiquidationService_LiquidateSubaccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidateSubaccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiquidationServiceServer).LiquidateSubaccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.dydxprotocol.daemons.liquidation.LiquidationService/LiquidateSubaccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiquidationServiceServer).LiquidateSubaccounts(ctx, req.(*LiquidateSubaccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiquidationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "joltify.third_party.dydxprotocol.daemons.liquidation.LiquidationService",
	HandlerType: (*LiquidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiquidateSubaccounts",
			Handler:    _LiquidationService_LiquidateSubaccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "joltify/third_party/dydxprotocol/daemons/liquidation/liquidation.proto",
}

func (m *LiquidateSubaccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidateSubaccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidateSubaccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubaccountOpenPositionInfo) > 0 {
		for iNdEx := len(m.SubaccountOpenPositionInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SubaccountOpenPositionInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.NegativeTncSubaccountIds) > 0 {
		for iNdEx := len(m.NegativeTncSubaccountIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NegativeTncSubaccountIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.LiquidatableSubaccountIds) > 0 {
		for iNdEx := len(m.LiquidatableSubaccountIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidatableSubaccountIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidation(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintLiquidation(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiquidateSubaccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidateSubaccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidateSubaccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintLiquidation(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LiquidateSubaccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovLiquidation(uint64(m.BlockHeight))
	}
	if len(m.LiquidatableSubaccountIds) > 0 {
		for _, e := range m.LiquidatableSubaccountIds {
			l = e.Size()
			n += 1 + l + sovLiquidation(uint64(l))
		}
	}
	if len(m.NegativeTncSubaccountIds) > 0 {
		for _, e := range m.NegativeTncSubaccountIds {
			l = e.Size()
			n += 1 + l + sovLiquidation(uint64(l))
		}
	}
	if len(m.SubaccountOpenPositionInfo) > 0 {
		for _, e := range m.SubaccountOpenPositionInfo {
			l = e.Size()
			n += 1 + l + sovLiquidation(uint64(l))
		}
	}
	return n
}

func (m *LiquidateSubaccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovLiquidation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidation(x uint64) (n int) {
	return sovLiquidation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LiquidateSubaccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidateSubaccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidateSubaccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidatableSubaccountIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidatableSubaccountIds = append(m.LiquidatableSubaccountIds, types.SubaccountId{})
			if err := m.LiquidatableSubaccountIds[len(m.LiquidatableSubaccountIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NegativeTncSubaccountIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NegativeTncSubaccountIds = append(m.NegativeTncSubaccountIds, types.SubaccountId{})
			if err := m.NegativeTncSubaccountIds[len(m.NegativeTncSubaccountIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountOpenPositionInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountOpenPositionInfo = append(m.SubaccountOpenPositionInfo, types1.SubaccountOpenPositionInfo{})
			if err := m.SubaccountOpenPositionInfo[len(m.SubaccountOpenPositionInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidateSubaccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidateSubaccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidateSubaccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidation = fmt.Errorf("proto: unexpected end of group")
)
