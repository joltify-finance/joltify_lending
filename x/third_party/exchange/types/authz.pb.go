// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/exchange/v1beta1/authz.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// spot authz messages
type CreateSpotLimitOrderAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *CreateSpotLimitOrderAuthz) Reset()         { *m = CreateSpotLimitOrderAuthz{} }
func (m *CreateSpotLimitOrderAuthz) String() string { return proto.CompactTextString(m) }
func (*CreateSpotLimitOrderAuthz) ProtoMessage()    {}
func (*CreateSpotLimitOrderAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{0}
}
func (m *CreateSpotLimitOrderAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpotLimitOrderAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpotLimitOrderAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpotLimitOrderAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpotLimitOrderAuthz.Merge(m, src)
}
func (m *CreateSpotLimitOrderAuthz) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpotLimitOrderAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpotLimitOrderAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpotLimitOrderAuthz proto.InternalMessageInfo

func (m *CreateSpotLimitOrderAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *CreateSpotLimitOrderAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

type CreateSpotMarketOrderAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *CreateSpotMarketOrderAuthz) Reset()         { *m = CreateSpotMarketOrderAuthz{} }
func (m *CreateSpotMarketOrderAuthz) String() string { return proto.CompactTextString(m) }
func (*CreateSpotMarketOrderAuthz) ProtoMessage()    {}
func (*CreateSpotMarketOrderAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{1}
}
func (m *CreateSpotMarketOrderAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateSpotMarketOrderAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateSpotMarketOrderAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateSpotMarketOrderAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSpotMarketOrderAuthz.Merge(m, src)
}
func (m *CreateSpotMarketOrderAuthz) XXX_Size() int {
	return m.Size()
}
func (m *CreateSpotMarketOrderAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSpotMarketOrderAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSpotMarketOrderAuthz proto.InternalMessageInfo

func (m *CreateSpotMarketOrderAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *CreateSpotMarketOrderAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

type BatchCreateSpotLimitOrdersAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *BatchCreateSpotLimitOrdersAuthz) Reset()         { *m = BatchCreateSpotLimitOrdersAuthz{} }
func (m *BatchCreateSpotLimitOrdersAuthz) String() string { return proto.CompactTextString(m) }
func (*BatchCreateSpotLimitOrdersAuthz) ProtoMessage()    {}
func (*BatchCreateSpotLimitOrdersAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{2}
}
func (m *BatchCreateSpotLimitOrdersAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchCreateSpotLimitOrdersAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchCreateSpotLimitOrdersAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchCreateSpotLimitOrdersAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateSpotLimitOrdersAuthz.Merge(m, src)
}
func (m *BatchCreateSpotLimitOrdersAuthz) XXX_Size() int {
	return m.Size()
}
func (m *BatchCreateSpotLimitOrdersAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateSpotLimitOrdersAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateSpotLimitOrdersAuthz proto.InternalMessageInfo

func (m *BatchCreateSpotLimitOrdersAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BatchCreateSpotLimitOrdersAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

type CancelSpotOrderAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *CancelSpotOrderAuthz) Reset()         { *m = CancelSpotOrderAuthz{} }
func (m *CancelSpotOrderAuthz) String() string { return proto.CompactTextString(m) }
func (*CancelSpotOrderAuthz) ProtoMessage()    {}
func (*CancelSpotOrderAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{3}
}
func (m *CancelSpotOrderAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelSpotOrderAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelSpotOrderAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelSpotOrderAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelSpotOrderAuthz.Merge(m, src)
}
func (m *CancelSpotOrderAuthz) XXX_Size() int {
	return m.Size()
}
func (m *CancelSpotOrderAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelSpotOrderAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_CancelSpotOrderAuthz proto.InternalMessageInfo

func (m *CancelSpotOrderAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *CancelSpotOrderAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

type BatchCancelSpotOrdersAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *BatchCancelSpotOrdersAuthz) Reset()         { *m = BatchCancelSpotOrdersAuthz{} }
func (m *BatchCancelSpotOrdersAuthz) String() string { return proto.CompactTextString(m) }
func (*BatchCancelSpotOrdersAuthz) ProtoMessage()    {}
func (*BatchCancelSpotOrdersAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{4}
}
func (m *BatchCancelSpotOrdersAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchCancelSpotOrdersAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchCancelSpotOrdersAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchCancelSpotOrdersAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCancelSpotOrdersAuthz.Merge(m, src)
}
func (m *BatchCancelSpotOrdersAuthz) XXX_Size() int {
	return m.Size()
}
func (m *BatchCancelSpotOrdersAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCancelSpotOrdersAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCancelSpotOrdersAuthz proto.InternalMessageInfo

func (m *BatchCancelSpotOrdersAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BatchCancelSpotOrdersAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

// derivative authz messages
type CreateDerivativeLimitOrderAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *CreateDerivativeLimitOrderAuthz) Reset()         { *m = CreateDerivativeLimitOrderAuthz{} }
func (m *CreateDerivativeLimitOrderAuthz) String() string { return proto.CompactTextString(m) }
func (*CreateDerivativeLimitOrderAuthz) ProtoMessage()    {}
func (*CreateDerivativeLimitOrderAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{5}
}
func (m *CreateDerivativeLimitOrderAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDerivativeLimitOrderAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDerivativeLimitOrderAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDerivativeLimitOrderAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDerivativeLimitOrderAuthz.Merge(m, src)
}
func (m *CreateDerivativeLimitOrderAuthz) XXX_Size() int {
	return m.Size()
}
func (m *CreateDerivativeLimitOrderAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDerivativeLimitOrderAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDerivativeLimitOrderAuthz proto.InternalMessageInfo

func (m *CreateDerivativeLimitOrderAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *CreateDerivativeLimitOrderAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

type CreateDerivativeMarketOrderAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *CreateDerivativeMarketOrderAuthz) Reset()         { *m = CreateDerivativeMarketOrderAuthz{} }
func (m *CreateDerivativeMarketOrderAuthz) String() string { return proto.CompactTextString(m) }
func (*CreateDerivativeMarketOrderAuthz) ProtoMessage()    {}
func (*CreateDerivativeMarketOrderAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{6}
}
func (m *CreateDerivativeMarketOrderAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateDerivativeMarketOrderAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateDerivativeMarketOrderAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateDerivativeMarketOrderAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateDerivativeMarketOrderAuthz.Merge(m, src)
}
func (m *CreateDerivativeMarketOrderAuthz) XXX_Size() int {
	return m.Size()
}
func (m *CreateDerivativeMarketOrderAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateDerivativeMarketOrderAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_CreateDerivativeMarketOrderAuthz proto.InternalMessageInfo

func (m *CreateDerivativeMarketOrderAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *CreateDerivativeMarketOrderAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

type BatchCreateDerivativeLimitOrdersAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *BatchCreateDerivativeLimitOrdersAuthz) Reset()         { *m = BatchCreateDerivativeLimitOrdersAuthz{} }
func (m *BatchCreateDerivativeLimitOrdersAuthz) String() string { return proto.CompactTextString(m) }
func (*BatchCreateDerivativeLimitOrdersAuthz) ProtoMessage()    {}
func (*BatchCreateDerivativeLimitOrdersAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{7}
}
func (m *BatchCreateDerivativeLimitOrdersAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchCreateDerivativeLimitOrdersAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchCreateDerivativeLimitOrdersAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchCreateDerivativeLimitOrdersAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCreateDerivativeLimitOrdersAuthz.Merge(m, src)
}
func (m *BatchCreateDerivativeLimitOrdersAuthz) XXX_Size() int {
	return m.Size()
}
func (m *BatchCreateDerivativeLimitOrdersAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCreateDerivativeLimitOrdersAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCreateDerivativeLimitOrdersAuthz proto.InternalMessageInfo

func (m *BatchCreateDerivativeLimitOrdersAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BatchCreateDerivativeLimitOrdersAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

type CancelDerivativeOrderAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *CancelDerivativeOrderAuthz) Reset()         { *m = CancelDerivativeOrderAuthz{} }
func (m *CancelDerivativeOrderAuthz) String() string { return proto.CompactTextString(m) }
func (*CancelDerivativeOrderAuthz) ProtoMessage()    {}
func (*CancelDerivativeOrderAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{8}
}
func (m *CancelDerivativeOrderAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CancelDerivativeOrderAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CancelDerivativeOrderAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CancelDerivativeOrderAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CancelDerivativeOrderAuthz.Merge(m, src)
}
func (m *CancelDerivativeOrderAuthz) XXX_Size() int {
	return m.Size()
}
func (m *CancelDerivativeOrderAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_CancelDerivativeOrderAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_CancelDerivativeOrderAuthz proto.InternalMessageInfo

func (m *CancelDerivativeOrderAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *CancelDerivativeOrderAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

type BatchCancelDerivativeOrdersAuthz struct {
	SubaccountId string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	MarketIds    []string `protobuf:"bytes,2,rep,name=market_ids,json=marketIds,proto3" json:"market_ids,omitempty"`
}

func (m *BatchCancelDerivativeOrdersAuthz) Reset()         { *m = BatchCancelDerivativeOrdersAuthz{} }
func (m *BatchCancelDerivativeOrdersAuthz) String() string { return proto.CompactTextString(m) }
func (*BatchCancelDerivativeOrdersAuthz) ProtoMessage()    {}
func (*BatchCancelDerivativeOrdersAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{9}
}
func (m *BatchCancelDerivativeOrdersAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchCancelDerivativeOrdersAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchCancelDerivativeOrdersAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchCancelDerivativeOrdersAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchCancelDerivativeOrdersAuthz.Merge(m, src)
}
func (m *BatchCancelDerivativeOrdersAuthz) XXX_Size() int {
	return m.Size()
}
func (m *BatchCancelDerivativeOrdersAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchCancelDerivativeOrdersAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_BatchCancelDerivativeOrdersAuthz proto.InternalMessageInfo

func (m *BatchCancelDerivativeOrdersAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BatchCancelDerivativeOrdersAuthz) GetMarketIds() []string {
	if m != nil {
		return m.MarketIds
	}
	return nil
}

// common authz message used in both spot & derivative markets
type BatchUpdateOrdersAuthz struct {
	SubaccountId      string   `protobuf:"bytes,1,opt,name=subaccount_id,json=subaccountId,proto3" json:"subaccount_id,omitempty"`
	SpotMarkets       []string `protobuf:"bytes,2,rep,name=spot_markets,json=spotMarkets,proto3" json:"spot_markets,omitempty"`
	DerivativeMarkets []string `protobuf:"bytes,3,rep,name=derivative_markets,json=derivativeMarkets,proto3" json:"derivative_markets,omitempty"`
}

func (m *BatchUpdateOrdersAuthz) Reset()         { *m = BatchUpdateOrdersAuthz{} }
func (m *BatchUpdateOrdersAuthz) String() string { return proto.CompactTextString(m) }
func (*BatchUpdateOrdersAuthz) ProtoMessage()    {}
func (*BatchUpdateOrdersAuthz) Descriptor() ([]byte, []int) {
	return fileDescriptor_a52545221e7a8062, []int{10}
}
func (m *BatchUpdateOrdersAuthz) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchUpdateOrdersAuthz) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchUpdateOrdersAuthz.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchUpdateOrdersAuthz) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchUpdateOrdersAuthz.Merge(m, src)
}
func (m *BatchUpdateOrdersAuthz) XXX_Size() int {
	return m.Size()
}
func (m *BatchUpdateOrdersAuthz) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchUpdateOrdersAuthz.DiscardUnknown(m)
}

var xxx_messageInfo_BatchUpdateOrdersAuthz proto.InternalMessageInfo

func (m *BatchUpdateOrdersAuthz) GetSubaccountId() string {
	if m != nil {
		return m.SubaccountId
	}
	return ""
}

func (m *BatchUpdateOrdersAuthz) GetSpotMarkets() []string {
	if m != nil {
		return m.SpotMarkets
	}
	return nil
}

func (m *BatchUpdateOrdersAuthz) GetDerivativeMarkets() []string {
	if m != nil {
		return m.DerivativeMarkets
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateSpotLimitOrderAuthz)(nil), "joltify.third_party.exchange.v1beta1.CreateSpotLimitOrderAuthz")
	proto.RegisterType((*CreateSpotMarketOrderAuthz)(nil), "joltify.third_party.exchange.v1beta1.CreateSpotMarketOrderAuthz")
	proto.RegisterType((*BatchCreateSpotLimitOrdersAuthz)(nil), "joltify.third_party.exchange.v1beta1.BatchCreateSpotLimitOrdersAuthz")
	proto.RegisterType((*CancelSpotOrderAuthz)(nil), "joltify.third_party.exchange.v1beta1.CancelSpotOrderAuthz")
	proto.RegisterType((*BatchCancelSpotOrdersAuthz)(nil), "joltify.third_party.exchange.v1beta1.BatchCancelSpotOrdersAuthz")
	proto.RegisterType((*CreateDerivativeLimitOrderAuthz)(nil), "joltify.third_party.exchange.v1beta1.CreateDerivativeLimitOrderAuthz")
	proto.RegisterType((*CreateDerivativeMarketOrderAuthz)(nil), "joltify.third_party.exchange.v1beta1.CreateDerivativeMarketOrderAuthz")
	proto.RegisterType((*BatchCreateDerivativeLimitOrdersAuthz)(nil), "joltify.third_party.exchange.v1beta1.BatchCreateDerivativeLimitOrdersAuthz")
	proto.RegisterType((*CancelDerivativeOrderAuthz)(nil), "joltify.third_party.exchange.v1beta1.CancelDerivativeOrderAuthz")
	proto.RegisterType((*BatchCancelDerivativeOrdersAuthz)(nil), "joltify.third_party.exchange.v1beta1.BatchCancelDerivativeOrdersAuthz")
	proto.RegisterType((*BatchUpdateOrdersAuthz)(nil), "joltify.third_party.exchange.v1beta1.BatchUpdateOrdersAuthz")
}

func init() {
	proto.RegisterFile("joltify/third_party/exchange/v1beta1/authz.proto", fileDescriptor_a52545221e7a8062)
}

var fileDescriptor_a52545221e7a8062 = []byte{
	// 420 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0x4f, 0x6b, 0xe2, 0x40,
	0x18, 0xc6, 0xcd, 0x0a, 0x0b, 0xce, 0xea, 0xc1, 0xb0, 0x2c, 0x2a, 0x6c, 0xd6, 0x75, 0x77, 0xc1,
	0x8b, 0xc9, 0x4a, 0x6f, 0xbd, 0x55, 0x0b, 0x45, 0x68, 0x29, 0x58, 0x7a, 0xe9, 0x25, 0x4c, 0x32,
	0xa3, 0x99, 0xd6, 0x64, 0xc2, 0xcc, 0x1b, 0x31, 0x1e, 0xfa, 0x19, 0xfa, 0x19, 0xfa, 0x19, 0xfa,
	0x21, 0x4a, 0x4f, 0x1e, 0x7b, 0x2c, 0xfa, 0x45, 0x4a, 0x12, 0xff, 0x55, 0x72, 0xe9, 0x21, 0x39,
	0xce, 0xf0, 0x3e, 0xf3, 0xcb, 0xf3, 0xe4, 0xc9, 0x04, 0xfd, 0xbf, 0xe5, 0x13, 0x60, 0xa3, 0xd0,
	0x00, 0x87, 0x09, 0x62, 0xfa, 0x58, 0x40, 0x68, 0xd0, 0x99, 0xed, 0x60, 0x6f, 0x4c, 0x8d, 0x69,
	0xd7, 0xa2, 0x80, 0xbb, 0x06, 0x0e, 0xc0, 0x99, 0xeb, 0xbe, 0xe0, 0xc0, 0xd5, 0xbf, 0x6b, 0x85,
	0xbe, 0xa7, 0xd0, 0x37, 0x0a, 0x7d, 0xad, 0x68, 0xd4, 0x6d, 0x2e, 0x5d, 0x2e, 0xcd, 0x58, 0x63,
	0x24, 0x8b, 0xe4, 0x80, 0x96, 0x40, 0xf5, 0xbe, 0xa0, 0x18, 0xe8, 0x95, 0xcf, 0xe1, 0x9c, 0xb9,
	0x0c, 0x2e, 0x05, 0xa1, 0xe2, 0x24, 0x62, 0xa8, 0x7f, 0x50, 0x45, 0x06, 0x16, 0xb6, 0x6d, 0x1e,
	0x78, 0x60, 0x32, 0x52, 0x53, 0x9a, 0x4a, 0xbb, 0x34, 0x2c, 0xef, 0x36, 0x07, 0x44, 0xfd, 0x89,
	0x90, 0x8b, 0xc5, 0x1d, 0x8d, 0x06, 0x64, 0xed, 0x4b, 0xb3, 0xd8, 0x2e, 0x0d, 0x4b, 0xc9, 0xce,
	0x80, 0xc8, 0xe3, 0xea, 0xcb, 0x53, 0xa7, 0x12, 0x1d, 0xc7, 0x05, 0x9b, 0x63, 0x60, 0xdc, 0x6b,
	0x49, 0xd4, 0xd8, 0x31, 0x2f, 0xe2, 0xc9, 0xec, 0xa1, 0x33, 0xf4, 0xab, 0x87, 0xc1, 0x76, 0xd2,
	0xdc, 0xca, 0x4c, 0xc9, 0x2e, 0xfa, 0xde, 0xc7, 0x9e, 0x4d, 0x27, 0x11, 0x34, 0x97, 0x74, 0x13,
	0xa3, 0x1f, 0x99, 0x32, 0xeb, 0x74, 0x93, 0x60, 0x4f, 0xa9, 0x60, 0x53, 0x0c, 0x6c, 0x4a, 0x73,
	0x2a, 0x53, 0x88, 0x9a, 0x87, 0xe4, 0xbc, 0x2a, 0x75, 0x8f, 0xfe, 0xed, 0x55, 0x2a, 0xcd, 0xb9,
	0xcc, 0xfc, 0x3b, 0x8a, 0x5f, 0xf2, 0x0e, 0x9d, 0x4b, 0xde, 0x7b, 0xf5, 0x3a, 0x20, 0x67, 0xeb,
	0xf7, 0x51, 0x41, 0x3f, 0x62, 0xf6, 0xb5, 0x4f, 0x30, 0x7c, 0x9e, 0xf8, 0x1b, 0x95, 0xa5, 0xcf,
	0xc1, 0x4c, 0x20, 0x1b, 0xe6, 0x37, 0xb9, 0xbd, 0x85, 0xa4, 0xda, 0x41, 0x2a, 0xd9, 0x5a, 0xda,
	0x0e, 0x16, 0xe3, 0xc1, 0x2a, 0x39, 0x68, 0x58, 0xda, 0x43, 0xf6, 0xf0, 0xf3, 0x52, 0x53, 0x16,
	0x4b, 0x4d, 0x79, 0x5b, 0x6a, 0xca, 0xc3, 0x4a, 0x2b, 0x2c, 0x56, 0x5a, 0xe1, 0x75, 0xa5, 0x15,
	0x6e, 0xce, 0xc6, 0x0c, 0x9c, 0xc0, 0xd2, 0x6d, 0xee, 0x1a, 0xeb, 0x6b, 0xbb, 0x33, 0x62, 0x5e,
	0x94, 0xe3, 0x66, 0x6d, 0x4e, 0xa8, 0x47, 0x98, 0x37, 0x36, 0x66, 0xe9, 0xbf, 0x00, 0x08, 0x7d,
	0x2a, 0xad, 0xaf, 0xf1, 0xd5, 0x7d, 0xf4, 0x1e, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x2c, 0x01, 0xfd,
	0x2f, 0x06, 0x00, 0x00,
}

func (m *CreateSpotLimitOrderAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpotLimitOrderAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpotLimitOrderAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateSpotMarketOrderAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateSpotMarketOrderAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateSpotMarketOrderAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchCreateSpotLimitOrdersAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchCreateSpotLimitOrdersAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchCreateSpotLimitOrdersAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelSpotOrderAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelSpotOrderAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelSpotOrderAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchCancelSpotOrdersAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchCancelSpotOrdersAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchCancelSpotOrdersAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDerivativeLimitOrderAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDerivativeLimitOrderAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDerivativeLimitOrderAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateDerivativeMarketOrderAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateDerivativeMarketOrderAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateDerivativeMarketOrderAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchCreateDerivativeLimitOrdersAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchCreateDerivativeLimitOrdersAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchCreateDerivativeLimitOrdersAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CancelDerivativeOrderAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CancelDerivativeOrderAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CancelDerivativeOrderAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchCancelDerivativeOrdersAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchCancelDerivativeOrdersAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchCancelDerivativeOrdersAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MarketIds) > 0 {
		for iNdEx := len(m.MarketIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MarketIds[iNdEx])
			copy(dAtA[i:], m.MarketIds[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.MarketIds[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchUpdateOrdersAuthz) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchUpdateOrdersAuthz) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchUpdateOrdersAuthz) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DerivativeMarkets) > 0 {
		for iNdEx := len(m.DerivativeMarkets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DerivativeMarkets[iNdEx])
			copy(dAtA[i:], m.DerivativeMarkets[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.DerivativeMarkets[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SpotMarkets) > 0 {
		for iNdEx := len(m.SpotMarkets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SpotMarkets[iNdEx])
			copy(dAtA[i:], m.SpotMarkets[iNdEx])
			i = encodeVarintAuthz(dAtA, i, uint64(len(m.SpotMarkets[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SubaccountId) > 0 {
		i -= len(m.SubaccountId)
		copy(dAtA[i:], m.SubaccountId)
		i = encodeVarintAuthz(dAtA, i, uint64(len(m.SubaccountId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAuthz(dAtA []byte, offset int, v uint64) int {
	offset -= sovAuthz(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CreateSpotLimitOrderAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CreateSpotMarketOrderAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *BatchCreateSpotLimitOrdersAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CancelSpotOrderAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *BatchCancelSpotOrdersAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CreateDerivativeLimitOrderAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CreateDerivativeMarketOrderAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *BatchCreateDerivativeLimitOrdersAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *CancelDerivativeOrderAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *BatchCancelDerivativeOrdersAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.MarketIds) > 0 {
		for _, s := range m.MarketIds {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func (m *BatchUpdateOrdersAuthz) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SubaccountId)
	if l > 0 {
		n += 1 + l + sovAuthz(uint64(l))
	}
	if len(m.SpotMarkets) > 0 {
		for _, s := range m.SpotMarkets {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	if len(m.DerivativeMarkets) > 0 {
		for _, s := range m.DerivativeMarkets {
			l = len(s)
			n += 1 + l + sovAuthz(uint64(l))
		}
	}
	return n
}

func sovAuthz(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAuthz(x uint64) (n int) {
	return sovAuthz(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CreateSpotLimitOrderAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpotLimitOrderAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpotLimitOrderAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateSpotMarketOrderAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateSpotMarketOrderAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateSpotMarketOrderAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchCreateSpotLimitOrdersAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchCreateSpotLimitOrdersAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchCreateSpotLimitOrdersAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelSpotOrderAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelSpotOrderAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelSpotOrderAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchCancelSpotOrdersAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchCancelSpotOrdersAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchCancelSpotOrdersAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDerivativeLimitOrderAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDerivativeLimitOrderAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDerivativeLimitOrderAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateDerivativeMarketOrderAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateDerivativeMarketOrderAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateDerivativeMarketOrderAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchCreateDerivativeLimitOrdersAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchCreateDerivativeLimitOrdersAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchCreateDerivativeLimitOrdersAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CancelDerivativeOrderAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CancelDerivativeOrderAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CancelDerivativeOrderAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchCancelDerivativeOrdersAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchCancelDerivativeOrdersAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchCancelDerivativeOrdersAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketIds = append(m.MarketIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchUpdateOrdersAuthz) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchUpdateOrdersAuthz: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchUpdateOrdersAuthz: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubaccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubaccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotMarkets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpotMarkets = append(m.SpotMarkets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DerivativeMarkets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthz
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAuthz
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DerivativeMarkets = append(m.DerivativeMarkets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthz(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAuthz
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthz(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthz
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthz
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAuthz
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAuthz
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAuthz
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAuthz        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthz          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAuthz = fmt.Errorf("proto: unexpected end of group")
)
