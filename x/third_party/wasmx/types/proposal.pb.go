// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/wasmx/v1/proposal.proto

package types

import (
	fmt "fmt"
	types "github.com/CosmWasm/wasmd/x/wasm/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FundingMode int32

const (
	FundingMode_Unspecified FundingMode = 0
	FundingMode_SelfFunded  FundingMode = 1
	FundingMode_GrantOnly   FundingMode = 2
	FundingMode_Dual        FundingMode = 3
)

var FundingMode_name = map[int32]string{
	0: "Unspecified",
	1: "SelfFunded",
	2: "GrantOnly",
	3: "Dual",
}

var FundingMode_value = map[string]int32{
	"Unspecified": 0,
	"SelfFunded":  1,
	"GrantOnly":   2,
	"Dual":        3,
}

func (x FundingMode) String() string {
	return proto.EnumName(FundingMode_name, int32(x))
}

func (FundingMode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_78702936db55299c, []int{0}
}

type ContractRegistrationRequestProposal struct {
	Title                       string                      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description                 string                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ContractRegistrationRequest ContractRegistrationRequest `protobuf:"bytes,3,opt,name=contract_registration_request,json=contractRegistrationRequest,proto3" json:"contract_registration_request"`
}

func (m *ContractRegistrationRequestProposal) Reset()         { *m = ContractRegistrationRequestProposal{} }
func (m *ContractRegistrationRequestProposal) String() string { return proto.CompactTextString(m) }
func (*ContractRegistrationRequestProposal) ProtoMessage()    {}
func (*ContractRegistrationRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_78702936db55299c, []int{0}
}
func (m *ContractRegistrationRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractRegistrationRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractRegistrationRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractRegistrationRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractRegistrationRequestProposal.Merge(m, src)
}
func (m *ContractRegistrationRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *ContractRegistrationRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractRegistrationRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_ContractRegistrationRequestProposal proto.InternalMessageInfo

type BatchContractRegistrationRequestProposal struct {
	Title                        string                        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description                  string                        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ContractRegistrationRequests []ContractRegistrationRequest `protobuf:"bytes,3,rep,name=contract_registration_requests,json=contractRegistrationRequests,proto3" json:"contract_registration_requests"`
}

func (m *BatchContractRegistrationRequestProposal) Reset() {
	*m = BatchContractRegistrationRequestProposal{}
}
func (m *BatchContractRegistrationRequestProposal) String() string { return proto.CompactTextString(m) }
func (*BatchContractRegistrationRequestProposal) ProtoMessage()    {}
func (*BatchContractRegistrationRequestProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_78702936db55299c, []int{1}
}
func (m *BatchContractRegistrationRequestProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchContractRegistrationRequestProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchContractRegistrationRequestProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchContractRegistrationRequestProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchContractRegistrationRequestProposal.Merge(m, src)
}
func (m *BatchContractRegistrationRequestProposal) XXX_Size() int {
	return m.Size()
}
func (m *BatchContractRegistrationRequestProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchContractRegistrationRequestProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BatchContractRegistrationRequestProposal proto.InternalMessageInfo

type BatchContractDeregistrationProposal struct {
	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Contracts   []string `protobuf:"bytes,3,rep,name=contracts,proto3" json:"contracts,omitempty"`
}

func (m *BatchContractDeregistrationProposal) Reset()         { *m = BatchContractDeregistrationProposal{} }
func (m *BatchContractDeregistrationProposal) String() string { return proto.CompactTextString(m) }
func (*BatchContractDeregistrationProposal) ProtoMessage()    {}
func (*BatchContractDeregistrationProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_78702936db55299c, []int{2}
}
func (m *BatchContractDeregistrationProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchContractDeregistrationProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchContractDeregistrationProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchContractDeregistrationProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchContractDeregistrationProposal.Merge(m, src)
}
func (m *BatchContractDeregistrationProposal) XXX_Size() int {
	return m.Size()
}
func (m *BatchContractDeregistrationProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchContractDeregistrationProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BatchContractDeregistrationProposal proto.InternalMessageInfo

type ContractRegistrationRequest struct {
	// Unique Identifier for contract instance to be registered.
	ContractAddress string `protobuf:"bytes,1,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// Maximum gas to be used for the smart contract execution.
	GasLimit uint64 `protobuf:"varint,2,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	// gas price to be used for the smart contract execution.
	GasPrice          uint64 `protobuf:"varint,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	ShouldPinContract bool   `protobuf:"varint,4,opt,name=should_pin_contract,json=shouldPinContract,proto3" json:"should_pin_contract,omitempty"`
	// if true contract owner can update it, if false only current code_id will be
	// allowed to be executed
	IsMigrationAllowed bool `protobuf:"varint,5,opt,name=is_migration_allowed,json=isMigrationAllowed,proto3" json:"is_migration_allowed,omitempty"`
	// code_id of the contract being registered - will be verified upon every
	// execution but only if is_migration_allowed is false
	CodeId uint64 `protobuf:"varint,6,opt,name=code_id,json=codeId,proto3" json:"code_id,omitempty"`
	// Optional address of admin account (that will be allowed to pause or update
	// contract params)
	AdminAddress string `protobuf:"bytes,7,opt,name=admin_address,json=adminAddress,proto3" json:"admin_address,omitempty"`
	// Optional address of the contract that grants fees. Must be set if
	// funding_mode is other than SelfFunded
	GranterAddress string `protobuf:"bytes,8,opt,name=granter_address,json=granterAddress,proto3" json:"granter_address,omitempty"`
	// Specifies how the contract will fund its execution
	FundingMode FundingMode `protobuf:"varint,9,opt,name=funding_mode,json=fundingMode,proto3,enum=joltify.third_party.wasmx.v1.FundingMode" json:"funding_mode,omitempty"`
}

func (m *ContractRegistrationRequest) Reset()         { *m = ContractRegistrationRequest{} }
func (m *ContractRegistrationRequest) String() string { return proto.CompactTextString(m) }
func (*ContractRegistrationRequest) ProtoMessage()    {}
func (*ContractRegistrationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78702936db55299c, []int{3}
}
func (m *ContractRegistrationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractRegistrationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractRegistrationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractRegistrationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractRegistrationRequest.Merge(m, src)
}
func (m *ContractRegistrationRequest) XXX_Size() int {
	return m.Size()
}
func (m *ContractRegistrationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractRegistrationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ContractRegistrationRequest proto.InternalMessageInfo

func (m *ContractRegistrationRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *ContractRegistrationRequest) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ContractRegistrationRequest) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *ContractRegistrationRequest) GetShouldPinContract() bool {
	if m != nil {
		return m.ShouldPinContract
	}
	return false
}

func (m *ContractRegistrationRequest) GetIsMigrationAllowed() bool {
	if m != nil {
		return m.IsMigrationAllowed
	}
	return false
}

func (m *ContractRegistrationRequest) GetCodeId() uint64 {
	if m != nil {
		return m.CodeId
	}
	return 0
}

func (m *ContractRegistrationRequest) GetAdminAddress() string {
	if m != nil {
		return m.AdminAddress
	}
	return ""
}

func (m *ContractRegistrationRequest) GetGranterAddress() string {
	if m != nil {
		return m.GranterAddress
	}
	return ""
}

func (m *ContractRegistrationRequest) GetFundingMode() FundingMode {
	if m != nil {
		return m.FundingMode
	}
	return FundingMode_Unspecified
}

type BatchStoreCodeProposal struct {
	Title       string                    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Proposals   []types.StoreCodeProposal `protobuf:"bytes,3,rep,name=proposals,proto3" json:"proposals"`
}

func (m *BatchStoreCodeProposal) Reset()         { *m = BatchStoreCodeProposal{} }
func (m *BatchStoreCodeProposal) String() string { return proto.CompactTextString(m) }
func (*BatchStoreCodeProposal) ProtoMessage()    {}
func (*BatchStoreCodeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_78702936db55299c, []int{4}
}
func (m *BatchStoreCodeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchStoreCodeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchStoreCodeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchStoreCodeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchStoreCodeProposal.Merge(m, src)
}
func (m *BatchStoreCodeProposal) XXX_Size() int {
	return m.Size()
}
func (m *BatchStoreCodeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchStoreCodeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_BatchStoreCodeProposal proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("joltify.third_party.wasmx.v1.FundingMode", FundingMode_name, FundingMode_value)
	proto.RegisterType((*ContractRegistrationRequestProposal)(nil), "joltify.third_party.wasmx.v1.ContractRegistrationRequestProposal")
	proto.RegisterType((*BatchContractRegistrationRequestProposal)(nil), "joltify.third_party.wasmx.v1.BatchContractRegistrationRequestProposal")
	proto.RegisterType((*BatchContractDeregistrationProposal)(nil), "joltify.third_party.wasmx.v1.BatchContractDeregistrationProposal")
	proto.RegisterType((*ContractRegistrationRequest)(nil), "joltify.third_party.wasmx.v1.ContractRegistrationRequest")
	proto.RegisterType((*BatchStoreCodeProposal)(nil), "joltify.third_party.wasmx.v1.BatchStoreCodeProposal")
}

func init() {
	proto.RegisterFile("joltify/third_party/wasmx/v1/proposal.proto", fileDescriptor_78702936db55299c)
}

var fileDescriptor_78702936db55299c = []byte{
	// 713 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0x5f, 0x4f, 0xd4, 0x4a,
	0x14, 0x6f, 0x77, 0x17, 0xd8, 0xce, 0xf2, 0x67, 0xef, 0x5c, 0x72, 0x6f, 0x2f, 0x70, 0xcb, 0x06,
	0x12, 0x5d, 0x34, 0xb4, 0x82, 0x0f, 0x46, 0xde, 0xf8, 0x13, 0x89, 0x09, 0x44, 0x52, 0xe2, 0x8b,
	0x26, 0x36, 0x43, 0x67, 0xb6, 0x3b, 0xa6, 0xed, 0xd4, 0x99, 0xd9, 0x85, 0x7d, 0x36, 0x26, 0x26,
	0xbe, 0x18, 0x3f, 0x01, 0x89, 0x5f, 0xc1, 0x17, 0xbf, 0x01, 0xf1, 0x89, 0x17, 0x13, 0x9f, 0x8c,
	0x81, 0x17, 0x3f, 0x86, 0xe9, 0xb4, 0x85, 0x35, 0xe2, 0x4a, 0x82, 0xbe, 0xf5, 0x9c, 0xf3, 0x3b,
	0xe7, 0xfc, 0xce, 0xaf, 0x67, 0x66, 0xc0, 0xcd, 0xa7, 0x2c, 0x94, 0xb4, 0xd5, 0x73, 0x64, 0x9b,
	0x72, 0xec, 0x25, 0x88, 0xcb, 0x9e, 0xb3, 0x8f, 0x44, 0x74, 0xe0, 0x74, 0x97, 0x9c, 0x84, 0xb3,
	0x84, 0x09, 0x14, 0xda, 0x09, 0x67, 0x92, 0xc1, 0x99, 0x1c, 0x6c, 0xf7, 0x81, 0x6d, 0x05, 0xb6,
	0xbb, 0x4b, 0x53, 0xff, 0xf9, 0x4c, 0x44, 0x4c, 0x78, 0x0a, 0xeb, 0x64, 0x46, 0x96, 0x38, 0xb5,
	0x72, 0x51, 0x97, 0x14, 0x91, 0x26, 0xab, 0x76, 0xfd, 0xdd, 0xbc, 0x90, 0x04, 0xc8, 0xef, 0xe5,
	0xb9, 0x93, 0x01, 0x0b, 0x58, 0x56, 0x33, 0xfd, 0xca, 0xbc, 0x73, 0xaf, 0x4a, 0x60, 0x7e, 0x9d,
	0xc5, 0x92, 0x23, 0x5f, 0xba, 0x24, 0xa0, 0x42, 0x72, 0x24, 0x29, 0x8b, 0x5d, 0xf2, 0xac, 0x43,
	0x84, 0xdc, 0xc9, 0x4b, 0xc1, 0x49, 0x30, 0x24, 0xa9, 0x0c, 0x89, 0xa9, 0x37, 0xf4, 0xa6, 0xe1,
	0x66, 0x06, 0x6c, 0x80, 0x1a, 0x26, 0xc2, 0xe7, 0x34, 0x49, 0x73, 0xcc, 0x92, 0x8a, 0xf5, 0xbb,
	0xe0, 0x73, 0x1d, 0xfc, 0xef, 0xe7, 0xf5, 0x3d, 0xde, 0xd7, 0xc0, 0xe3, 0x59, 0x07, 0xb3, 0xdc,
	0xd0, 0x9b, 0xb5, 0xe5, 0xbb, 0xf6, 0x20, 0x4d, 0xec, 0x01, 0x14, 0xd7, 0x2a, 0x47, 0x9f, 0x67,
	0x35, 0x77, 0xda, 0xff, 0x39, 0x64, 0xe5, 0xda, 0xcb, 0xc3, 0x59, 0xed, 0xeb, 0xe1, 0xac, 0xf6,
	0xe1, 0xdd, 0xe2, 0x54, 0xae, 0x68, 0xc0, 0xba, 0x76, 0x77, 0x69, 0x8f, 0x48, 0x94, 0x95, 0x27,
	0xb1, 0x9c, 0x7b, 0x53, 0x02, 0xcd, 0x35, 0x24, 0xfd, 0xf6, 0x9f, 0x94, 0xe4, 0x85, 0x0e, 0xac,
	0x81, 0x92, 0x08, 0xb3, 0xdc, 0x28, 0xff, 0x0e, 0x4d, 0x66, 0x06, 0x68, 0x22, 0x2e, 0x2d, 0xca,
	0x5b, 0x1d, 0xcc, 0x7f, 0x27, 0xca, 0x06, 0xe9, 0x67, 0x7d, 0x65, 0x3d, 0x66, 0x80, 0x51, 0xf0,
	0xcc, 0x26, 0x37, 0xdc, 0x73, 0xc7, 0xa5, 0x59, 0xbe, 0x2f, 0x83, 0xe9, 0x01, 0x8a, 0xc0, 0x05,
	0x50, 0x3f, 0x13, 0x1d, 0x61, 0xcc, 0x89, 0x10, 0x39, 0xd1, 0x89, 0xc2, 0xbf, 0x9a, 0xb9, 0xe1,
	0x34, 0x30, 0x02, 0x24, 0xbc, 0x90, 0x46, 0x54, 0x2a, 0xc2, 0x15, 0xb7, 0x1a, 0x20, 0xb1, 0x95,
	0xda, 0x45, 0x30, 0xe1, 0xd4, 0x27, 0x6a, 0x77, 0xb3, 0xe0, 0x4e, 0x6a, 0x43, 0x1b, 0xfc, 0x2d,
	0xda, 0xac, 0x13, 0x62, 0x2f, 0xa1, 0xb1, 0x57, 0xd4, 0x35, 0x2b, 0x0d, 0xbd, 0x59, 0x75, 0xff,
	0xca, 0x42, 0x3b, 0x34, 0x2e, 0x78, 0xc2, 0x5b, 0x60, 0x92, 0x0a, 0x2f, 0xa2, 0x41, 0xbe, 0x00,
	0x28, 0x0c, 0xd9, 0x3e, 0xc1, 0xe6, 0x90, 0x4a, 0x80, 0x54, 0x6c, 0x17, 0xa1, 0xd5, 0x2c, 0x02,
	0xff, 0x05, 0x23, 0x3e, 0xc3, 0xc4, 0xa3, 0xd8, 0x1c, 0x56, 0xcd, 0x87, 0x53, 0xf3, 0x3e, 0x86,
	0xf3, 0x60, 0x0c, 0xe1, 0x88, 0xc6, 0x67, 0xc3, 0x8d, 0xa8, 0xe1, 0x46, 0x95, 0xb3, 0x98, 0xec,
	0x3a, 0x98, 0x08, 0x38, 0x8a, 0x25, 0xe1, 0x67, 0xb0, 0xaa, 0x82, 0x8d, 0xe7, 0xee, 0x02, 0xb8,
	0x05, 0x46, 0x5b, 0x9d, 0x18, 0xd3, 0x38, 0xf0, 0x22, 0x86, 0x89, 0x69, 0x34, 0xf4, 0xe6, 0xf8,
	0xf2, 0xc2, 0xe0, 0x85, 0xbc, 0x97, 0x65, 0x6c, 0x33, 0x4c, 0xdc, 0x5a, 0xeb, 0xdc, 0x58, 0xb1,
	0x7e, 0xf1, 0xef, 0x3e, 0xea, 0xe0, 0x1f, 0xb5, 0x61, 0xbb, 0x92, 0x71, 0xb2, 0xce, 0x30, 0xb9,
	0xf2, 0x52, 0x3d, 0x06, 0x46, 0x71, 0x0d, 0x16, 0xc7, 0xe9, 0xce, 0x85, 0xec, 0x8b, 0xdb, 0x53,
	0x8d, 0x91, 0x4e, 0xf1, 0x03, 0x87, 0xfc, 0x30, 0x9d, 0xd7, 0xbb, 0xec, 0x4e, 0xde, 0xd8, 0x04,
	0xb5, 0x3e, 0x4d, 0xe0, 0x04, 0xa8, 0x3d, 0x8c, 0x45, 0x42, 0x7c, 0xda, 0xa2, 0x04, 0xd7, 0x35,
	0x38, 0x0e, 0xc0, 0x2e, 0x09, 0x5b, 0x29, 0x86, 0xe0, 0xba, 0x0e, 0xc7, 0x80, 0xb1, 0x99, 0xfe,
	0x87, 0x07, 0x71, 0xd8, 0xab, 0x97, 0x60, 0x15, 0x54, 0x36, 0x3a, 0x28, 0xac, 0x97, 0xd7, 0x9e,
	0x1c, 0x9d, 0x58, 0xfa, 0xf1, 0x89, 0xa5, 0x7f, 0x39, 0xb1, 0xf4, 0xd7, 0xa7, 0x96, 0x76, 0x7c,
	0x6a, 0x69, 0x9f, 0x4e, 0x2d, 0xed, 0xd1, 0x46, 0x40, 0x65, 0xbb, 0xb3, 0x67, 0xfb, 0x2c, 0x72,
	0xf2, 0xf1, 0x16, 0x5b, 0x34, 0x46, 0xb1, 0x4f, 0x0a, 0xdb, 0x0b, 0x89, 0xe2, 0xe0, 0x1c, 0x5c,
	0xf0, 0x38, 0xc9, 0x5e, 0x42, 0xc4, 0xde, 0xb0, 0x7a, 0x0c, 0x6e, 0x7f, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0xa0, 0xc1, 0x26, 0x50, 0xc6, 0x06, 0x00, 0x00,
}

func (m *ContractRegistrationRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractRegistrationRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractRegistrationRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ContractRegistrationRequest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchContractRegistrationRequestProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchContractRegistrationRequestProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchContractRegistrationRequestProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractRegistrationRequests) > 0 {
		for iNdEx := len(m.ContractRegistrationRequests) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractRegistrationRequests[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchContractDeregistrationProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchContractDeregistrationProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchContractDeregistrationProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Contracts) > 0 {
		for iNdEx := len(m.Contracts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Contracts[iNdEx])
			copy(dAtA[i:], m.Contracts[iNdEx])
			i = encodeVarintProposal(dAtA, i, uint64(len(m.Contracts[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractRegistrationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractRegistrationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractRegistrationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FundingMode != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.FundingMode))
		i--
		dAtA[i] = 0x48
	}
	if len(m.GranterAddress) > 0 {
		i -= len(m.GranterAddress)
		copy(dAtA[i:], m.GranterAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.GranterAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AdminAddress) > 0 {
		i -= len(m.AdminAddress)
		copy(dAtA[i:], m.AdminAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.AdminAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CodeId != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.CodeId))
		i--
		dAtA[i] = 0x30
	}
	if m.IsMigrationAllowed {
		i--
		if m.IsMigrationAllowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ShouldPinContract {
		i--
		if m.ShouldPinContract {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.GasPrice != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x18
	}
	if m.GasLimit != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BatchStoreCodeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchStoreCodeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BatchStoreCodeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposals) > 0 {
		for iNdEx := len(m.Proposals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProposal(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractRegistrationRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = m.ContractRegistrationRequest.Size()
	n += 1 + l + sovProposal(uint64(l))
	return n
}

func (m *BatchContractRegistrationRequestProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.ContractRegistrationRequests) > 0 {
		for _, e := range m.ContractRegistrationRequests {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *BatchContractDeregistrationProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.Contracts) > 0 {
		for _, s := range m.Contracts {
			l = len(s)
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func (m *ContractRegistrationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovProposal(uint64(m.GasLimit))
	}
	if m.GasPrice != 0 {
		n += 1 + sovProposal(uint64(m.GasPrice))
	}
	if m.ShouldPinContract {
		n += 2
	}
	if m.IsMigrationAllowed {
		n += 2
	}
	if m.CodeId != 0 {
		n += 1 + sovProposal(uint64(m.CodeId))
	}
	l = len(m.AdminAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.GranterAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.FundingMode != 0 {
		n += 1 + sovProposal(uint64(m.FundingMode))
	}
	return n
}

func (m *BatchStoreCodeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if len(m.Proposals) > 0 {
		for _, e := range m.Proposals {
			l = e.Size()
			n += 1 + l + sovProposal(uint64(l))
		}
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractRegistrationRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractRegistrationRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractRegistrationRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRegistrationRequest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ContractRegistrationRequest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchContractRegistrationRequestProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchContractRegistrationRequestProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchContractRegistrationRequestProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractRegistrationRequests", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractRegistrationRequests = append(m.ContractRegistrationRequests, ContractRegistrationRequest{})
			if err := m.ContractRegistrationRequests[len(m.ContractRegistrationRequests)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchContractDeregistrationProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchContractDeregistrationProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchContractDeregistrationProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contracts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contracts = append(m.Contracts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractRegistrationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractRegistrationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractRegistrationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShouldPinContract", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShouldPinContract = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMigrationAllowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMigrationAllowed = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeId", wireType)
			}
			m.CodeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CodeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GranterAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GranterAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingMode", wireType)
			}
			m.FundingMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingMode |= FundingMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchStoreCodeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchStoreCodeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchStoreCodeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposals = append(m.Proposals, types.StoreCodeProposal{})
			if err := m.Proposals[len(m.Proposals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
