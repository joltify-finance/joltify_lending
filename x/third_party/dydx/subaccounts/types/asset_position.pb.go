// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/dydxprotocol/subaccounts/asset_position.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_joltify_third_party_dydxprotocol_v4_chain_protocol_dtypes "github.com/joltify/third_party/dydxprotocol/v4-chain/protocol/dtypes"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AssetPositions define an accountâ€™s positions of an `Asset`.
// Therefore they hold any information needed to trade on Spot and Margin.
type AssetPosition struct {
	// The `Id` of the `Asset`.
	AssetId uint32 `protobuf:"varint,1,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// The absolute size of the position in base quantums.
	Quantums github_com_joltify_third_party_dydxprotocol_v4_chain_protocol_dtypes.SerializableInt `protobuf:"bytes,2,opt,name=quantums,proto3,customtype=github.com/joltify/third_party/dydxprotocol/v4-chain/protocol/dtypes.SerializableInt" json:"quantums"`
	// The `Index` (either `LongIndex` or `ShortIndex`) of the `Asset` the last
	// time this position was settled
	// TODO(DEC-582): pending margin trading being added.
	Index uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *AssetPosition) Reset()         { *m = AssetPosition{} }
func (m *AssetPosition) String() string { return proto.CompactTextString(m) }
func (*AssetPosition) ProtoMessage()    {}
func (*AssetPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_44e65bdfcb956dea, []int{0}
}
func (m *AssetPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetPosition.Merge(m, src)
}
func (m *AssetPosition) XXX_Size() int {
	return m.Size()
}
func (m *AssetPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetPosition.DiscardUnknown(m)
}

var xxx_messageInfo_AssetPosition proto.InternalMessageInfo

func (m *AssetPosition) GetAssetId() uint32 {
	if m != nil {
		return m.AssetId
	}
	return 0
}

func (m *AssetPosition) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*AssetPosition)(nil), "joltify.third_party.dydxprotocol.subaccounts.AssetPosition")
}

func init() {
	proto.RegisterFile("joltify/third_party/dydxprotocol/subaccounts/asset_position.proto", fileDescriptor_44e65bdfcb956dea)
}

var fileDescriptor_44e65bdfcb956dea = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x3f, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0x63, 0xfe, 0x56, 0x11, 0x5d, 0xa2, 0x0e, 0x85, 0xc1, 0xad, 0x98, 0x3a, 0x50, 0x7b,
	0x80, 0x0b, 0xb4, 0x5b, 0x27, 0x50, 0x61, 0x42, 0x48, 0x95, 0x63, 0xbb, 0xc9, 0x43, 0xa9, 0x1d,
	0x62, 0x07, 0x25, 0x9c, 0x82, 0xf3, 0x70, 0x82, 0x8e, 0x1d, 0x11, 0x43, 0x85, 0x92, 0x8b, 0xa0,
	0x26, 0xa5, 0x0a, 0xea, 0xc0, 0xe6, 0xcf, 0xb6, 0x7e, 0xdf, 0xef, 0x3d, 0x77, 0xf4, 0xac, 0x23,
	0x0b, 0xf3, 0x9c, 0xda, 0x10, 0x12, 0x31, 0x8b, 0x59, 0x62, 0x73, 0x2a, 0x72, 0x91, 0xc5, 0x89,
	0xb6, 0x9a, 0xeb, 0x88, 0x9a, 0xd4, 0x67, 0x9c, 0xeb, 0x54, 0x59, 0x43, 0x99, 0x31, 0xd2, 0xce,
	0x62, 0x6d, 0xc0, 0x82, 0x56, 0xa4, 0xfa, 0xe3, 0x5d, 0x6d, 0x11, 0xa4, 0x81, 0x20, 0x4d, 0x04,
	0x69, 0x20, 0x2e, 0x3a, 0x81, 0x0e, 0x74, 0xf5, 0x42, 0x37, 0xa7, 0x9a, 0x71, 0xf9, 0x81, 0xdc,
	0xf6, 0x68, 0x03, 0xbf, 0xdb, 0xb2, 0xbd, 0x73, 0xb7, 0x55, 0xb7, 0x81, 0xe8, 0xa2, 0x3e, 0x1a,
	0xb4, 0xa7, 0xa7, 0x55, 0x9e, 0x08, 0x2f, 0x73, 0x5b, 0x2f, 0x29, 0x53, 0x36, 0x5d, 0x98, 0xee,
	0x41, 0x1f, 0x0d, 0xce, 0xc6, 0x4f, 0xcb, 0x75, 0xcf, 0xf9, 0x5a, 0xf7, 0x1e, 0x02, 0xb0, 0x61,
	0xea, 0x13, 0xae, 0x17, 0xf4, 0xdf, 0xc1, 0x5e, 0x6f, 0x86, 0x3c, 0x64, 0xa0, 0xe8, 0xee, 0x46,
	0xd8, 0x3c, 0x96, 0x86, 0xdc, 0xcb, 0x04, 0x58, 0x04, 0x6f, 0xcc, 0x8f, 0xe4, 0x44, 0xd9, 0xe9,
	0xae, 0xcd, 0xeb, 0xb8, 0xc7, 0xa0, 0x84, 0xcc, 0xba, 0x87, 0x7d, 0x34, 0x38, 0x9a, 0xd6, 0x61,
	0x0c, 0xcb, 0x02, 0xa3, 0x55, 0x81, 0xd1, 0x77, 0x81, 0xd1, 0x7b, 0x89, 0x9d, 0x55, 0x89, 0x9d,
	0xcf, 0x12, 0x3b, 0x8f, 0xb7, 0xfb, 0x3e, 0xc3, 0x39, 0x28, 0xa6, 0xb8, 0xfc, 0xcd, 0xb3, 0x48,
	0x2a, 0x01, 0x2a, 0xa0, 0xd9, 0x9e, 0xe9, 0x9f, 0xd5, 0x57, 0x6a, 0xfe, 0x49, 0xe5, 0x7a, 0xfd,
	0x13, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xd7, 0x14, 0xaf, 0xb7, 0x01, 0x00, 0x00,
}

func (m *AssetPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintAssetPosition(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Quantums.Size()
		i -= size
		if _, err := m.Quantums.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintAssetPosition(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.AssetId != 0 {
		i = encodeVarintAssetPosition(dAtA, i, uint64(m.AssetId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAssetPosition(dAtA []byte, offset int, v uint64) int {
	offset -= sovAssetPosition(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AssetPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetId != 0 {
		n += 1 + sovAssetPosition(uint64(m.AssetId))
	}
	l = m.Quantums.Size()
	n += 1 + l + sovAssetPosition(uint64(l))
	if m.Index != 0 {
		n += 1 + sovAssetPosition(uint64(m.Index))
	}
	return n
}

func sovAssetPosition(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAssetPosition(x uint64) (n int) {
	return sovAssetPosition(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AssetPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAssetPosition
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			m.AssetId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quantums", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthAssetPosition
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthAssetPosition
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Quantums.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAssetPosition
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAssetPosition(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAssetPosition
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAssetPosition(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAssetPosition
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssetPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAssetPosition
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAssetPosition
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAssetPosition
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAssetPosition
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAssetPosition        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAssetPosition          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAssetPosition = fmt.Errorf("proto: unexpected end of group")
)
