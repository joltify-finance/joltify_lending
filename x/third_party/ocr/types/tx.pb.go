// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/ocr/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateFeed struct {
	Sender string      `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Config *FeedConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *MsgCreateFeed) Reset()         { *m = MsgCreateFeed{} }
func (m *MsgCreateFeed) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFeed) ProtoMessage()    {}
func (*MsgCreateFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{0}
}
func (m *MsgCreateFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFeed.Merge(m, src)
}
func (m *MsgCreateFeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFeed proto.InternalMessageInfo

type MsgCreateFeedResponse struct {
}

func (m *MsgCreateFeedResponse) Reset()         { *m = MsgCreateFeedResponse{} }
func (m *MsgCreateFeedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateFeedResponse) ProtoMessage()    {}
func (*MsgCreateFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{1}
}
func (m *MsgCreateFeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateFeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateFeedResponse.Merge(m, src)
}
func (m *MsgCreateFeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateFeedResponse proto.InternalMessageInfo

type MsgUpdateFeed struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// feed_id is an unique ID for the target of this config
	FeedId string `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	// signers ith element is address ith oracle uses to sign a report
	Signers []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
	// transmitters ith element is address ith oracle uses to transmit a report
	// via the transmit method
	Transmitters []string `protobuf:"bytes,4,rep,name=transmitters,proto3" json:"transmitters,omitempty"`
	// Fixed LINK reward for each observer
	LinkPerObservation *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=link_per_observation,json=linkPerObservation,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"link_per_observation,omitempty"`
	// Fixed LINK reward for transmitter
	LinkPerTransmission *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=link_per_transmission,json=linkPerTransmission,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"link_per_transmission,omitempty"`
	// Native denom for LINK coin in the bank keeper
	LinkDenom string `protobuf:"bytes,7,opt,name=link_denom,json=linkDenom,proto3" json:"link_denom,omitempty"`
	// feed administrator
	FeedAdmin string `protobuf:"bytes,8,opt,name=feed_admin,json=feedAdmin,proto3" json:"feed_admin,omitempty"`
	// feed billing administrator
	BillingAdmin string `protobuf:"bytes,9,opt,name=billing_admin,json=billingAdmin,proto3" json:"billing_admin,omitempty"`
}

func (m *MsgUpdateFeed) Reset()         { *m = MsgUpdateFeed{} }
func (m *MsgUpdateFeed) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeed) ProtoMessage()    {}
func (*MsgUpdateFeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{2}
}
func (m *MsgUpdateFeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeed.Merge(m, src)
}
func (m *MsgUpdateFeed) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeed) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeed.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeed proto.InternalMessageInfo

type MsgUpdateFeedResponse struct {
}

func (m *MsgUpdateFeedResponse) Reset()         { *m = MsgUpdateFeedResponse{} }
func (m *MsgUpdateFeedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFeedResponse) ProtoMessage()    {}
func (*MsgUpdateFeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{3}
}
func (m *MsgUpdateFeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFeedResponse.Merge(m, src)
}
func (m *MsgUpdateFeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFeedResponse proto.InternalMessageInfo

type MsgTransmit struct {
	// Address of the transmitter
	Transmitter  string   `protobuf:"bytes,1,opt,name=transmitter,proto3" json:"transmitter,omitempty"`
	ConfigDigest []byte   `protobuf:"bytes,2,opt,name=config_digest,json=configDigest,proto3" json:"config_digest,omitempty"`
	FeedId       string   `protobuf:"bytes,3,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Epoch        uint64   `protobuf:"varint,4,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round        uint64   `protobuf:"varint,5,opt,name=round,proto3" json:"round,omitempty"`
	ExtraHash    []byte   `protobuf:"bytes,6,opt,name=extra_hash,json=extraHash,proto3" json:"extra_hash,omitempty"`
	Report       *Report  `protobuf:"bytes,7,opt,name=report,proto3" json:"report,omitempty"`
	Signatures   [][]byte `protobuf:"bytes,8,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *MsgTransmit) Reset()         { *m = MsgTransmit{} }
func (m *MsgTransmit) String() string { return proto.CompactTextString(m) }
func (*MsgTransmit) ProtoMessage()    {}
func (*MsgTransmit) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{4}
}
func (m *MsgTransmit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmit.Merge(m, src)
}
func (m *MsgTransmit) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmit) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmit.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmit proto.InternalMessageInfo

type MsgTransmitResponse struct {
}

func (m *MsgTransmitResponse) Reset()         { *m = MsgTransmitResponse{} }
func (m *MsgTransmitResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransmitResponse) ProtoMessage()    {}
func (*MsgTransmitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{5}
}
func (m *MsgTransmitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransmitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransmitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransmitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransmitResponse.Merge(m, src)
}
func (m *MsgTransmitResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransmitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransmitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransmitResponse proto.InternalMessageInfo

type MsgFundFeedRewardPool struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	FeedId string     `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgFundFeedRewardPool) Reset()         { *m = MsgFundFeedRewardPool{} }
func (m *MsgFundFeedRewardPool) String() string { return proto.CompactTextString(m) }
func (*MsgFundFeedRewardPool) ProtoMessage()    {}
func (*MsgFundFeedRewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{6}
}
func (m *MsgFundFeedRewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundFeedRewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundFeedRewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundFeedRewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundFeedRewardPool.Merge(m, src)
}
func (m *MsgFundFeedRewardPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundFeedRewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundFeedRewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundFeedRewardPool proto.InternalMessageInfo

type MsgFundFeedRewardPoolResponse struct {
}

func (m *MsgFundFeedRewardPoolResponse) Reset()         { *m = MsgFundFeedRewardPoolResponse{} }
func (m *MsgFundFeedRewardPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFundFeedRewardPoolResponse) ProtoMessage()    {}
func (*MsgFundFeedRewardPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{7}
}
func (m *MsgFundFeedRewardPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFundFeedRewardPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFundFeedRewardPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFundFeedRewardPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFundFeedRewardPoolResponse.Merge(m, src)
}
func (m *MsgFundFeedRewardPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFundFeedRewardPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFundFeedRewardPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFundFeedRewardPoolResponse proto.InternalMessageInfo

type MsgWithdrawFeedRewardPool struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	FeedId string     `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Amount types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgWithdrawFeedRewardPool) Reset()         { *m = MsgWithdrawFeedRewardPool{} }
func (m *MsgWithdrawFeedRewardPool) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFeedRewardPool) ProtoMessage()    {}
func (*MsgWithdrawFeedRewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{8}
}
func (m *MsgWithdrawFeedRewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFeedRewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFeedRewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFeedRewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFeedRewardPool.Merge(m, src)
}
func (m *MsgWithdrawFeedRewardPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFeedRewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFeedRewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFeedRewardPool proto.InternalMessageInfo

type MsgWithdrawFeedRewardPoolResponse struct {
}

func (m *MsgWithdrawFeedRewardPoolResponse) Reset()         { *m = MsgWithdrawFeedRewardPoolResponse{} }
func (m *MsgWithdrawFeedRewardPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawFeedRewardPoolResponse) ProtoMessage()    {}
func (*MsgWithdrawFeedRewardPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{9}
}
func (m *MsgWithdrawFeedRewardPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawFeedRewardPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawFeedRewardPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawFeedRewardPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawFeedRewardPoolResponse.Merge(m, src)
}
func (m *MsgWithdrawFeedRewardPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawFeedRewardPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawFeedRewardPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawFeedRewardPoolResponse proto.InternalMessageInfo

type MsgSetPayees struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	FeedId string `protobuf:"bytes,2,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	// addresses oracles use to transmit the reports
	Transmitters []string `protobuf:"bytes,3,rep,name=transmitters,proto3" json:"transmitters,omitempty"`
	// addresses of payees corresponding to list of transmitters
	Payees []string `protobuf:"bytes,4,rep,name=payees,proto3" json:"payees,omitempty"`
}

func (m *MsgSetPayees) Reset()         { *m = MsgSetPayees{} }
func (m *MsgSetPayees) String() string { return proto.CompactTextString(m) }
func (*MsgSetPayees) ProtoMessage()    {}
func (*MsgSetPayees) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{10}
}
func (m *MsgSetPayees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPayees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPayees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPayees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPayees.Merge(m, src)
}
func (m *MsgSetPayees) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPayees) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPayees.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPayees proto.InternalMessageInfo

type MsgSetPayeesResponse struct {
}

func (m *MsgSetPayeesResponse) Reset()         { *m = MsgSetPayeesResponse{} }
func (m *MsgSetPayeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPayeesResponse) ProtoMessage()    {}
func (*MsgSetPayeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{11}
}
func (m *MsgSetPayeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPayeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPayeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPayeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPayeesResponse.Merge(m, src)
}
func (m *MsgSetPayeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPayeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPayeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPayeesResponse proto.InternalMessageInfo

type MsgTransferPayeeship struct {
	// transmitter address of oracle whose payee is changing
	Sender      string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Transmitter string `protobuf:"bytes,2,opt,name=transmitter,proto3" json:"transmitter,omitempty"`
	FeedId      string `protobuf:"bytes,3,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	// new payee address
	Proposed string `protobuf:"bytes,4,opt,name=proposed,proto3" json:"proposed,omitempty"`
}

func (m *MsgTransferPayeeship) Reset()         { *m = MsgTransferPayeeship{} }
func (m *MsgTransferPayeeship) String() string { return proto.CompactTextString(m) }
func (*MsgTransferPayeeship) ProtoMessage()    {}
func (*MsgTransferPayeeship) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{12}
}
func (m *MsgTransferPayeeship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferPayeeship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferPayeeship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferPayeeship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferPayeeship.Merge(m, src)
}
func (m *MsgTransferPayeeship) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferPayeeship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferPayeeship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferPayeeship proto.InternalMessageInfo

type MsgTransferPayeeshipResponse struct {
}

func (m *MsgTransferPayeeshipResponse) Reset()         { *m = MsgTransferPayeeshipResponse{} }
func (m *MsgTransferPayeeshipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTransferPayeeshipResponse) ProtoMessage()    {}
func (*MsgTransferPayeeshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{13}
}
func (m *MsgTransferPayeeshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTransferPayeeshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTransferPayeeshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTransferPayeeshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTransferPayeeshipResponse.Merge(m, src)
}
func (m *MsgTransferPayeeshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTransferPayeeshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTransferPayeeshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTransferPayeeshipResponse proto.InternalMessageInfo

type MsgAcceptPayeeship struct {
	// new payee address
	Payee string `protobuf:"bytes,1,opt,name=payee,proto3" json:"payee,omitempty"`
	// transmitter address of oracle whose payee is changing
	Transmitter string `protobuf:"bytes,2,opt,name=transmitter,proto3" json:"transmitter,omitempty"`
	FeedId      string `protobuf:"bytes,3,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
}

func (m *MsgAcceptPayeeship) Reset()         { *m = MsgAcceptPayeeship{} }
func (m *MsgAcceptPayeeship) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptPayeeship) ProtoMessage()    {}
func (*MsgAcceptPayeeship) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{14}
}
func (m *MsgAcceptPayeeship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptPayeeship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptPayeeship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptPayeeship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptPayeeship.Merge(m, src)
}
func (m *MsgAcceptPayeeship) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptPayeeship) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptPayeeship.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptPayeeship proto.InternalMessageInfo

type MsgAcceptPayeeshipResponse struct {
}

func (m *MsgAcceptPayeeshipResponse) Reset()         { *m = MsgAcceptPayeeshipResponse{} }
func (m *MsgAcceptPayeeshipResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptPayeeshipResponse) ProtoMessage()    {}
func (*MsgAcceptPayeeshipResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{15}
}
func (m *MsgAcceptPayeeshipResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptPayeeshipResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptPayeeshipResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptPayeeshipResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptPayeeshipResponse.Merge(m, src)
}
func (m *MsgAcceptPayeeshipResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptPayeeshipResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptPayeeshipResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptPayeeshipResponse proto.InternalMessageInfo

type MsgUpdateParams struct {
	// authority is the address of the governance account.
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the ocr parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{16}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e0190743a8fcf2f, []int{17}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateFeed)(nil), "joltify.third_party.ocr.v1beta1.MsgCreateFeed")
	proto.RegisterType((*MsgCreateFeedResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgCreateFeedResponse")
	proto.RegisterType((*MsgUpdateFeed)(nil), "joltify.third_party.ocr.v1beta1.MsgUpdateFeed")
	proto.RegisterType((*MsgUpdateFeedResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgUpdateFeedResponse")
	proto.RegisterType((*MsgTransmit)(nil), "joltify.third_party.ocr.v1beta1.MsgTransmit")
	proto.RegisterType((*MsgTransmitResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgTransmitResponse")
	proto.RegisterType((*MsgFundFeedRewardPool)(nil), "joltify.third_party.ocr.v1beta1.MsgFundFeedRewardPool")
	proto.RegisterType((*MsgFundFeedRewardPoolResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgFundFeedRewardPoolResponse")
	proto.RegisterType((*MsgWithdrawFeedRewardPool)(nil), "joltify.third_party.ocr.v1beta1.MsgWithdrawFeedRewardPool")
	proto.RegisterType((*MsgWithdrawFeedRewardPoolResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgWithdrawFeedRewardPoolResponse")
	proto.RegisterType((*MsgSetPayees)(nil), "joltify.third_party.ocr.v1beta1.MsgSetPayees")
	proto.RegisterType((*MsgSetPayeesResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgSetPayeesResponse")
	proto.RegisterType((*MsgTransferPayeeship)(nil), "joltify.third_party.ocr.v1beta1.MsgTransferPayeeship")
	proto.RegisterType((*MsgTransferPayeeshipResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgTransferPayeeshipResponse")
	proto.RegisterType((*MsgAcceptPayeeship)(nil), "joltify.third_party.ocr.v1beta1.MsgAcceptPayeeship")
	proto.RegisterType((*MsgAcceptPayeeshipResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgAcceptPayeeshipResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "joltify.third_party.ocr.v1beta1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "joltify.third_party.ocr.v1beta1.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("joltify/third_party/ocr/v1beta1/tx.proto", fileDescriptor_5e0190743a8fcf2f)
}

var fileDescriptor_5e0190743a8fcf2f = []byte{
	// 1113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xf7, 0xd6, 0x89, 0x13, 0xbf, 0xb8, 0xdf, 0xea, 0xbb, 0x71, 0x92, 0xcd, 0xaa, 0xb5, 0x8d,
	0x2b, 0x81, 0xf9, 0x91, 0x35, 0x49, 0x69, 0x41, 0x41, 0x80, 0xe2, 0x94, 0x8a, 0x1e, 0x2c, 0xa2,
	0x2d, 0x08, 0x09, 0x21, 0x99, 0xb5, 0x77, 0xb2, 0x1e, 0x6a, 0xcf, 0x2c, 0x33, 0xe3, 0x34, 0xe1,
	0x82, 0x80, 0x0b, 0x48, 0x3d, 0xf4, 0x84, 0x10, 0xa7, 0xfc, 0x09, 0x48, 0x70, 0xe4, 0x0f, 0xc8,
	0xb1, 0xe2, 0x84, 0x38, 0x44, 0x28, 0x39, 0xc0, 0x9f, 0x81, 0x66, 0x76, 0xbc, 0xde, 0xc4, 0x4e,
	0x6d, 0x87, 0x0b, 0x27, 0xfb, 0xbd, 0x79, 0xef, 0xf3, 0xf9, 0xec, 0x7b, 0x33, 0x6f, 0x76, 0xa1,
	0xf2, 0x19, 0xed, 0x08, 0xbc, 0x7b, 0x50, 0x15, 0x6d, 0xcc, 0xfc, 0x46, 0xe8, 0x31, 0x71, 0x50,
	0xa5, 0x2d, 0x56, 0xdd, 0x5b, 0x6f, 0x22, 0xe1, 0xad, 0x57, 0xc5, 0xbe, 0x13, 0x32, 0x2a, 0xa8,
	0x59, 0xd4, 0x91, 0x4e, 0x22, 0xd2, 0xa1, 0x2d, 0xe6, 0xe8, 0x48, 0xbb, 0xd0, 0xa2, 0xbc, 0x4b,
	0x79, 0xb5, 0xe9, 0x71, 0x14, 0xa7, 0xb7, 0x28, 0x26, 0x11, 0x80, 0xbd, 0xa2, 0xd7, 0xbb, 0x3c,
	0xa8, 0xee, 0xad, 0xcb, 0x1f, 0xbd, 0x90, 0x0f, 0x68, 0x40, 0xd5, 0xdf, 0xaa, 0xfc, 0xa7, 0xbd,
	0x2f, 0x8e, 0x53, 0x26, 0xb9, 0xa3, 0xd0, 0xd5, 0x08, 0xb9, 0x11, 0x61, 0x44, 0x46, 0xb4, 0x54,
	0xfe, 0xca, 0x80, 0xab, 0x75, 0x1e, 0x6c, 0x33, 0xe4, 0x09, 0x74, 0x0f, 0x21, 0xdf, 0x5c, 0x86,
	0x0c, 0x47, 0xc4, 0x47, 0xcc, 0x32, 0x4a, 0x46, 0x25, 0xeb, 0x6a, 0xcb, 0xdc, 0x86, 0x4c, 0x8b,
	0x92, 0x5d, 0x1c, 0x58, 0x57, 0x4a, 0x46, 0x65, 0x61, 0xe3, 0x65, 0x67, 0xcc, 0x03, 0x3b, 0x12,
	0x6e, 0x5b, 0xa5, 0xb8, 0x3a, 0x75, 0x73, 0xf1, 0xdb, 0xc3, 0x62, 0xea, 0xef, 0xc3, 0x62, 0xea,
	0xeb, 0xbf, 0x7e, 0x7a, 0x49, 0x23, 0x97, 0x57, 0x60, 0xe9, 0x8c, 0x04, 0x17, 0xf1, 0x90, 0x12,
	0x8e, 0xca, 0xbf, 0xa6, 0x95, 0xb8, 0x0f, 0x43, 0x7f, 0x9c, 0xb8, 0x15, 0x98, 0xdb, 0x45, 0xc8,
	0x6f, 0x60, 0x5f, 0xa9, 0xcb, 0xba, 0x19, 0x69, 0xde, 0xf7, 0x4d, 0x0b, 0xe6, 0x38, 0x0e, 0x08,
	0x62, 0xdc, 0x4a, 0x97, 0xd2, 0x95, 0xac, 0xdb, 0x37, 0xcd, 0x32, 0xe4, 0x04, 0xf3, 0x08, 0xef,
	0x62, 0x21, 0xe4, 0xf2, 0x8c, 0x5a, 0x3e, 0xe3, 0x33, 0x3f, 0x85, 0x7c, 0x07, 0x93, 0x87, 0x8d,
	0x10, 0xb1, 0x06, 0x6d, 0x72, 0xc4, 0xf6, 0x3c, 0x81, 0x29, 0xb1, 0x66, 0x25, 0x47, 0xcd, 0x39,
	0x3a, 0x2e, 0x1a, 0x7f, 0x1c, 0x17, 0x9f, 0x0f, 0xb0, 0x68, 0xf7, 0x9a, 0x4e, 0x8b, 0x76, 0x75,
	0x71, 0xf5, 0xcf, 0x1a, 0xf7, 0x1f, 0x56, 0xc5, 0x41, 0x88, 0xb8, 0x73, 0x9f, 0x08, 0xd7, 0x94,
	0x58, 0x3b, 0x88, 0xbd, 0x3f, 0x40, 0x32, 0x9b, 0xb0, 0x14, 0x33, 0x68, 0x6a, 0xce, 0x25, 0x45,
	0xe6, 0x52, 0x14, 0x8b, 0x9a, 0xe2, 0x83, 0x04, 0x94, 0x79, 0x03, 0x40, 0x71, 0xf8, 0x88, 0xd0,
	0xae, 0x35, 0xa7, 0xea, 0x93, 0x95, 0x9e, 0xbb, 0xd2, 0x21, 0x97, 0x55, 0xed, 0x3c, 0xbf, 0x8b,
	0x89, 0x35, 0x1f, 0x2d, 0x4b, 0xcf, 0x96, 0x74, 0x98, 0x37, 0xe1, 0x6a, 0x13, 0x77, 0x3a, 0x98,
	0x04, 0x3a, 0x22, 0xab, 0x22, 0x72, 0xda, 0xa9, 0x82, 0x9e, 0xd5, 0xd7, 0x41, 0xf7, 0xe2, 0xbe,
	0xfe, 0x7c, 0x05, 0x16, 0xea, 0x3c, 0xd0, 0x22, 0x85, 0x59, 0x82, 0x85, 0x44, 0xd9, 0x75, 0x6b,
	0x93, 0x2e, 0x29, 0x22, 0xda, 0x41, 0x0d, 0x1f, 0x07, 0x88, 0x0b, 0xd5, 0xe5, 0x9c, 0x9b, 0x8b,
	0x9c, 0x77, 0x95, 0x2f, 0xb9, 0x09, 0xd2, 0x67, 0x36, 0x41, 0x1e, 0x66, 0x51, 0x48, 0x5b, 0x6d,
	0x6b, 0xa6, 0x64, 0x54, 0x66, 0xdc, 0xc8, 0x90, 0x5e, 0x46, 0x7b, 0xc4, 0x57, 0xdd, 0x9c, 0x71,
	0x23, 0x43, 0x56, 0x03, 0xed, 0x0b, 0xe6, 0x35, 0xda, 0x1e, 0x6f, 0xab, 0x2e, 0xe4, 0xdc, 0xac,
	0xf2, 0xbc, 0xe7, 0xf1, 0xb6, 0xf9, 0x0e, 0x64, 0x18, 0x0a, 0x29, 0x13, 0xaa, 0x8e, 0x0b, 0x1b,
	0x2f, 0x8c, 0x3d, 0x05, 0xae, 0x0a, 0x77, 0x75, 0x9a, 0x59, 0x00, 0x90, 0x3b, 0xd0, 0x13, 0x3d,
	0x86, 0xb8, 0x35, 0x5f, 0x4a, 0x57, 0x72, 0x6e, 0xc2, 0xb3, 0x69, 0x25, 0x2b, 0x99, 0xac, 0x41,
	0x79, 0x09, 0x16, 0x13, 0x45, 0x8b, 0x8b, 0xf9, 0xbd, 0xa1, 0xca, 0x7c, 0xaf, 0x47, 0xfc, 0xa8,
	0xc8, 0x8f, 0x3c, 0xe6, 0xef, 0x50, 0xda, 0x99, 0xfe, 0xb0, 0xbc, 0x0e, 0x19, 0xaf, 0x4b, 0x7b,
	0x44, 0xa8, 0xfa, 0x2d, 0x6c, 0xac, 0x3a, 0x7a, 0x56, 0xc8, 0x91, 0x15, 0x3f, 0xd0, 0x36, 0xc5,
	0xa4, 0x36, 0x73, 0x74, 0x5c, 0x4c, 0xb9, 0x3a, 0x7c, 0x74, 0xfb, 0x8b, 0x70, 0x63, 0xa4, 0xae,
	0x58, 0xf9, 0x8f, 0x06, 0xac, 0xd6, 0x79, 0xf0, 0x11, 0x16, 0x6d, 0x9f, 0x79, 0x8f, 0xfe, 0x5b,
	0xea, 0x6f, 0xc2, 0x73, 0x17, 0x6a, 0x8b, 0x9f, 0xe0, 0x89, 0x01, 0xb9, 0x3a, 0x0f, 0x1e, 0x20,
	0xb1, 0xe3, 0x1d, 0x20, 0xc4, 0xa7, 0x17, 0x7d, 0x7e, 0x0a, 0xa5, 0x47, 0x4c, 0xa1, 0x65, 0xc8,
	0x84, 0x0a, 0x5e, 0xcf, 0x28, 0x6d, 0x8d, 0xd6, 0xbd, 0x0c, 0xf9, 0xa4, 0xa2, 0x64, 0xb1, 0xf3,
	0xfd, 0xed, 0xb3, 0x8b, 0x58, 0xb4, 0xda, 0xc6, 0xe1, 0x85, 0x92, 0xcf, 0x1d, 0xca, 0x2b, 0xc3,
	0x87, 0xf2, 0xc2, 0xf3, 0x66, 0xc3, 0x7c, 0xc8, 0x68, 0x48, 0x39, 0xf2, 0xd5, 0x91, 0xcb, 0xba,
	0xb1, 0x3d, 0x5a, 0x74, 0x01, 0xae, 0x8f, 0xd2, 0x16, 0x8b, 0xff, 0x12, 0xcc, 0x3a, 0x0f, 0xb6,
	0x5a, 0x2d, 0x14, 0x8a, 0x81, 0xf2, 0x3c, 0xcc, 0xaa, 0x4a, 0x68, 0xe1, 0x91, 0xf1, 0x2f, 0x74,
	0x3f, 0xe3, 0xec, 0x5d, 0x07, 0x7b, 0x58, 0x40, 0x2c, 0xef, 0xd0, 0x80, 0x6b, 0xf1, 0xa4, 0xdb,
	0xf1, 0x98, 0xd7, 0xe5, 0xe6, 0x1d, 0xc8, 0x7a, 0x3d, 0xd1, 0xa6, 0x0c, 0x8b, 0x83, 0x48, 0x60,
	0xcd, 0xfa, 0xed, 0x97, 0xb5, 0xbc, 0xde, 0x93, 0x5b, 0xbe, 0xcf, 0x10, 0xe7, 0x0f, 0x04, 0xc3,
	0x24, 0x70, 0x07, 0xa1, 0xe6, 0xbb, 0xb2, 0xd9, 0x12, 0x41, 0x5f, 0xb3, 0xe3, 0x07, 0x4c, 0x44,
	0xd8, 0xdf, 0xd3, 0x51, 0xf2, 0xe6, 0xff, 0xe4, 0x23, 0x0c, 0x60, 0xcb, 0xab, 0xb0, 0x72, 0x4e,
	0x61, 0x5f, 0xfd, 0xc6, 0xe3, 0x2c, 0xa4, 0xeb, 0x3c, 0x30, 0x05, 0x40, 0xe2, 0x35, 0xc0, 0x19,
	0xcb, 0x7b, 0xe6, 0xce, 0xb6, 0xef, 0x4c, 0x17, 0xdf, 0x67, 0x97, 0xac, 0x89, 0xfb, 0x7d, 0x22,
	0xd6, 0x41, 0xfc, 0x64, 0xac, 0xc3, 0x37, 0x90, 0x49, 0x60, 0x3e, 0xbe, 0x7d, 0x5e, 0x99, 0x04,
	0xa3, 0x1f, 0x6d, 0xbf, 0x36, 0x4d, 0x74, 0xcc, 0xf7, 0xd8, 0x00, 0x73, 0xc4, 0x84, 0x9e, 0x48,
	0xfe, 0x70, 0x9e, 0xfd, 0xf6, 0xe5, 0xf2, 0x62, 0x39, 0x3f, 0x18, 0xb0, 0x7c, 0xc1, 0xd8, 0xdd,
	0x9c, 0x04, 0x7a, 0x74, 0xae, 0x5d, 0xbb, 0x7c, 0x6e, 0x2c, 0xed, 0x73, 0xc8, 0x0e, 0xc6, 0xe9,
	0xda, 0x24, 0x80, 0x71, 0xb8, 0x7d, 0x7b, 0xaa, 0xf0, 0x98, 0xf2, 0x3b, 0x03, 0xfe, 0x3f, 0x3c,
	0x17, 0x6f, 0x4f, 0xdc, 0xe8, 0x64, 0x9a, 0xfd, 0xd6, 0xa5, 0xd2, 0x62, 0x2d, 0xdf, 0x18, 0x70,
	0xed, 0xfc, 0x9c, 0xbb, 0x35, 0x09, 0xe4, 0xb9, 0x24, 0xfb, 0xcd, 0x4b, 0x24, 0xc5, 0x2a, 0xbe,
	0x80, 0xdc, 0x99, 0x61, 0xf6, 0xea, 0xe4, 0xc7, 0x2c, 0xca, 0xb0, 0xdf, 0x98, 0x36, 0xa3, 0xcf,
	0x5d, 0xfb, 0xe4, 0xe8, 0xa4, 0x60, 0x3c, 0x3d, 0x29, 0x18, 0x7f, 0x9e, 0x14, 0x8c, 0x27, 0xa7,
	0x85, 0xd4, 0xd3, 0xd3, 0x42, 0xea, 0xf7, 0xd3, 0x42, 0xea, 0xe3, 0x5a, 0xe2, 0x25, 0x58, 0xa3,
	0xaf, 0xed, 0x62, 0xe2, 0x91, 0x16, 0xea, 0xdb, 0x8d, 0x0e, 0x22, 0x3e, 0x26, 0x41, 0x75, 0x7f,
	0xe8, 0xb3, 0x48, 0xbd, 0x24, 0x37, 0x33, 0xea, 0xb3, 0xe7, 0xd6, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xb3, 0xe6, 0x98, 0xc5, 0xd8, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateFeed defines a method for creating feed by module admin
	CreateFeed(ctx context.Context, in *MsgCreateFeed, opts ...grpc.CallOption) (*MsgCreateFeedResponse, error)
	// CreateFeed defines a method for creating feed by feed admin or feed billing
	// admin
	UpdateFeed(ctx context.Context, in *MsgUpdateFeed, opts ...grpc.CallOption) (*MsgUpdateFeedResponse, error)
	// Transmit defines a method for transmitting the feed info by transmitter
	Transmit(ctx context.Context, in *MsgTransmit, opts ...grpc.CallOption) (*MsgTransmitResponse, error)
	// FundFeedRewardPool defines a method to put funds into feed reward pool
	FundFeedRewardPool(ctx context.Context, in *MsgFundFeedRewardPool, opts ...grpc.CallOption) (*MsgFundFeedRewardPoolResponse, error)
	// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
	// admin or billing admin
	WithdrawFeedRewardPool(ctx context.Context, in *MsgWithdrawFeedRewardPool, opts ...grpc.CallOption) (*MsgWithdrawFeedRewardPoolResponse, error)
	// SetPayees defines a method to set payees for transmitters (batch action)
	SetPayees(ctx context.Context, in *MsgSetPayees, opts ...grpc.CallOption) (*MsgSetPayeesResponse, error)
	// TransferPayeeship defines a method for a payee to transfer reward receive
	// ownership
	TransferPayeeship(ctx context.Context, in *MsgTransferPayeeship, opts ...grpc.CallOption) (*MsgTransferPayeeshipResponse, error)
	// AcceptPayeeship defines a method for a new payee to accept reward receive
	// ownership
	AcceptPayeeship(ctx context.Context, in *MsgAcceptPayeeship, opts ...grpc.CallOption) (*MsgAcceptPayeeshipResponse, error)
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateFeed(ctx context.Context, in *MsgCreateFeed, opts ...grpc.CallOption) (*MsgCreateFeedResponse, error) {
	out := new(MsgCreateFeedResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/CreateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFeed(ctx context.Context, in *MsgUpdateFeed, opts ...grpc.CallOption) (*MsgUpdateFeedResponse, error) {
	out := new(MsgUpdateFeedResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/UpdateFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Transmit(ctx context.Context, in *MsgTransmit, opts ...grpc.CallOption) (*MsgTransmitResponse, error) {
	out := new(MsgTransmitResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/Transmit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FundFeedRewardPool(ctx context.Context, in *MsgFundFeedRewardPool, opts ...grpc.CallOption) (*MsgFundFeedRewardPoolResponse, error) {
	out := new(MsgFundFeedRewardPoolResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/FundFeedRewardPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawFeedRewardPool(ctx context.Context, in *MsgWithdrawFeedRewardPool, opts ...grpc.CallOption) (*MsgWithdrawFeedRewardPoolResponse, error) {
	out := new(MsgWithdrawFeedRewardPoolResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/WithdrawFeedRewardPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPayees(ctx context.Context, in *MsgSetPayees, opts ...grpc.CallOption) (*MsgSetPayeesResponse, error) {
	out := new(MsgSetPayeesResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/SetPayees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TransferPayeeship(ctx context.Context, in *MsgTransferPayeeship, opts ...grpc.CallOption) (*MsgTransferPayeeshipResponse, error) {
	out := new(MsgTransferPayeeshipResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/TransferPayeeship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AcceptPayeeship(ctx context.Context, in *MsgAcceptPayeeship, opts ...grpc.CallOption) (*MsgAcceptPayeeshipResponse, error) {
	out := new(MsgAcceptPayeeshipResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/AcceptPayeeship", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.ocr.v1beta1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateFeed defines a method for creating feed by module admin
	CreateFeed(context.Context, *MsgCreateFeed) (*MsgCreateFeedResponse, error)
	// CreateFeed defines a method for creating feed by feed admin or feed billing
	// admin
	UpdateFeed(context.Context, *MsgUpdateFeed) (*MsgUpdateFeedResponse, error)
	// Transmit defines a method for transmitting the feed info by transmitter
	Transmit(context.Context, *MsgTransmit) (*MsgTransmitResponse, error)
	// FundFeedRewardPool defines a method to put funds into feed reward pool
	FundFeedRewardPool(context.Context, *MsgFundFeedRewardPool) (*MsgFundFeedRewardPoolResponse, error)
	// WithdrawFeedRewardPool defines a method to witdhraw feed reward by feed
	// admin or billing admin
	WithdrawFeedRewardPool(context.Context, *MsgWithdrawFeedRewardPool) (*MsgWithdrawFeedRewardPoolResponse, error)
	// SetPayees defines a method to set payees for transmitters (batch action)
	SetPayees(context.Context, *MsgSetPayees) (*MsgSetPayeesResponse, error)
	// TransferPayeeship defines a method for a payee to transfer reward receive
	// ownership
	TransferPayeeship(context.Context, *MsgTransferPayeeship) (*MsgTransferPayeeshipResponse, error)
	// AcceptPayeeship defines a method for a new payee to accept reward receive
	// ownership
	AcceptPayeeship(context.Context, *MsgAcceptPayeeship) (*MsgAcceptPayeeshipResponse, error)
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateFeed(ctx context.Context, req *MsgCreateFeed) (*MsgCreateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeed not implemented")
}
func (*UnimplementedMsgServer) UpdateFeed(ctx context.Context, req *MsgUpdateFeed) (*MsgUpdateFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeed not implemented")
}
func (*UnimplementedMsgServer) Transmit(ctx context.Context, req *MsgTransmit) (*MsgTransmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transmit not implemented")
}
func (*UnimplementedMsgServer) FundFeedRewardPool(ctx context.Context, req *MsgFundFeedRewardPool) (*MsgFundFeedRewardPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FundFeedRewardPool not implemented")
}
func (*UnimplementedMsgServer) WithdrawFeedRewardPool(ctx context.Context, req *MsgWithdrawFeedRewardPool) (*MsgWithdrawFeedRewardPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawFeedRewardPool not implemented")
}
func (*UnimplementedMsgServer) SetPayees(ctx context.Context, req *MsgSetPayees) (*MsgSetPayeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayees not implemented")
}
func (*UnimplementedMsgServer) TransferPayeeship(ctx context.Context, req *MsgTransferPayeeship) (*MsgTransferPayeeshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferPayeeship not implemented")
}
func (*UnimplementedMsgServer) AcceptPayeeship(ctx context.Context, req *MsgAcceptPayeeship) (*MsgAcceptPayeeshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptPayeeship not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/CreateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateFeed(ctx, req.(*MsgCreateFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFeed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/UpdateFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFeed(ctx, req.(*MsgUpdateFeed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Transmit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransmit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Transmit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/Transmit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Transmit(ctx, req.(*MsgTransmit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FundFeedRewardPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFundFeedRewardPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FundFeedRewardPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/FundFeedRewardPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FundFeedRewardPool(ctx, req.(*MsgFundFeedRewardPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawFeedRewardPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawFeedRewardPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawFeedRewardPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/WithdrawFeedRewardPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawFeedRewardPool(ctx, req.(*MsgWithdrawFeedRewardPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPayees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPayees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPayees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/SetPayees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPayees(ctx, req.(*MsgSetPayees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TransferPayeeship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTransferPayeeship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TransferPayeeship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/TransferPayeeship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TransferPayeeship(ctx, req.(*MsgTransferPayeeship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AcceptPayeeship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptPayeeship)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptPayeeship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/AcceptPayeeship",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptPayeeship(ctx, req.(*MsgAcceptPayeeship))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.ocr.v1beta1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "joltify.third_party.ocr.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeed",
			Handler:    _Msg_CreateFeed_Handler,
		},
		{
			MethodName: "UpdateFeed",
			Handler:    _Msg_UpdateFeed_Handler,
		},
		{
			MethodName: "Transmit",
			Handler:    _Msg_Transmit_Handler,
		},
		{
			MethodName: "FundFeedRewardPool",
			Handler:    _Msg_FundFeedRewardPool_Handler,
		},
		{
			MethodName: "WithdrawFeedRewardPool",
			Handler:    _Msg_WithdrawFeedRewardPool_Handler,
		},
		{
			MethodName: "SetPayees",
			Handler:    _Msg_SetPayees_Handler,
		},
		{
			MethodName: "TransferPayeeship",
			Handler:    _Msg_TransferPayeeship_Handler,
		},
		{
			MethodName: "AcceptPayeeship",
			Handler:    _Msg_AcceptPayeeship_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "joltify/third_party/ocr/v1beta1/tx.proto",
}

func (m *MsgCreateFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateFeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateFeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateFeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BillingAdmin) > 0 {
		i -= len(m.BillingAdmin)
		copy(dAtA[i:], m.BillingAdmin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BillingAdmin)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FeedAdmin) > 0 {
		i -= len(m.FeedAdmin)
		copy(dAtA[i:], m.FeedAdmin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedAdmin)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.LinkDenom) > 0 {
		i -= len(m.LinkDenom)
		copy(dAtA[i:], m.LinkDenom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LinkDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LinkPerTransmission != nil {
		{
			size := m.LinkPerTransmission.Size()
			i -= size
			if _, err := m.LinkPerTransmission.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.LinkPerObservation != nil {
		{
			size := m.LinkPerObservation.Size()
			i -= size
			if _, err := m.LinkPerObservation.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Transmitters) > 0 {
		for iNdEx := len(m.Transmitters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transmitters[iNdEx])
			copy(dAtA[i:], m.Transmitters[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Transmitters[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransmit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Report != nil {
		{
			size, err := m.Report.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ExtraHash) > 0 {
		i -= len(m.ExtraHash)
		copy(dAtA[i:], m.ExtraHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ExtraHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Round != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x28
	}
	if m.Epoch != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x20
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConfigDigest) > 0 {
		i -= len(m.ConfigDigest)
		copy(dAtA[i:], m.ConfigDigest)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConfigDigest)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transmitter) > 0 {
		i -= len(m.Transmitter)
		copy(dAtA[i:], m.Transmitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transmitter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransmitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransmitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransmitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFundFeedRewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundFeedRewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundFeedRewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFundFeedRewardPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFundFeedRewardPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFundFeedRewardPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFeedRewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFeedRewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFeedRewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawFeedRewardPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawFeedRewardPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawFeedRewardPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPayees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPayees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPayees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Payees) > 0 {
		for iNdEx := len(m.Payees) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Payees[iNdEx])
			copy(dAtA[i:], m.Payees[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Payees[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Transmitters) > 0 {
		for iNdEx := len(m.Transmitters) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Transmitters[iNdEx])
			copy(dAtA[i:], m.Transmitters[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Transmitters[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPayeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPayeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPayeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTransferPayeeship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferPayeeship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferPayeeship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposed) > 0 {
		i -= len(m.Proposed)
		copy(dAtA[i:], m.Proposed)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposed)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Transmitter) > 0 {
		i -= len(m.Transmitter)
		copy(dAtA[i:], m.Transmitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transmitter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTransferPayeeshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTransferPayeeshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTransferPayeeshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptPayeeship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptPayeeship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptPayeeship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Transmitter) > 0 {
		i -= len(m.Transmitter)
		copy(dAtA[i:], m.Transmitter)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Transmitter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payee) > 0 {
		i -= len(m.Payee)
		copy(dAtA[i:], m.Payee)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Payee)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptPayeeshipResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptPayeeshipResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptPayeeshipResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateFeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateFeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Transmitters) > 0 {
		for _, s := range m.Transmitters {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.LinkPerObservation != nil {
		l = m.LinkPerObservation.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.LinkPerTransmission != nil {
		l = m.LinkPerTransmission.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LinkDenom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedAdmin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BillingAdmin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateFeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransmit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Transmitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConfigDigest)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Epoch != 0 {
		n += 1 + sovTx(uint64(m.Epoch))
	}
	if m.Round != 0 {
		n += 1 + sovTx(uint64(m.Round))
	}
	l = len(m.ExtraHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Report != nil {
		l = m.Report.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Signatures) > 0 {
		for _, b := range m.Signatures {
			l = len(b)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgTransmitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFundFeedRewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgFundFeedRewardPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawFeedRewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgWithdrawFeedRewardPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPayees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Transmitters) > 0 {
		for _, s := range m.Transmitters {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if len(m.Payees) > 0 {
		for _, s := range m.Payees {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetPayeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTransferPayeeship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Transmitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Proposed)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTransferPayeeshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptPayeeship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payee)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Transmitter)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptPayeeshipResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &FeedConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateFeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateFeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateFeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transmitters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transmitters = append(m.Transmitters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkPerObservation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.LinkPerObservation = &v
			if err := m.LinkPerObservation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkPerTransmission", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.LinkPerTransmission = &v
			if err := m.LinkPerTransmission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingAdmin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BillingAdmin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transmitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transmitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigDigest", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConfigDigest = append(m.ConfigDigest[:0], dAtA[iNdEx:postIndex]...)
			if m.ConfigDigest == nil {
				m.ConfigDigest = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraHash = append(m.ExtraHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraHash == nil {
				m.ExtraHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Report", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Report == nil {
				m.Report = &Report{}
			}
			if err := m.Report.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, make([]byte, postIndex-iNdEx))
			copy(m.Signatures[len(m.Signatures)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransmitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransmitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransmitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundFeedRewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundFeedRewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundFeedRewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFundFeedRewardPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFundFeedRewardPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFundFeedRewardPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFeedRewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFeedRewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFeedRewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawFeedRewardPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawFeedRewardPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawFeedRewardPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPayees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPayees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPayees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transmitters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transmitters = append(m.Transmitters, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payees = append(m.Payees, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPayeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPayeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPayeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferPayeeship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferPayeeship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferPayeeship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transmitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transmitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTransferPayeeshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTransferPayeeshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTransferPayeeshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptPayeeship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptPayeeship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptPayeeship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transmitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transmitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptPayeeshipResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptPayeeshipResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptPayeeshipResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
