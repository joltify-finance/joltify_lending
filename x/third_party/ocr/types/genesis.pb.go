// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/ocr/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the OCR module's genesis state.
type GenesisState struct {
	// params defines all the parameters of related to OCR.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// feed_configs stores all of the supported OCR feeds
	FeedConfigs []*FeedConfig `protobuf:"bytes,2,rep,name=feed_configs,json=feedConfigs,proto3" json:"feed_configs,omitempty"`
	// latest_epoch_and_rounds stores the latest epoch and round for each feedId
	LatestEpochAndRounds []*FeedEpochAndRound `protobuf:"bytes,3,rep,name=latest_epoch_and_rounds,json=latestEpochAndRounds,proto3" json:"latest_epoch_and_rounds,omitempty"`
	// feed_transmissions stores the last transmission for each feed
	FeedTransmissions []*FeedTransmission `protobuf:"bytes,4,rep,name=feed_transmissions,json=feedTransmissions,proto3" json:"feed_transmissions,omitempty"`
	// latest_aggregator_round_ids stores the latest aggregator round ID for each
	// feedId
	LatestAggregatorRoundIds []*FeedLatestAggregatorRoundIDs `protobuf:"bytes,5,rep,name=latest_aggregator_round_ids,json=latestAggregatorRoundIds,proto3" json:"latest_aggregator_round_ids,omitempty"`
	// reward_pools stores the reward pools
	RewardPools []*RewardPool `protobuf:"bytes,6,rep,name=reward_pools,json=rewardPools,proto3" json:"reward_pools,omitempty"`
	// feed_observation_counts stores the feed observation counts
	FeedObservationCounts []*FeedCounts `protobuf:"bytes,7,rep,name=feed_observation_counts,json=feedObservationCounts,proto3" json:"feed_observation_counts,omitempty"`
	// feed_transmission_counts stores the feed transmission counts
	FeedTransmissionCounts []*FeedCounts `protobuf:"bytes,8,rep,name=feed_transmission_counts,json=feedTransmissionCounts,proto3" json:"feed_transmission_counts,omitempty"`
	// pending_payeeships stores the pending payeeships
	PendingPayeeships []*PendingPayeeship `protobuf:"bytes,9,rep,name=pending_payeeships,json=pendingPayeeships,proto3" json:"pending_payeeships,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_c169be3f3cd87f10, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetFeedConfigs() []*FeedConfig {
	if m != nil {
		return m.FeedConfigs
	}
	return nil
}

func (m *GenesisState) GetLatestEpochAndRounds() []*FeedEpochAndRound {
	if m != nil {
		return m.LatestEpochAndRounds
	}
	return nil
}

func (m *GenesisState) GetFeedTransmissions() []*FeedTransmission {
	if m != nil {
		return m.FeedTransmissions
	}
	return nil
}

func (m *GenesisState) GetLatestAggregatorRoundIds() []*FeedLatestAggregatorRoundIDs {
	if m != nil {
		return m.LatestAggregatorRoundIds
	}
	return nil
}

func (m *GenesisState) GetRewardPools() []*RewardPool {
	if m != nil {
		return m.RewardPools
	}
	return nil
}

func (m *GenesisState) GetFeedObservationCounts() []*FeedCounts {
	if m != nil {
		return m.FeedObservationCounts
	}
	return nil
}

func (m *GenesisState) GetFeedTransmissionCounts() []*FeedCounts {
	if m != nil {
		return m.FeedTransmissionCounts
	}
	return nil
}

func (m *GenesisState) GetPendingPayeeships() []*PendingPayeeship {
	if m != nil {
		return m.PendingPayeeships
	}
	return nil
}

type FeedTransmission struct {
	FeedId       string        `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Transmission *Transmission `protobuf:"bytes,2,opt,name=transmission,proto3" json:"transmission,omitempty"`
}

func (m *FeedTransmission) Reset()         { *m = FeedTransmission{} }
func (m *FeedTransmission) String() string { return proto.CompactTextString(m) }
func (*FeedTransmission) ProtoMessage()    {}
func (*FeedTransmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_c169be3f3cd87f10, []int{1}
}
func (m *FeedTransmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedTransmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedTransmission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedTransmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedTransmission.Merge(m, src)
}
func (m *FeedTransmission) XXX_Size() int {
	return m.Size()
}
func (m *FeedTransmission) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedTransmission.DiscardUnknown(m)
}

var xxx_messageInfo_FeedTransmission proto.InternalMessageInfo

func (m *FeedTransmission) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *FeedTransmission) GetTransmission() *Transmission {
	if m != nil {
		return m.Transmission
	}
	return nil
}

type FeedEpochAndRound struct {
	FeedId        string         `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	EpochAndRound *EpochAndRound `protobuf:"bytes,2,opt,name=epoch_and_round,json=epochAndRound,proto3" json:"epoch_and_round,omitempty"`
}

func (m *FeedEpochAndRound) Reset()         { *m = FeedEpochAndRound{} }
func (m *FeedEpochAndRound) String() string { return proto.CompactTextString(m) }
func (*FeedEpochAndRound) ProtoMessage()    {}
func (*FeedEpochAndRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_c169be3f3cd87f10, []int{2}
}
func (m *FeedEpochAndRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedEpochAndRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedEpochAndRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedEpochAndRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedEpochAndRound.Merge(m, src)
}
func (m *FeedEpochAndRound) XXX_Size() int {
	return m.Size()
}
func (m *FeedEpochAndRound) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedEpochAndRound.DiscardUnknown(m)
}

var xxx_messageInfo_FeedEpochAndRound proto.InternalMessageInfo

func (m *FeedEpochAndRound) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *FeedEpochAndRound) GetEpochAndRound() *EpochAndRound {
	if m != nil {
		return m.EpochAndRound
	}
	return nil
}

type FeedLatestAggregatorRoundIDs struct {
	FeedId            string `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	AggregatorRoundId uint64 `protobuf:"varint,2,opt,name=aggregator_round_id,json=aggregatorRoundId,proto3" json:"aggregator_round_id,omitempty"`
}

func (m *FeedLatestAggregatorRoundIDs) Reset()         { *m = FeedLatestAggregatorRoundIDs{} }
func (m *FeedLatestAggregatorRoundIDs) String() string { return proto.CompactTextString(m) }
func (*FeedLatestAggregatorRoundIDs) ProtoMessage()    {}
func (*FeedLatestAggregatorRoundIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_c169be3f3cd87f10, []int{3}
}
func (m *FeedLatestAggregatorRoundIDs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedLatestAggregatorRoundIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedLatestAggregatorRoundIDs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedLatestAggregatorRoundIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedLatestAggregatorRoundIDs.Merge(m, src)
}
func (m *FeedLatestAggregatorRoundIDs) XXX_Size() int {
	return m.Size()
}
func (m *FeedLatestAggregatorRoundIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedLatestAggregatorRoundIDs.DiscardUnknown(m)
}

var xxx_messageInfo_FeedLatestAggregatorRoundIDs proto.InternalMessageInfo

func (m *FeedLatestAggregatorRoundIDs) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *FeedLatestAggregatorRoundIDs) GetAggregatorRoundId() uint64 {
	if m != nil {
		return m.AggregatorRoundId
	}
	return 0
}

type RewardPool struct {
	FeedId string     `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *RewardPool) Reset()         { *m = RewardPool{} }
func (m *RewardPool) String() string { return proto.CompactTextString(m) }
func (*RewardPool) ProtoMessage()    {}
func (*RewardPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_c169be3f3cd87f10, []int{4}
}
func (m *RewardPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPool.Merge(m, src)
}
func (m *RewardPool) XXX_Size() int {
	return m.Size()
}
func (m *RewardPool) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPool.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPool proto.InternalMessageInfo

func (m *RewardPool) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *RewardPool) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

type FeedCounts struct {
	FeedId string   `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Counts []*Count `protobuf:"bytes,2,rep,name=counts,proto3" json:"counts,omitempty"`
}

func (m *FeedCounts) Reset()         { *m = FeedCounts{} }
func (m *FeedCounts) String() string { return proto.CompactTextString(m) }
func (*FeedCounts) ProtoMessage()    {}
func (*FeedCounts) Descriptor() ([]byte, []int) {
	return fileDescriptor_c169be3f3cd87f10, []int{5}
}
func (m *FeedCounts) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeedCounts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeedCounts.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeedCounts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeedCounts.Merge(m, src)
}
func (m *FeedCounts) XXX_Size() int {
	return m.Size()
}
func (m *FeedCounts) XXX_DiscardUnknown() {
	xxx_messageInfo_FeedCounts.DiscardUnknown(m)
}

var xxx_messageInfo_FeedCounts proto.InternalMessageInfo

func (m *FeedCounts) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *FeedCounts) GetCounts() []*Count {
	if m != nil {
		return m.Counts
	}
	return nil
}

type Count struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Count   uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Count) Reset()         { *m = Count{} }
func (m *Count) String() string { return proto.CompactTextString(m) }
func (*Count) ProtoMessage()    {}
func (*Count) Descriptor() ([]byte, []int) {
	return fileDescriptor_c169be3f3cd87f10, []int{6}
}
func (m *Count) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Count) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Count.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Count) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Count.Merge(m, src)
}
func (m *Count) XXX_Size() int {
	return m.Size()
}
func (m *Count) XXX_DiscardUnknown() {
	xxx_messageInfo_Count.DiscardUnknown(m)
}

var xxx_messageInfo_Count proto.InternalMessageInfo

func (m *Count) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Count) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type PendingPayeeship struct {
	FeedId        string `protobuf:"bytes,1,opt,name=feed_id,json=feedId,proto3" json:"feed_id,omitempty"`
	Transmitter   string `protobuf:"bytes,2,opt,name=transmitter,proto3" json:"transmitter,omitempty"`
	ProposedPayee string `protobuf:"bytes,3,opt,name=proposed_payee,json=proposedPayee,proto3" json:"proposed_payee,omitempty"`
}

func (m *PendingPayeeship) Reset()         { *m = PendingPayeeship{} }
func (m *PendingPayeeship) String() string { return proto.CompactTextString(m) }
func (*PendingPayeeship) ProtoMessage()    {}
func (*PendingPayeeship) Descriptor() ([]byte, []int) {
	return fileDescriptor_c169be3f3cd87f10, []int{7}
}
func (m *PendingPayeeship) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingPayeeship) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingPayeeship.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingPayeeship) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingPayeeship.Merge(m, src)
}
func (m *PendingPayeeship) XXX_Size() int {
	return m.Size()
}
func (m *PendingPayeeship) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingPayeeship.DiscardUnknown(m)
}

var xxx_messageInfo_PendingPayeeship proto.InternalMessageInfo

func (m *PendingPayeeship) GetFeedId() string {
	if m != nil {
		return m.FeedId
	}
	return ""
}

func (m *PendingPayeeship) GetTransmitter() string {
	if m != nil {
		return m.Transmitter
	}
	return ""
}

func (m *PendingPayeeship) GetProposedPayee() string {
	if m != nil {
		return m.ProposedPayee
	}
	return ""
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "joltify.third_party.ocr.v1beta1.GenesisState")
	proto.RegisterType((*FeedTransmission)(nil), "joltify.third_party.ocr.v1beta1.FeedTransmission")
	proto.RegisterType((*FeedEpochAndRound)(nil), "joltify.third_party.ocr.v1beta1.FeedEpochAndRound")
	proto.RegisterType((*FeedLatestAggregatorRoundIDs)(nil), "joltify.third_party.ocr.v1beta1.FeedLatestAggregatorRoundIDs")
	proto.RegisterType((*RewardPool)(nil), "joltify.third_party.ocr.v1beta1.RewardPool")
	proto.RegisterType((*FeedCounts)(nil), "joltify.third_party.ocr.v1beta1.FeedCounts")
	proto.RegisterType((*Count)(nil), "joltify.third_party.ocr.v1beta1.Count")
	proto.RegisterType((*PendingPayeeship)(nil), "joltify.third_party.ocr.v1beta1.PendingPayeeship")
}

func init() {
	proto.RegisterFile("joltify/third_party/ocr/v1beta1/genesis.proto", fileDescriptor_c169be3f3cd87f10)
}

var fileDescriptor_c169be3f3cd87f10 = []byte{
	// 725 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xc1, 0x4e, 0x1b, 0x49,
	0x10, 0xb5, 0xc1, 0x98, 0xa5, 0x0c, 0xbb, 0xb8, 0x97, 0x5d, 0x66, 0xd9, 0x95, 0x41, 0x23, 0xed,
	0x2e, 0xab, 0x15, 0x33, 0x82, 0x1c, 0x38, 0x25, 0x12, 0x10, 0x12, 0x21, 0x45, 0x89, 0xd3, 0x89,
	0x72, 0x88, 0xa2, 0x0c, 0xed, 0x99, 0xf6, 0xb8, 0x23, 0xbb, 0x7b, 0xd4, 0xd5, 0x90, 0x58, 0x8a,
	0x72, 0xca, 0x07, 0xe4, 0xb3, 0x38, 0x72, 0xcc, 0x29, 0x8a, 0xe0, 0x9e, 0x6f, 0x88, 0xa6, 0x67,
	0x6c, 0x6c, 0x83, 0x63, 0x73, 0xeb, 0xaa, 0xa9, 0xf7, 0xea, 0x55, 0x57, 0x55, 0x0f, 0x6c, 0xbd,
	0x51, 0x6d, 0x23, 0x9a, 0x5d, 0xdf, 0xb4, 0x84, 0x8e, 0x82, 0x84, 0x69, 0xd3, 0xf5, 0x55, 0xa8,
	0xfd, 0xd3, 0xed, 0x06, 0x37, 0x6c, 0xdb, 0x8f, 0xb9, 0xe4, 0x28, 0xd0, 0x4b, 0xb4, 0x32, 0x8a,
	0xac, 0xe7, 0xe1, 0xde, 0x40, 0xb8, 0xa7, 0x42, 0xed, 0xe5, 0xe1, 0x6b, 0xff, 0x4d, 0xe2, 0x4b,
	0x83, 0x2d, 0xd7, 0xda, 0x4a, 0xac, 0x62, 0x65, 0x8f, 0x7e, 0x7a, 0xca, 0xbd, 0xb5, 0x50, 0x61,
	0x47, 0xa1, 0xdf, 0x60, 0xc8, 0xfb, 0xa0, 0x50, 0x09, 0x99, 0x7d, 0x77, 0xbf, 0x95, 0x61, 0xf1,
	0x61, 0xa6, 0xe9, 0x99, 0x61, 0x86, 0x93, 0x43, 0x28, 0x27, 0x4c, 0xb3, 0x0e, 0x3a, 0xc5, 0x8d,
	0xe2, 0x66, 0x65, 0xe7, 0x5f, 0x6f, 0x82, 0x46, 0xaf, 0x6e, 0xc3, 0xf7, 0x4b, 0x67, 0x5f, 0xd6,
	0x0b, 0x34, 0x07, 0x93, 0xc7, 0xb0, 0xd8, 0xe4, 0x3c, 0x0a, 0x42, 0x25, 0x9b, 0x22, 0x46, 0x67,
	0x66, 0x63, 0x76, 0xb3, 0xb2, 0xf3, 0xff, 0x44, 0xb2, 0x07, 0x9c, 0x47, 0x07, 0x16, 0x43, 0x2b,
	0xcd, 0xfe, 0x19, 0x89, 0x80, 0xd5, 0x36, 0x33, 0x1c, 0x4d, 0xc0, 0x13, 0x15, 0xb6, 0x02, 0x26,
	0xa3, 0x40, 0xab, 0x13, 0x19, 0xa1, 0x33, 0x6b, 0xa9, 0x77, 0xa6, 0xa2, 0x3e, 0x4c, 0xc1, 0x7b,
	0x32, 0xa2, 0x29, 0x94, 0xae, 0x64, 0x94, 0x43, 0x4e, 0x24, 0xc7, 0x40, 0xac, 0x74, 0xa3, 0x99,
	0xc4, 0x8e, 0x40, 0x14, 0x4a, 0xa2, 0x53, 0xb2, 0x59, 0xb6, 0xa7, 0xca, 0xf2, 0x7c, 0x00, 0x49,
	0xab, 0xcd, 0x11, 0x0f, 0x92, 0xf7, 0xf0, 0x67, 0x5e, 0x0c, 0x8b, 0x63, 0xcd, 0x63, 0x66, 0x94,
	0xce, 0xaa, 0x09, 0x44, 0x84, 0xce, 0x9c, 0x4d, 0x75, 0x77, 0xaa, 0x54, 0x8f, 0x2c, 0xcf, 0x5e,
	0x9f, 0xc6, 0xd6, 0x70, 0x74, 0x1f, 0xa9, 0xd3, 0xbe, 0xf1, 0x4b, 0x64, 0x5b, 0xa3, 0xf9, 0x5b,
	0x96, 0x52, 0x2a, 0xd5, 0x46, 0xa7, 0x3c, 0x65, 0x6b, 0xa8, 0x05, 0xd5, 0x95, 0x6a, 0xd3, 0x8a,
	0xee, 0x9f, 0x91, 0x84, 0xb0, 0x6a, 0xef, 0x4b, 0x35, 0x90, 0xeb, 0x53, 0x66, 0x84, 0x92, 0x41,
	0xa8, 0x4e, 0xa4, 0x41, 0x67, 0xfe, 0x56, 0x5d, 0x4f, 0x21, 0xf4, 0xb7, 0x94, 0xeb, 0xc9, 0x15,
	0x55, 0xe6, 0x26, 0x1c, 0x9c, 0x6b, 0x4d, 0xe9, 0x65, 0xf9, 0xe9, 0xf6, 0x59, 0x7e, 0x1f, 0x6d,
	0x4a, 0x9e, 0xe6, 0x18, 0x48, 0xc2, 0x65, 0x24, 0x64, 0x1c, 0x24, 0xac, 0xcb, 0x39, 0xb6, 0x44,
	0x82, 0xce, 0xc2, 0x94, 0xbd, 0xaf, 0x67, 0xd0, 0x7a, 0x0f, 0x49, 0xab, 0xc9, 0x88, 0x07, 0xdd,
	0x0f, 0xb0, 0x3c, 0x3a, 0x22, 0x64, 0x15, 0xe6, 0x6d, 0x71, 0x22, 0xb2, 0x4b, 0xb7, 0x40, 0xcb,
	0xa9, 0x79, 0x14, 0x91, 0xa7, 0xb0, 0x38, 0x58, 0xb0, 0x33, 0x63, 0x57, 0x72, 0x6b, 0xa2, 0x90,
	0xa1, 0x01, 0x1c, 0xa2, 0x70, 0x3f, 0x16, 0xa1, 0x7a, 0x6d, 0x13, 0xc6, 0x2b, 0x78, 0x01, 0xbf,
	0x8c, 0x2c, 0x5c, 0x2e, 0xc2, 0x9b, 0x28, 0x62, 0x78, 0xd7, 0x96, 0xf8, 0xa0, 0xe9, 0xc6, 0xf0,
	0xd7, 0x8f, 0xc6, 0x77, 0xbc, 0x20, 0x0f, 0x7e, 0xbd, 0x61, 0x69, 0xac, 0xa8, 0x12, 0xad, 0xb2,
	0xd1, 0x71, 0x77, 0x5f, 0x03, 0x5c, 0x0d, 0xee, 0x78, 0xda, 0x5d, 0x28, 0xb3, 0x4e, 0x3a, 0x03,
	0x79, 0x79, 0x7f, 0x78, 0xd9, 0xc3, 0xe9, 0xa5, 0x0f, 0x67, 0xbf, 0xa4, 0x03, 0x25, 0x64, 0xef,
	0xa1, 0xcb, 0xc2, 0x5d, 0x0e, 0x70, 0x35, 0x57, 0xe3, 0xf9, 0xef, 0x41, 0x39, 0x9f, 0xd6, 0xec,
	0x25, 0xfc, 0x67, 0xe2, 0xf5, 0x59, 0x46, 0x9a, 0xa3, 0xdc, 0x5d, 0x98, 0xb3, 0x0e, 0xe2, 0xc0,
	0x3c, 0x8b, 0x22, 0xcd, 0x11, 0xf3, 0x0c, 0x3d, 0x93, 0xac, 0xc0, 0x5c, 0xd8, 0xaf, 0xa0, 0x44,
	0x33, 0xc3, 0x35, 0xb0, 0x3c, 0x3a, 0x96, 0xe3, 0x55, 0x6e, 0x40, 0x25, 0x1f, 0x16, 0x63, 0xb8,
	0xb6, 0x44, 0x0b, 0x74, 0xd0, 0x45, 0xfe, 0x86, 0x9f, 0x13, 0xad, 0x12, 0x85, 0x3c, 0xca, 0x36,
	0xc4, 0x99, 0xb5, 0x41, 0x4b, 0x3d, 0xaf, 0xcd, 0xb2, 0xff, 0xea, 0xec, 0xa2, 0x56, 0x3c, 0xbf,
	0xa8, 0x15, 0xbf, 0x5e, 0xd4, 0x8a, 0x9f, 0x2e, 0x6b, 0x85, 0xf3, 0xcb, 0x5a, 0xe1, 0xf3, 0x65,
	0xad, 0xf0, 0x72, 0x3f, 0x16, 0xa6, 0x75, 0xd2, 0xf0, 0x42, 0xd5, 0xf1, 0xf3, 0x2b, 0xd8, 0x6a,
	0x0a, 0xc9, 0x64, 0xc8, 0x7b, 0x76, 0xd0, 0xce, 0x04, 0xfb, 0xef, 0xae, 0xfd, 0xf6, 0x4c, 0x37,
	0xe1, 0xd8, 0x28, 0xdb, 0x7f, 0xd7, 0x9d, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0x49, 0xb1, 0x8e,
	0x3b, 0x6e, 0x07, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingPayeeships) > 0 {
		for iNdEx := len(m.PendingPayeeships) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingPayeeships[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.FeedTransmissionCounts) > 0 {
		for iNdEx := len(m.FeedTransmissionCounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeedTransmissionCounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.FeedObservationCounts) > 0 {
		for iNdEx := len(m.FeedObservationCounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeedObservationCounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.RewardPools) > 0 {
		for iNdEx := len(m.RewardPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.LatestAggregatorRoundIds) > 0 {
		for iNdEx := len(m.LatestAggregatorRoundIds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatestAggregatorRoundIds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FeedTransmissions) > 0 {
		for iNdEx := len(m.FeedTransmissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeedTransmissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LatestEpochAndRounds) > 0 {
		for iNdEx := len(m.LatestEpochAndRounds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LatestEpochAndRounds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FeedConfigs) > 0 {
		for iNdEx := len(m.FeedConfigs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeedConfigs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *FeedTransmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedTransmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedTransmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Transmission != nil {
		{
			size, err := m.Transmission.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedEpochAndRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedEpochAndRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedEpochAndRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochAndRound != nil {
		{
			size, err := m.EpochAndRound.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedLatestAggregatorRoundIDs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedLatestAggregatorRoundIDs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedLatestAggregatorRoundIDs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AggregatorRoundId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.AggregatorRoundId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeedCounts) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeedCounts) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeedCounts) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Counts) > 0 {
		for iNdEx := len(m.Counts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Counts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Count) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Count) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Count) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PendingPayeeship) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingPayeeship) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingPayeeship) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProposedPayee) > 0 {
		i -= len(m.ProposedPayee)
		copy(dAtA[i:], m.ProposedPayee)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.ProposedPayee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Transmitter) > 0 {
		i -= len(m.Transmitter)
		copy(dAtA[i:], m.Transmitter)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Transmitter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FeedId) > 0 {
		i -= len(m.FeedId)
		copy(dAtA[i:], m.FeedId)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.FeedId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.FeedConfigs) > 0 {
		for _, e := range m.FeedConfigs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LatestEpochAndRounds) > 0 {
		for _, e := range m.LatestEpochAndRounds {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FeedTransmissions) > 0 {
		for _, e := range m.FeedTransmissions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LatestAggregatorRoundIds) > 0 {
		for _, e := range m.LatestAggregatorRoundIds {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RewardPools) > 0 {
		for _, e := range m.RewardPools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FeedObservationCounts) > 0 {
		for _, e := range m.FeedObservationCounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.FeedTransmissionCounts) > 0 {
		for _, e := range m.FeedTransmissionCounts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PendingPayeeships) > 0 {
		for _, e := range m.PendingPayeeships {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *FeedTransmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Transmission != nil {
		l = m.Transmission.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *FeedEpochAndRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.EpochAndRound != nil {
		l = m.EpochAndRound.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *FeedLatestAggregatorRoundIDs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.AggregatorRoundId != 0 {
		n += 1 + sovGenesis(uint64(m.AggregatorRoundId))
	}
	return n
}

func (m *RewardPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *FeedCounts) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Counts) > 0 {
		for _, e := range m.Counts {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *Count) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.Count != 0 {
		n += 1 + sovGenesis(uint64(m.Count))
	}
	return n
}

func (m *PendingPayeeship) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FeedId)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Transmitter)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.ProposedPayee)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedConfigs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedConfigs = append(m.FeedConfigs, &FeedConfig{})
			if err := m.FeedConfigs[len(m.FeedConfigs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestEpochAndRounds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestEpochAndRounds = append(m.LatestEpochAndRounds, &FeedEpochAndRound{})
			if err := m.LatestEpochAndRounds[len(m.LatestEpochAndRounds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedTransmissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedTransmissions = append(m.FeedTransmissions, &FeedTransmission{})
			if err := m.FeedTransmissions[len(m.FeedTransmissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestAggregatorRoundIds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestAggregatorRoundIds = append(m.LatestAggregatorRoundIds, &FeedLatestAggregatorRoundIDs{})
			if err := m.LatestAggregatorRoundIds[len(m.LatestAggregatorRoundIds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPools = append(m.RewardPools, &RewardPool{})
			if err := m.RewardPools[len(m.RewardPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedObservationCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedObservationCounts = append(m.FeedObservationCounts, &FeedCounts{})
			if err := m.FeedObservationCounts[len(m.FeedObservationCounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedTransmissionCounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedTransmissionCounts = append(m.FeedTransmissionCounts, &FeedCounts{})
			if err := m.FeedTransmissionCounts[len(m.FeedTransmissionCounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingPayeeships", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingPayeeships = append(m.PendingPayeeships, &PendingPayeeship{})
			if err := m.PendingPayeeships[len(m.PendingPayeeships)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedTransmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedTransmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedTransmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transmission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transmission == nil {
				m.Transmission = &Transmission{}
			}
			if err := m.Transmission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedEpochAndRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedEpochAndRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedEpochAndRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochAndRound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochAndRound == nil {
				m.EpochAndRound = &EpochAndRound{}
			}
			if err := m.EpochAndRound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedLatestAggregatorRoundIDs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedLatestAggregatorRoundIDs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedLatestAggregatorRoundIDs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregatorRoundId", wireType)
			}
			m.AggregatorRoundId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AggregatorRoundId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeedCounts) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeedCounts: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeedCounts: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Counts = append(m.Counts, &Count{})
			if err := m.Counts[len(m.Counts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Count) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Count: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Count: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingPayeeship) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingPayeeship: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingPayeeship: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transmitter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transmitter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedPayee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedPayee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
