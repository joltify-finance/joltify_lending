// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/incentive/v1beta1/params.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RewardPeriod stores the state of an ongoing reward
type RewardPeriod struct {
	Active           bool       `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	CollateralType   string     `protobuf:"bytes,2,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty"`
	Start            time.Time  `protobuf:"bytes,3,opt,name=start,proto3,stdtime" json:"start"`
	End              time.Time  `protobuf:"bytes,4,opt,name=end,proto3,stdtime" json:"end"`
	RewardsPerSecond types.Coin `protobuf:"bytes,5,opt,name=rewards_per_second,json=rewardsPerSecond,proto3" json:"rewards_per_second"`
}

func (m *RewardPeriod) Reset()         { *m = RewardPeriod{} }
func (m *RewardPeriod) String() string { return proto.CompactTextString(m) }
func (*RewardPeriod) ProtoMessage()    {}
func (*RewardPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_762589dba89ba581, []int{0}
}
func (m *RewardPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardPeriod.Merge(m, src)
}
func (m *RewardPeriod) XXX_Size() int {
	return m.Size()
}
func (m *RewardPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_RewardPeriod proto.InternalMessageInfo

// MultiRewardPeriod supports multiple reward types
type MultiRewardPeriod struct {
	Active           bool                                     `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	CollateralType   string                                   `protobuf:"bytes,2,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty"`
	Start            time.Time                                `protobuf:"bytes,3,opt,name=start,proto3,stdtime" json:"start"`
	End              time.Time                                `protobuf:"bytes,4,opt,name=end,proto3,stdtime" json:"end"`
	RewardsPerSecond github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,5,rep,name=rewards_per_second,json=rewardsPerSecond,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"rewards_per_second"`
}

func (m *MultiRewardPeriod) Reset()         { *m = MultiRewardPeriod{} }
func (m *MultiRewardPeriod) String() string { return proto.CompactTextString(m) }
func (*MultiRewardPeriod) ProtoMessage()    {}
func (*MultiRewardPeriod) Descriptor() ([]byte, []int) {
	return fileDescriptor_762589dba89ba581, []int{1}
}
func (m *MultiRewardPeriod) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiRewardPeriod) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiRewardPeriod.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiRewardPeriod) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiRewardPeriod.Merge(m, src)
}
func (m *MultiRewardPeriod) XXX_Size() int {
	return m.Size()
}
func (m *MultiRewardPeriod) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiRewardPeriod.DiscardUnknown(m)
}

var xxx_messageInfo_MultiRewardPeriod proto.InternalMessageInfo

// Multiplier amount the claim rewards get increased by, along with how long the claim rewards are locked
type Multiplier struct {
	Name         string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MonthsLockup int64                       `protobuf:"varint,2,opt,name=months_lockup,json=monthsLockup,proto3" json:"months_lockup,omitempty"`
	Factor       cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=factor,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"factor"`
}

func (m *Multiplier) Reset()         { *m = Multiplier{} }
func (m *Multiplier) String() string { return proto.CompactTextString(m) }
func (*Multiplier) ProtoMessage()    {}
func (*Multiplier) Descriptor() ([]byte, []int) {
	return fileDescriptor_762589dba89ba581, []int{2}
}
func (m *Multiplier) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Multiplier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Multiplier.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Multiplier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Multiplier.Merge(m, src)
}
func (m *Multiplier) XXX_Size() int {
	return m.Size()
}
func (m *Multiplier) XXX_DiscardUnknown() {
	xxx_messageInfo_Multiplier.DiscardUnknown(m)
}

var xxx_messageInfo_Multiplier proto.InternalMessageInfo

// MultipliersPerDenom is a map of denoms to a set of multipliers
type MultipliersPerDenom struct {
	Denom       string      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Multipliers Multipliers `protobuf:"bytes,2,rep,name=multipliers,proto3,castrepeated=Multipliers" json:"multipliers"`
}

func (m *MultipliersPerDenom) Reset()         { *m = MultipliersPerDenom{} }
func (m *MultipliersPerDenom) String() string { return proto.CompactTextString(m) }
func (*MultipliersPerDenom) ProtoMessage()    {}
func (*MultipliersPerDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_762589dba89ba581, []int{3}
}
func (m *MultipliersPerDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultipliersPerDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultipliersPerDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultipliersPerDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultipliersPerDenom.Merge(m, src)
}
func (m *MultipliersPerDenom) XXX_Size() int {
	return m.Size()
}
func (m *MultipliersPerDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_MultipliersPerDenom.DiscardUnknown(m)
}

var xxx_messageInfo_MultipliersPerDenom proto.InternalMessageInfo

// Params
type Params struct {
	JoltSupplyRewardPeriods MultiRewardPeriods   `protobuf:"bytes,1,rep,name=jolt_supply_reward_periods,json=joltSupplyRewardPeriods,proto3,castrepeated=MultiRewardPeriods" json:"jolt_supply_reward_periods"`
	JoltBorrowRewardPeriods MultiRewardPeriods   `protobuf:"bytes,2,rep,name=jolt_borrow_reward_periods,json=joltBorrowRewardPeriods,proto3,castrepeated=MultiRewardPeriods" json:"jolt_borrow_reward_periods"`
	SwapRewardPeriods       MultiRewardPeriods   `protobuf:"bytes,3,rep,name=swap_reward_periods,json=swapRewardPeriods,proto3,castrepeated=MultiRewardPeriods" json:"swap_reward_periods"`
	SPVRewardPeriods        MultiRewardPeriods   `protobuf:"bytes,4,rep,name=SPV_reward_periods,json=SPVRewardPeriods,proto3,castrepeated=MultiRewardPeriods" json:"SPV_reward_periods"`
	ClaimMultipliers        MultipliersPerDenoms `protobuf:"bytes,5,rep,name=claim_multipliers,json=claimMultipliers,proto3,castrepeated=MultipliersPerDenoms" json:"claim_multipliers"`
	ClaimEnd                time.Time            `protobuf:"bytes,6,opt,name=claim_end,json=claimEnd,proto3,stdtime" json:"claim_end"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_762589dba89ba581, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Params
type ParamsV19 struct {
	JoltSupplyRewardPeriods MultiRewardPeriods   `protobuf:"bytes,1,rep,name=jolt_supply_reward_periods,json=joltSupplyRewardPeriods,proto3,castrepeated=MultiRewardPeriods" json:"jolt_supply_reward_periods"`
	JoltBorrowRewardPeriods MultiRewardPeriods   `protobuf:"bytes,2,rep,name=jolt_borrow_reward_periods,json=joltBorrowRewardPeriods,proto3,castrepeated=MultiRewardPeriods" json:"jolt_borrow_reward_periods"`
	SwapRewardPeriods       MultiRewardPeriods   `protobuf:"bytes,3,rep,name=swap_reward_periods,json=swapRewardPeriods,proto3,castrepeated=MultiRewardPeriods" json:"swap_reward_periods"`
	ClaimMultipliers        MultipliersPerDenoms `protobuf:"bytes,4,rep,name=claim_multipliers,json=claimMultipliers,proto3,castrepeated=MultipliersPerDenoms" json:"claim_multipliers"`
	ClaimEnd                time.Time            `protobuf:"bytes,6,opt,name=claim_end,json=claimEnd,proto3,stdtime" json:"claim_end"`
}

func (m *ParamsV19) Reset()         { *m = ParamsV19{} }
func (m *ParamsV19) String() string { return proto.CompactTextString(m) }
func (*ParamsV19) ProtoMessage()    {}
func (*ParamsV19) Descriptor() ([]byte, []int) {
	return fileDescriptor_762589dba89ba581, []int{5}
}
func (m *ParamsV19) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsV19) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsV19.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsV19) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsV19.Merge(m, src)
}
func (m *ParamsV19) XXX_Size() int {
	return m.Size()
}
func (m *ParamsV19) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsV19.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsV19 proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RewardPeriod)(nil), "joltify.third_party.incentive.v1beta1.RewardPeriod")
	proto.RegisterType((*MultiRewardPeriod)(nil), "joltify.third_party.incentive.v1beta1.MultiRewardPeriod")
	proto.RegisterType((*Multiplier)(nil), "joltify.third_party.incentive.v1beta1.Multiplier")
	proto.RegisterType((*MultipliersPerDenom)(nil), "joltify.third_party.incentive.v1beta1.MultipliersPerDenom")
	proto.RegisterType((*Params)(nil), "joltify.third_party.incentive.v1beta1.Params")
	proto.RegisterType((*ParamsV19)(nil), "joltify.third_party.incentive.v1beta1.ParamsV19")
}

func init() {
	proto.RegisterFile("joltify/third_party/incentive/v1beta1/params.proto", fileDescriptor_762589dba89ba581)
}

var fileDescriptor_762589dba89ba581 = []byte{
	// 749 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0x4d, 0x4f, 0xdb, 0x48,
	0x18, 0xc7, 0xe3, 0xbc, 0x89, 0x0c, 0xec, 0x2e, 0x0c, 0x68, 0x37, 0x9b, 0x5d, 0x39, 0x28, 0x68,
	0xb5, 0xb9, 0x30, 0x6e, 0xa8, 0x54, 0xb5, 0xf4, 0x54, 0x97, 0x4a, 0x3d, 0x80, 0x14, 0x39, 0x88,
	0x43, 0x2f, 0xd6, 0xc4, 0x9e, 0x24, 0x53, 0x6c, 0x8f, 0x35, 0x33, 0x81, 0xe6, 0x8a, 0x8a, 0x7a,
	0xa5, 0x95, 0xfa, 0x25, 0xfa, 0x35, 0x7a, 0xe1, 0xc8, 0xb1, 0xea, 0x01, 0x5a, 0xf8, 0x22, 0xd5,
	0x8c, 0x1d, 0x92, 0x50, 0xa8, 0x9a, 0x03, 0x07, 0xa4, 0x9e, 0x32, 0x2f, 0xfe, 0x3f, 0xcf, 0x6f,
	0xfe, 0x79, 0x9e, 0xb1, 0xc1, 0xda, 0x4b, 0x16, 0x48, 0xda, 0x19, 0x58, 0xb2, 0x47, 0xb9, 0xef,
	0xc6, 0x98, 0xcb, 0x81, 0x45, 0x23, 0x8f, 0x44, 0x92, 0xee, 0x11, 0x6b, 0xaf, 0xd1, 0x26, 0x12,
	0x37, 0xac, 0x18, 0x73, 0x1c, 0x0a, 0x14, 0x73, 0x26, 0x19, 0xfc, 0x2f, 0xd5, 0xa0, 0x31, 0x0d,
	0xba, 0xd4, 0xa0, 0x54, 0x53, 0x59, 0xea, 0xb2, 0x2e, 0xd3, 0x0a, 0x4b, 0x8d, 0x12, 0x71, 0xa5,
	0xda, 0x65, 0xac, 0x1b, 0x10, 0x4b, 0xcf, 0xda, 0xfd, 0x8e, 0x25, 0x69, 0x48, 0x84, 0xc4, 0x61,
	0x9c, 0x3e, 0x60, 0x7a, 0x4c, 0x84, 0x4c, 0x58, 0x6d, 0x2c, 0x46, 0xf9, 0x3d, 0x46, 0xa3, 0x64,
	0xbf, 0xf6, 0x2e, 0x0b, 0xe6, 0x1c, 0xb2, 0x8f, 0xb9, 0xdf, 0x24, 0x9c, 0x32, 0x1f, 0xfe, 0x09,
	0x8a, 0xd8, 0x53, 0x99, 0xcb, 0xc6, 0xb2, 0x51, 0x9f, 0x71, 0xd2, 0x19, 0xfc, 0x1f, 0xfc, 0xe1,
	0xb1, 0x20, 0xc0, 0x92, 0x70, 0x1c, 0xb8, 0x72, 0x10, 0x93, 0x72, 0x76, 0xd9, 0xa8, 0x97, 0x9c,
	0xdf, 0x47, 0xcb, 0xdb, 0x83, 0x98, 0xc0, 0x75, 0x50, 0x10, 0x12, 0x73, 0x59, 0xce, 0x2d, 0x1b,
	0xf5, 0xd9, 0xb5, 0x0a, 0x4a, 0x10, 0xd1, 0x10, 0x11, 0x6d, 0x0f, 0x11, 0xed, 0x99, 0xe3, 0xd3,
	0x6a, 0xe6, 0xe8, 0xac, 0x6a, 0x38, 0x89, 0x04, 0x3e, 0x00, 0x39, 0x12, 0xf9, 0xe5, 0xfc, 0x14,
	0x4a, 0x25, 0x80, 0x5b, 0x00, 0x72, 0x7d, 0x08, 0xe1, 0xc6, 0x84, 0xbb, 0x82, 0x78, 0x2c, 0xf2,
	0xcb, 0x05, 0x1d, 0xe6, 0x6f, 0x94, 0x58, 0x80, 0x94, 0x05, 0x43, 0x3b, 0xd1, 0x53, 0x46, 0x23,
	0x3b, 0xaf, 0xa2, 0x38, 0xf3, 0xa9, 0xb4, 0x49, 0x78, 0x4b, 0x0b, 0x6b, 0x1f, 0xb3, 0x60, 0x61,
	0xab, 0x1f, 0x48, 0x7a, 0xf7, 0x9d, 0x19, 0xdc, 0xe0, 0x4c, 0xee, 0xc7, 0xce, 0xdc, 0x53, 0x51,
	0x3e, 0x9c, 0x55, 0xeb, 0x5d, 0x2a, 0x7b, 0xfd, 0x36, 0xf2, 0x58, 0x68, 0xa5, 0x95, 0x94, 0xfc,
	0xac, 0x0a, 0x7f, 0xd7, 0x52, 0x67, 0x15, 0x5a, 0x20, 0xae, 0x71, 0xf1, 0xc0, 0x00, 0x40, 0xbb,
	0x18, 0x07, 0x94, 0x70, 0x08, 0x41, 0x3e, 0xc2, 0x61, 0x62, 0x5e, 0xc9, 0xd1, 0x63, 0xb8, 0x02,
	0x7e, 0x0b, 0x59, 0x24, 0x7b, 0xc2, 0x0d, 0x98, 0xb7, 0xdb, 0x8f, 0xb5, 0x71, 0x39, 0x67, 0x2e,
	0x59, 0xdc, 0xd4, 0x6b, 0xf0, 0x31, 0x28, 0x76, 0xb0, 0x27, 0x19, 0xd7, 0xbe, 0xcd, 0xd9, 0x2b,
	0x8a, 0xed, 0xf3, 0x69, 0xf5, 0x9f, 0x84, 0x44, 0xf8, 0xbb, 0x88, 0x32, 0x2b, 0xc4, 0xb2, 0x87,
	0x36, 0x49, 0x17, 0x7b, 0x83, 0x0d, 0xe2, 0x39, 0xa9, 0xa4, 0xf6, 0xde, 0x00, 0x8b, 0x23, 0x08,
	0x45, 0xb7, 0x41, 0x22, 0x16, 0xc2, 0x25, 0x50, 0xf0, 0xd5, 0x20, 0xc5, 0x49, 0x26, 0xb0, 0x07,
	0x66, 0xc3, 0xd1, 0xc3, 0xe5, 0xac, 0xb6, 0xa9, 0x81, 0x7e, 0xaa, 0x43, 0xd1, 0x28, 0x8d, 0xbd,
	0x98, 0xda, 0x37, 0x3b, 0x96, 0xda, 0x19, 0x0f, 0x5d, 0x7b, 0x53, 0x04, 0xc5, 0xa6, 0xbe, 0x06,
	0xe0, 0x5b, 0x03, 0x54, 0x54, 0x06, 0x57, 0xf4, 0xe3, 0x38, 0x18, 0xb8, 0x89, 0x91, 0xea, 0xef,
	0xa2, 0xcc, 0x17, 0x65, 0x43, 0x43, 0x3c, 0x9c, 0x06, 0x62, 0xbc, 0x6c, 0xed, 0x4a, 0xca, 0x02,
	0xbf, 0xdb, 0x12, 0xce, 0x5f, 0x2a, 0x68, 0x4b, 0xa7, 0x9d, 0xd8, 0x18, 0x31, 0xb5, 0x19, 0xe7,
	0x6c, 0xff, 0x2a, 0x53, 0xf6, 0xb6, 0x99, 0x6c, 0x9d, 0x76, 0x92, 0xe9, 0xb5, 0x01, 0x16, 0xc5,
	0x3e, 0x8e, 0xaf, 0xc2, 0xe4, 0x6e, 0x11, 0x66, 0x41, 0x25, 0x9c, 0xc4, 0x38, 0x30, 0x00, 0x6c,
	0x35, 0x77, 0xae, 0x52, 0xe4, 0x6f, 0x91, 0x62, 0xbe, 0xd5, 0xdc, 0x99, 0x84, 0x38, 0x34, 0xc0,
	0x82, 0x17, 0x60, 0x1a, 0xba, 0xe3, 0xf5, 0x9a, 0xb4, 0xf5, 0xfa, 0xd4, 0xf5, 0x7a, 0xd9, 0x16,
	0xf6, 0xbf, 0x29, 0xc5, 0xd2, 0x35, 0x9b, 0xc2, 0x99, 0xd7, 0x29, 0xc7, 0xb6, 0xe0, 0x13, 0x50,
	0x4a, 0x30, 0xd4, 0xe5, 0x54, 0x9c, 0xe2, 0x72, 0x9a, 0xd1, 0xb2, 0x67, 0x91, 0x5f, 0x3b, 0x2c,
	0x80, 0x52, 0xd2, 0x09, 0x3b, 0x8d, 0x47, 0xbf, 0x9a, 0xe1, 0x6e, 0x35, 0xc3, 0xf5, 0x75, 0x98,
	0xbf, 0x83, 0x75, 0x68, 0x77, 0x8e, 0xbf, 0x9a, 0x99, 0xe3, 0x73, 0xd3, 0x38, 0x39, 0x37, 0x8d,
	0x2f, 0xe7, 0xa6, 0x71, 0x74, 0x61, 0x66, 0x4e, 0x2e, 0xcc, 0xcc, 0xa7, 0x0b, 0x33, 0xf3, 0xe2,
	0xf9, 0xd8, 0x8b, 0x30, 0x3d, 0xd6, 0x6a, 0x87, 0x46, 0x38, 0xf2, 0xc8, 0x70, 0xee, 0x06, 0x24,
	0xf2, 0x69, 0xd4, 0xb5, 0x5e, 0xdd, 0xf0, 0xf9, 0xa7, 0x5f, 0x97, 0xed, 0xa2, 0xe6, 0xb9, 0xff,
	0x2d, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x90, 0xdd, 0x1c, 0x2c, 0x0a, 0x00, 0x00,
}

func (m *RewardPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RewardsPerSecond.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.End, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.End):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintParams(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x22
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Start):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintParams(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1a
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiRewardPeriod) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiRewardPeriod) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiRewardPeriod) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardsPerSecond) > 0 {
		for iNdEx := len(m.RewardsPerSecond) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardsPerSecond[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.End, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.End):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintParams(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Start, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Start):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintParams(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x1a
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintParams(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0x12
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Multiplier) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Multiplier) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Multiplier) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Factor.Size()
		i -= size
		if _, err := m.Factor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.MonthsLockup != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MonthsLockup))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultipliersPerDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultipliersPerDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultipliersPerDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Multipliers) > 0 {
		for iNdEx := len(m.Multipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Multipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n6, err6 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ClaimEnd, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ClaimEnd):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintParams(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x32
	if len(m.ClaimMultipliers) > 0 {
		for iNdEx := len(m.ClaimMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SPVRewardPeriods) > 0 {
		for iNdEx := len(m.SPVRewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SPVRewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SwapRewardPeriods) > 0 {
		for iNdEx := len(m.SwapRewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapRewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.JoltBorrowRewardPeriods) > 0 {
		for iNdEx := len(m.JoltBorrowRewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoltBorrowRewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.JoltSupplyRewardPeriods) > 0 {
		for iNdEx := len(m.JoltSupplyRewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoltSupplyRewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParamsV19) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsV19) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsV19) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ClaimEnd, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ClaimEnd):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintParams(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x32
	if len(m.ClaimMultipliers) > 0 {
		for iNdEx := len(m.ClaimMultipliers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimMultipliers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SwapRewardPeriods) > 0 {
		for iNdEx := len(m.SwapRewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapRewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.JoltBorrowRewardPeriods) > 0 {
		for iNdEx := len(m.JoltBorrowRewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoltBorrowRewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.JoltSupplyRewardPeriods) > 0 {
		for iNdEx := len(m.JoltSupplyRewardPeriods) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoltSupplyRewardPeriods[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.End)
	n += 1 + l + sovParams(uint64(l))
	l = m.RewardsPerSecond.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *MultiRewardPeriod) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Start)
	n += 1 + l + sovParams(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.End)
	n += 1 + l + sovParams(uint64(l))
	if len(m.RewardsPerSecond) > 0 {
		for _, e := range m.RewardsPerSecond {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *Multiplier) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.MonthsLockup != 0 {
		n += 1 + sovParams(uint64(m.MonthsLockup))
	}
	l = m.Factor.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *MultipliersPerDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.Multipliers) > 0 {
		for _, e := range m.Multipliers {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JoltSupplyRewardPeriods) > 0 {
		for _, e := range m.JoltSupplyRewardPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.JoltBorrowRewardPeriods) > 0 {
		for _, e := range m.JoltBorrowRewardPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.SwapRewardPeriods) > 0 {
		for _, e := range m.SwapRewardPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.SPVRewardPeriods) > 0 {
		for _, e := range m.SPVRewardPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.ClaimMultipliers) > 0 {
		for _, e := range m.ClaimMultipliers {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ClaimEnd)
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *ParamsV19) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JoltSupplyRewardPeriods) > 0 {
		for _, e := range m.JoltSupplyRewardPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.JoltBorrowRewardPeriods) > 0 {
		for _, e := range m.JoltBorrowRewardPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.SwapRewardPeriods) > 0 {
		for _, e := range m.SwapRewardPeriods {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.ClaimMultipliers) > 0 {
		for _, e := range m.ClaimMultipliers {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ClaimEnd)
	n += 1 + l + sovParams(uint64(l))
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPerSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsPerSecond.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiRewardPeriod) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiRewardPeriod: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiRewardPeriod: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Start, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.End, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPerSecond", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPerSecond = append(m.RewardsPerSecond, types.Coin{})
			if err := m.RewardsPerSecond[len(m.RewardsPerSecond)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Multiplier) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Multiplier: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Multiplier: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthsLockup", wireType)
			}
			m.MonthsLockup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonthsLockup |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Factor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Factor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultipliersPerDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultipliersPerDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultipliersPerDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Multipliers = append(m.Multipliers, Multiplier{})
			if err := m.Multipliers[len(m.Multipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltSupplyRewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoltSupplyRewardPeriods = append(m.JoltSupplyRewardPeriods, MultiRewardPeriod{})
			if err := m.JoltSupplyRewardPeriods[len(m.JoltSupplyRewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltBorrowRewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoltBorrowRewardPeriods = append(m.JoltBorrowRewardPeriods, MultiRewardPeriod{})
			if err := m.JoltBorrowRewardPeriods[len(m.JoltBorrowRewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapRewardPeriods = append(m.SwapRewardPeriods, MultiRewardPeriod{})
			if err := m.SwapRewardPeriods[len(m.SwapRewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SPVRewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SPVRewardPeriods = append(m.SPVRewardPeriods, MultiRewardPeriod{})
			if err := m.SPVRewardPeriods[len(m.SPVRewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimMultipliers = append(m.ClaimMultipliers, MultipliersPerDenom{})
			if err := m.ClaimMultipliers[len(m.ClaimMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ClaimEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsV19) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsV19: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsV19: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltSupplyRewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoltSupplyRewardPeriods = append(m.JoltSupplyRewardPeriods, MultiRewardPeriod{})
			if err := m.JoltSupplyRewardPeriods[len(m.JoltSupplyRewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltBorrowRewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoltBorrowRewardPeriods = append(m.JoltBorrowRewardPeriods, MultiRewardPeriod{})
			if err := m.JoltBorrowRewardPeriods[len(m.JoltBorrowRewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRewardPeriods", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapRewardPeriods = append(m.SwapRewardPeriods, MultiRewardPeriod{})
			if err := m.SwapRewardPeriods[len(m.SwapRewardPeriods)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimMultipliers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimMultipliers = append(m.ClaimMultipliers, MultipliersPerDenom{})
			if err := m.ClaimMultipliers[len(m.ClaimMultipliers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ClaimEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
