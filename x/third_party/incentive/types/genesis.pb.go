// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/incentive/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types1 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// AccumulationTime stores the previous reward distribution time and its corresponding collateral type
type AccumulationTime struct {
	CollateralType           string    `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty"`
	PreviousAccumulationTime time.Time `protobuf:"bytes,2,opt,name=previous_accumulation_time,json=previousAccumulationTime,proto3,stdtime" json:"previous_accumulation_time"`
}

func (m *AccumulationTime) Reset()         { *m = AccumulationTime{} }
func (m *AccumulationTime) String() string { return proto.CompactTextString(m) }
func (*AccumulationTime) ProtoMessage()    {}
func (*AccumulationTime) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9c5f5bdd0c28d6, []int{0}
}
func (m *AccumulationTime) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccumulationTime) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccumulationTime.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccumulationTime) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccumulationTime.Merge(m, src)
}
func (m *AccumulationTime) XXX_Size() int {
	return m.Size()
}
func (m *AccumulationTime) XXX_DiscardUnknown() {
	xxx_messageInfo_AccumulationTime.DiscardUnknown(m)
}

var xxx_messageInfo_AccumulationTime proto.InternalMessageInfo

// GenesisRewardState groups together the global state for a particular reward so it can be exported in genesis.
type GenesisRewardState struct {
	AccumulationTimes  AccumulationTimes  `protobuf:"bytes,1,rep,name=accumulation_times,json=accumulationTimes,proto3,castrepeated=AccumulationTimes" json:"accumulation_times"`
	MultiRewardIndexes MultiRewardIndexes `protobuf:"bytes,2,rep,name=multi_reward_indexes,json=multiRewardIndexes,proto3,castrepeated=MultiRewardIndexes" json:"multi_reward_indexes"`
}

func (m *GenesisRewardState) Reset()         { *m = GenesisRewardState{} }
func (m *GenesisRewardState) String() string { return proto.CompactTextString(m) }
func (*GenesisRewardState) ProtoMessage()    {}
func (*GenesisRewardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9c5f5bdd0c28d6, []int{1}
}
func (m *GenesisRewardState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisRewardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisRewardState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisRewardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisRewardState.Merge(m, src)
}
func (m *GenesisRewardState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisRewardState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisRewardState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisRewardState proto.InternalMessageInfo

// GenesisRewardState groups together the global state for a particular reward so it can be exported in genesis.
type SPVGenesisRewardState struct {
	AccumulationTimes AccumulationTimes            `protobuf:"bytes,1,rep,name=accumulation_times,json=accumulationTimes,proto3,castrepeated=AccumulationTimes" json:"accumulation_times"`
	AccRewardIndexs   []SPVRewardAccIndex          `protobuf:"bytes,2,rep,name=acc_reward_indexs,json=accRewardIndexs,proto3" json:"acc_reward_indexs"`
	SpvInvestors      []*SPVGenRewardInvestorState `protobuf:"bytes,8,rep,name=spv_investors,json=spvInvestors,proto3" json:"spv_investors,omitempty"`
}

func (m *SPVGenesisRewardState) Reset()         { *m = SPVGenesisRewardState{} }
func (m *SPVGenesisRewardState) String() string { return proto.CompactTextString(m) }
func (*SPVGenesisRewardState) ProtoMessage()    {}
func (*SPVGenesisRewardState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9c5f5bdd0c28d6, []int{2}
}
func (m *SPVGenesisRewardState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPVGenesisRewardState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPVGenesisRewardState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPVGenesisRewardState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPVGenesisRewardState.Merge(m, src)
}
func (m *SPVGenesisRewardState) XXX_Size() int {
	return m.Size()
}
func (m *SPVGenesisRewardState) XXX_DiscardUnknown() {
	xxx_messageInfo_SPVGenesisRewardState.DiscardUnknown(m)
}

var xxx_messageInfo_SPVGenesisRewardState proto.InternalMessageInfo

type SPVGenRewardInvestorState struct {
	Wallet string                                   `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	Pool   string                                   `protobuf:"bytes,2,opt,name=pool,proto3" json:"pool,omitempty"`
	Reward github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward"`
}

func (m *SPVGenRewardInvestorState) Reset()         { *m = SPVGenRewardInvestorState{} }
func (m *SPVGenRewardInvestorState) String() string { return proto.CompactTextString(m) }
func (*SPVGenRewardInvestorState) ProtoMessage()    {}
func (*SPVGenRewardInvestorState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9c5f5bdd0c28d6, []int{3}
}
func (m *SPVGenRewardInvestorState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPVGenRewardInvestorState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPVGenRewardInvestorState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPVGenRewardInvestorState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPVGenRewardInvestorState.Merge(m, src)
}
func (m *SPVGenRewardInvestorState) XXX_Size() int {
	return m.Size()
}
func (m *SPVGenRewardInvestorState) XXX_DiscardUnknown() {
	xxx_messageInfo_SPVGenRewardInvestorState.DiscardUnknown(m)
}

var xxx_messageInfo_SPVGenRewardInvestorState proto.InternalMessageInfo

// GenesisState is the state that must be provided at genesis.
type GenesisState struct {
	Params                      Params                      `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	JoltSupplyRewardState       GenesisRewardState          `protobuf:"bytes,2,opt,name=jolt_supply_reward_state,json=joltSupplyRewardState,proto3" json:"jolt_supply_reward_state"`
	JoltBorrowRewardState       GenesisRewardState          `protobuf:"bytes,3,opt,name=jolt_borrow_reward_state,json=joltBorrowRewardState,proto3" json:"jolt_borrow_reward_state"`
	SwapRewardState             GenesisRewardState          `protobuf:"bytes,4,opt,name=swap_reward_state,json=swapRewardState,proto3" json:"swap_reward_state"`
	SpvRewardState              SPVGenesisRewardState       `protobuf:"bytes,5,opt,name=spv_reward_state,json=spvRewardState,proto3" json:"spv_reward_state"`
	JoltLiquidityProviderClaims JoltLiquidityProviderClaims `protobuf:"bytes,6,rep,name=jolt_liquidity_provider_claims,json=joltLiquidityProviderClaims,proto3,castrepeated=JoltLiquidityProviderClaims" json:"jolt_liquidity_provider_claims"`
	SwapClaims                  SwapClaims                  `protobuf:"bytes,7,rep,name=swap_claims,json=swapClaims,proto3,castrepeated=SwapClaims" json:"swap_claims"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9e9c5f5bdd0c28d6, []int{4}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func init() {
	proto.RegisterType((*AccumulationTime)(nil), "joltify.third_party.incentive.v1beta1.AccumulationTime")
	proto.RegisterType((*GenesisRewardState)(nil), "joltify.third_party.incentive.v1beta1.GenesisRewardState")
	proto.RegisterType((*SPVGenesisRewardState)(nil), "joltify.third_party.incentive.v1beta1.SPVGenesisRewardState")
	proto.RegisterType((*SPVGenRewardInvestorState)(nil), "joltify.third_party.incentive.v1beta1.SPVGenRewardInvestorState")
	proto.RegisterType((*GenesisState)(nil), "joltify.third_party.incentive.v1beta1.GenesisState")
}

func init() {
	proto.RegisterFile("joltify/third_party/incentive/v1beta1/genesis.proto", fileDescriptor_9e9c5f5bdd0c28d6)
}

var fileDescriptor_9e9c5f5bdd0c28d6 = []byte{
	// 796 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4d, 0x4f, 0xf3, 0x36,
	0x1c, 0x6f, 0x0a, 0xeb, 0x9e, 0xc7, 0x7d, 0xf6, 0x00, 0x16, 0x4c, 0xa1, 0x48, 0x29, 0xea, 0x34,
	0xad, 0x17, 0x12, 0x28, 0x87, 0x6d, 0xd2, 0x0e, 0xa3, 0x1c, 0xd8, 0xab, 0x54, 0xa5, 0x88, 0xc3,
	0x2e, 0x91, 0x9b, 0xba, 0xc5, 0xe0, 0xc4, 0x5e, 0xec, 0xa4, 0xf4, 0xb8, 0xc3, 0xee, 0x7c, 0x83,
	0xed, 0xbc, 0xed, 0x3b, 0xec, 0xca, 0x91, 0xe3, 0x4e, 0x63, 0x83, 0xfb, 0x3e, 0xc3, 0x14, 0xc7,
	0x29, 0x69, 0x59, 0xa5, 0x20, 0x71, 0xd8, 0xa9, 0xf1, 0xdf, 0xfe, 0xbd, 0xf4, 0xe7, 0xbf, 0x6d,
	0x70, 0x78, 0xc1, 0xa8, 0x24, 0xa3, 0xa9, 0x23, 0xcf, 0x49, 0x34, 0xf4, 0x38, 0x8a, 0xe4, 0xd4,
	0x21, 0xa1, 0x8f, 0x43, 0x49, 0x12, 0xec, 0x24, 0x07, 0x03, 0x2c, 0xd1, 0x81, 0x33, 0xc6, 0x21,
	0x16, 0x44, 0xd8, 0x3c, 0x62, 0x92, 0xc1, 0x0f, 0x35, 0xc8, 0x2e, 0x80, 0xec, 0x19, 0xc8, 0xd6,
	0xa0, 0xc6, 0xe6, 0x98, 0x8d, 0x99, 0x42, 0x38, 0xe9, 0x57, 0x06, 0x6e, 0x58, 0x3e, 0x13, 0x01,
	0x13, 0xce, 0x00, 0x89, 0x47, 0x7e, 0x9f, 0x91, 0x50, 0xcf, 0x77, 0xca, 0x39, 0xf2, 0x29, 0x22,
	0x81, 0x78, 0x1e, 0x86, 0xa3, 0x08, 0xcd, 0x30, 0xcd, 0x31, 0x63, 0x63, 0x8a, 0x1d, 0x35, 0x1a,
	0xc4, 0x23, 0x47, 0x92, 0x00, 0x0b, 0x89, 0x02, 0x9e, 0x2d, 0x68, 0xfd, 0x64, 0x80, 0xf5, 0x23,
	0xdf, 0x8f, 0x83, 0x98, 0x22, 0x49, 0x58, 0x78, 0x4a, 0x02, 0x0c, 0x3f, 0x02, 0x6b, 0x3e, 0xa3,
	0x14, 0x49, 0x1c, 0x21, 0xea, 0xc9, 0x29, 0xc7, 0xa6, 0xb1, 0x6b, 0xb4, 0x5f, 0xbb, 0x6f, 0x1f,
	0xcb, 0xa7, 0x53, 0x8e, 0xe1, 0x00, 0x34, 0x78, 0x84, 0x13, 0xc2, 0x62, 0xe1, 0xa1, 0x02, 0x8b,
	0x97, 0xca, 0x98, 0xd5, 0x5d, 0xa3, 0x5d, 0xef, 0x34, 0xec, 0xcc, 0x83, 0x9d, 0x7b, 0xb0, 0x4f,
	0x73, 0x0f, 0xdd, 0x57, 0x37, 0x7f, 0x36, 0x2b, 0xd7, 0x77, 0x4d, 0xc3, 0x35, 0x73, 0x9e, 0x45,
	0x33, 0xad, 0x9f, 0xab, 0x00, 0x9e, 0x64, 0x3b, 0xe3, 0xe2, 0x09, 0x8a, 0x86, 0x7d, 0x89, 0x24,
	0x86, 0x3f, 0x18, 0x00, 0x3e, 0x91, 0x14, 0xa6, 0xb1, 0xbb, 0xd2, 0xae, 0x77, 0x3e, 0xb6, 0x4b,
	0x6d, 0x9e, 0xbd, 0x28, 0xd6, 0xdd, 0x4e, 0x0d, 0xfd, 0x72, 0xd7, 0xdc, 0x58, 0x9c, 0x11, 0xee,
	0x06, 0x5a, 0x2c, 0xc1, 0x1f, 0x0d, 0xb0, 0x19, 0xc4, 0x54, 0x12, 0x2f, 0x52, 0xce, 0x3c, 0x12,
	0x0e, 0xf1, 0x15, 0x16, 0x66, 0xf5, 0x59, 0x2e, 0xbe, 0x4d, 0x29, 0xb2, 0xff, 0xf6, 0x65, 0x4a,
	0xd0, 0x6d, 0x68, 0x17, 0x70, 0x71, 0x06, 0x0b, 0x17, 0x06, 0x4f, 0x6a, 0xad, 0x7f, 0xaa, 0x60,
	0xab, 0xdf, 0x3b, 0xfb, 0x9f, 0xa6, 0x74, 0x01, 0xd2, 0xe2, 0x5c, 0x44, 0x79, 0x42, 0x9f, 0x94,
	0x74, 0xd0, 0xef, 0x9d, 0x65, 0xff, 0xea, 0xc8, 0xf7, 0xb3, 0x88, 0x56, 0x53, 0x0b, 0xee, 0x1a,
	0xf2, 0xfd, 0x42, 0x14, 0x02, 0x62, 0xf0, 0x9e, 0xe0, 0x89, 0x47, 0xc2, 0x04, 0x0b, 0xc9, 0x22,
	0x61, 0xbe, 0x52, 0x3a, 0x9f, 0x97, 0xd7, 0x39, 0xc1, 0x61, 0xce, 0x98, 0x71, 0xa8, 0x20, 0xdd,
	0x37, 0x82, 0x27, 0x79, 0x45, 0xb4, 0x7e, 0x33, 0xc0, 0xf6, 0xd2, 0xb5, 0xf0, 0x7d, 0x50, 0x9b,
	0x20, 0x4a, 0xb1, 0xd4, 0xa7, 0x46, 0x8f, 0x20, 0x04, 0xab, 0x9c, 0x31, 0xaa, 0xce, 0xc5, 0x6b,
	0x57, 0x7d, 0x43, 0x1f, 0xd4, 0xb2, 0x60, 0xcc, 0x15, 0xe5, 0x74, 0xdb, 0xce, 0x6e, 0x0e, 0x3b,
	0xbd, 0x39, 0x66, 0xbe, 0x8e, 0x19, 0x09, 0xbb, 0xfb, 0x3a, 0xf5, 0xf6, 0x98, 0xc8, 0xf3, 0x78,
	0x60, 0xfb, 0x2c, 0x70, 0xf4, 0x35, 0x93, 0xfd, 0xec, 0x89, 0xe1, 0xa5, 0x93, 0x9e, 0x56, 0xa1,
	0x00, 0xc2, 0xd5, 0xd4, 0xad, 0xdf, 0x6b, 0xe0, 0x8d, 0x6e, 0x8e, 0xcc, 0xe1, 0xd7, 0xa0, 0x96,
	0x5d, 0x13, 0xca, 0x61, 0xbd, 0xb3, 0x57, 0x32, 0x9f, 0x9e, 0x02, 0xe9, 0xf0, 0x35, 0x05, 0xbc,
	0x02, 0x66, 0x8a, 0xf6, 0x44, 0xcc, 0x39, 0x9d, 0xe6, 0xfb, 0x2c, 0x52, 0x21, 0x7d, 0x05, 0x7c,
	0x5a, 0x92, 0xfe, 0x69, 0x03, 0x6b, 0xa9, 0xad, 0x14, 0xdf, 0x57, 0xfc, 0xc5, 0xee, 0xce, 0x95,
	0x07, 0x2c, 0x8a, 0xd8, 0x64, 0x5e, 0x79, 0xe5, 0x05, 0x95, 0xbb, 0x8a, 0xbf, 0xa8, 0x7c, 0x09,
	0x36, 0xc4, 0x04, 0xf1, 0x79, 0xc9, 0xd5, 0x97, 0x91, 0x5c, 0x4b, 0x99, 0x8b, 0x62, 0x14, 0xac,
	0xa7, 0x4d, 0x3d, 0xa7, 0xf5, 0x8e, 0xd2, 0xfa, 0xec, 0x59, 0x7d, 0xfd, 0xdf, 0x72, 0x6f, 0x05,
	0x4f, 0x8a, 0x6a, 0xbf, 0x1a, 0xc0, 0x52, 0xa9, 0x52, 0xf2, 0x7d, 0x4c, 0x86, 0x44, 0x4e, 0x3d,
	0x1e, 0xb1, 0x84, 0x0c, 0x71, 0xe4, 0x65, 0xef, 0x91, 0x59, 0x53, 0xad, 0x7a, 0x54, 0x52, 0xfc,
	0x2b, 0x46, 0xe5, 0x37, 0x39, 0x57, 0x4f, 0x53, 0x1d, 0xa7, 0x4c, 0xdd, 0x0f, 0x74, 0x4b, 0xef,
	0x2c, 0x5f, 0x23, 0xdc, 0x9d, 0x8b, 0xe5, 0x93, 0x10, 0x83, 0xba, 0xda, 0x08, 0xed, 0xec, 0x5d,
	0xe5, 0x6c, 0xbf, 0x6c, 0x2c, 0x13, 0xc4, 0x33, 0x23, 0x50, 0x1b, 0x01, 0xb3, 0x92, 0x70, 0x81,
	0x98, 0x7d, 0x77, 0x47, 0x37, 0x7f, 0x5b, 0x95, 0x9b, 0x7b, 0xcb, 0xb8, 0xbd, 0xb7, 0x8c, 0xbf,
	0xee, 0x2d, 0xe3, 0xfa, 0xc1, 0xaa, 0xdc, 0x3e, 0x58, 0x95, 0x3f, 0x1e, 0xac, 0xca, 0x77, 0x5f,
	0x14, 0x4e, 0xa4, 0x56, 0xde, 0x1b, 0x91, 0x10, 0x85, 0x3e, 0xce, 0xc7, 0x1e, 0xc5, 0xe1, 0x90,
	0x84, 0x63, 0xe7, 0x6a, 0xc9, 0xf3, 0xad, 0xce, 0xed, 0xa0, 0xa6, 0x1e, 0xc9, 0xc3, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x50, 0xbb, 0xf9, 0x1a, 0xb2, 0x08, 0x00, 0x00,
}

func (m *AccumulationTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccumulationTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccumulationTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PreviousAccumulationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PreviousAccumulationTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisRewardState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisRewardState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisRewardState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MultiRewardIndexes) > 0 {
		for iNdEx := len(m.MultiRewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiRewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccumulationTimes) > 0 {
		for iNdEx := len(m.AccumulationTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccumulationTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SPVGenesisRewardState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPVGenesisRewardState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPVGenesisRewardState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpvInvestors) > 0 {
		for iNdEx := len(m.SpvInvestors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpvInvestors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AccRewardIndexs) > 0 {
		for iNdEx := len(m.AccRewardIndexs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccRewardIndexs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AccumulationTimes) > 0 {
		for iNdEx := len(m.AccumulationTimes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AccumulationTimes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SPVGenRewardInvestorState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPVGenRewardInvestorState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPVGenRewardInvestorState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Pool) > 0 {
		i -= len(m.Pool)
		copy(dAtA[i:], m.Pool)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Pool)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Wallet) > 0 {
		i -= len(m.Wallet)
		copy(dAtA[i:], m.Wallet)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Wallet)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapClaims) > 0 {
		for iNdEx := len(m.SwapClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.JoltLiquidityProviderClaims) > 0 {
		for iNdEx := len(m.JoltLiquidityProviderClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoltLiquidityProviderClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	{
		size, err := m.SpvRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.SwapRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.JoltBorrowRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.JoltSupplyRewardState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AccumulationTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PreviousAccumulationTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisRewardState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccumulationTimes) > 0 {
		for _, e := range m.AccumulationTimes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.MultiRewardIndexes) > 0 {
		for _, e := range m.MultiRewardIndexes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *SPVGenesisRewardState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AccumulationTimes) > 0 {
		for _, e := range m.AccumulationTimes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.AccRewardIndexs) > 0 {
		for _, e := range m.AccRewardIndexs {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SpvInvestors) > 0 {
		for _, e := range m.SpvInvestors {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *SPVGenRewardInvestorState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Wallet)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.Pool)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.JoltSupplyRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.JoltBorrowRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SwapRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.SpvRewardState.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.JoltLiquidityProviderClaims) > 0 {
		for _, e := range m.JoltLiquidityProviderClaims {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.SwapClaims) > 0 {
		for _, e := range m.SwapClaims {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AccumulationTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccumulationTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccumulationTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousAccumulationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PreviousAccumulationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisRewardState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisRewardState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisRewardState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulationTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulationTimes = append(m.AccumulationTimes, AccumulationTime{})
			if err := m.AccumulationTimes[len(m.AccumulationTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiRewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiRewardIndexes = append(m.MultiRewardIndexes, MultiRewardIndex{})
			if err := m.MultiRewardIndexes[len(m.MultiRewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPVGenesisRewardState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPVGenesisRewardState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPVGenesisRewardState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulationTimes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccumulationTimes = append(m.AccumulationTimes, AccumulationTime{})
			if err := m.AccumulationTimes[len(m.AccumulationTimes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccRewardIndexs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccRewardIndexs = append(m.AccRewardIndexs, SPVRewardAccIndex{})
			if err := m.AccRewardIndexs[len(m.AccRewardIndexs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpvInvestors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpvInvestors = append(m.SpvInvestors, &SPVGenRewardInvestorState{})
			if err := m.SpvInvestors[len(m.SpvInvestors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPVGenRewardInvestorState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPVGenRewardInvestorState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPVGenRewardInvestorState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types1.Coin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltSupplyRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoltSupplyRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltBorrowRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoltBorrowRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpvRewardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpvRewardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltLiquidityProviderClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoltLiquidityProviderClaims = append(m.JoltLiquidityProviderClaims, JoltLiquidityProviderClaim{})
			if err := m.JoltLiquidityProviderClaims[len(m.JoltLiquidityProviderClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapClaims = append(m.SwapClaims, SwapClaim{})
			if err := m.SwapClaims[len(m.SwapClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
