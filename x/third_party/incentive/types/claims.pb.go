// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/incentive/v1beta1/claims.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// BaseClaim is a claim with a single reward coin types
type BaseClaim struct {
	Owner  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Reward types.Coin                                    `protobuf:"bytes,2,opt,name=reward,proto3" json:"reward"`
}

func (m *BaseClaim) Reset()         { *m = BaseClaim{} }
func (m *BaseClaim) String() string { return proto.CompactTextString(m) }
func (*BaseClaim) ProtoMessage()    {}
func (*BaseClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{0}
}
func (m *BaseClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseClaim.Merge(m, src)
}
func (m *BaseClaim) XXX_Size() int {
	return m.Size()
}
func (m *BaseClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseClaim.DiscardUnknown(m)
}

var xxx_messageInfo_BaseClaim proto.InternalMessageInfo

// BaseMultiClaim is a claim with multiple reward coin types
type BaseMultiClaim struct {
	Owner  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=owner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner,omitempty"`
	Reward github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,2,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reward"`
}

func (m *BaseMultiClaim) Reset()         { *m = BaseMultiClaim{} }
func (m *BaseMultiClaim) String() string { return proto.CompactTextString(m) }
func (*BaseMultiClaim) ProtoMessage()    {}
func (*BaseMultiClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{1}
}
func (m *BaseMultiClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseMultiClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseMultiClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseMultiClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseMultiClaim.Merge(m, src)
}
func (m *BaseMultiClaim) XXX_Size() int {
	return m.Size()
}
func (m *BaseMultiClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseMultiClaim.DiscardUnknown(m)
}

var xxx_messageInfo_BaseMultiClaim proto.InternalMessageInfo

// RewardIndex stores reward accumulation information
type RewardIndex struct {
	CollateralType string                                 `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty"`
	RewardFactor   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=reward_factor,json=rewardFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reward_factor"`
}

func (m *RewardIndex) Reset()         { *m = RewardIndex{} }
func (m *RewardIndex) String() string { return proto.CompactTextString(m) }
func (*RewardIndex) ProtoMessage()    {}
func (*RewardIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{2}
}
func (m *RewardIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardIndex.Merge(m, src)
}
func (m *RewardIndex) XXX_Size() int {
	return m.Size()
}
func (m *RewardIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardIndex.DiscardUnknown(m)
}

var xxx_messageInfo_RewardIndex proto.InternalMessageInfo

// RewardIndexesProto defines a Protobuf wrapper around a RewardIndexes slice
type RewardIndexesProto struct {
	RewardIndexes RewardIndexes `protobuf:"bytes,1,rep,name=reward_indexes,json=rewardIndexes,proto3,castrepeated=RewardIndexes" json:"reward_indexes"`
}

func (m *RewardIndexesProto) Reset()         { *m = RewardIndexesProto{} }
func (m *RewardIndexesProto) String() string { return proto.CompactTextString(m) }
func (*RewardIndexesProto) ProtoMessage()    {}
func (*RewardIndexesProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{3}
}
func (m *RewardIndexesProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardIndexesProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardIndexesProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardIndexesProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardIndexesProto.Merge(m, src)
}
func (m *RewardIndexesProto) XXX_Size() int {
	return m.Size()
}
func (m *RewardIndexesProto) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardIndexesProto.DiscardUnknown(m)
}

var xxx_messageInfo_RewardIndexesProto proto.InternalMessageInfo

// MultiRewardIndex stores reward accumulation information on multiple reward types
type MultiRewardIndex struct {
	CollateralType string        `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty"`
	RewardIndexes  RewardIndexes `protobuf:"bytes,2,rep,name=reward_indexes,json=rewardIndexes,proto3,castrepeated=RewardIndexes" json:"reward_indexes"`
}

func (m *MultiRewardIndex) Reset()         { *m = MultiRewardIndex{} }
func (m *MultiRewardIndex) String() string { return proto.CompactTextString(m) }
func (*MultiRewardIndex) ProtoMessage()    {}
func (*MultiRewardIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{4}
}
func (m *MultiRewardIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiRewardIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiRewardIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiRewardIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiRewardIndex.Merge(m, src)
}
func (m *MultiRewardIndex) XXX_Size() int {
	return m.Size()
}
func (m *MultiRewardIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiRewardIndex.DiscardUnknown(m)
}

var xxx_messageInfo_MultiRewardIndex proto.InternalMessageInfo

// MultiRewardIndexesProto defines a Protobuf wrapper around a MultiRewardIndexes slice
type MultiRewardIndexesProto struct {
	MultiRewardIndexes MultiRewardIndexes `protobuf:"bytes,1,rep,name=multi_reward_indexes,json=multiRewardIndexes,proto3,castrepeated=MultiRewardIndexes" json:"multi_reward_indexes"`
}

func (m *MultiRewardIndexesProto) Reset()         { *m = MultiRewardIndexesProto{} }
func (m *MultiRewardIndexesProto) String() string { return proto.CompactTextString(m) }
func (*MultiRewardIndexesProto) ProtoMessage()    {}
func (*MultiRewardIndexesProto) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{5}
}
func (m *MultiRewardIndexesProto) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiRewardIndexesProto) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiRewardIndexesProto.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiRewardIndexesProto) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiRewardIndexesProto.Merge(m, src)
}
func (m *MultiRewardIndexesProto) XXX_Size() int {
	return m.Size()
}
func (m *MultiRewardIndexesProto) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiRewardIndexesProto.DiscardUnknown(m)
}

var xxx_messageInfo_MultiRewardIndexesProto proto.InternalMessageInfo

// JoltLiquidityProviderClaim stores the jolt liquidity provider rewards that can be claimed by owner
type JoltLiquidityProviderClaim struct {
	BaseMultiClaim      `protobuf:"bytes,1,opt,name=base_claim,json=baseClaim,proto3,embedded=base_claim" json:"base_claim"`
	SupplyRewardIndexes MultiRewardIndexes `protobuf:"bytes,2,rep,name=supply_reward_indexes,json=supplyRewardIndexes,proto3,castrepeated=MultiRewardIndexes" json:"supply_reward_indexes"`
	BorrowRewardIndexes MultiRewardIndexes `protobuf:"bytes,3,rep,name=borrow_reward_indexes,json=borrowRewardIndexes,proto3,castrepeated=MultiRewardIndexes" json:"borrow_reward_indexes"`
}

func (m *JoltLiquidityProviderClaim) Reset()         { *m = JoltLiquidityProviderClaim{} }
func (m *JoltLiquidityProviderClaim) String() string { return proto.CompactTextString(m) }
func (*JoltLiquidityProviderClaim) ProtoMessage()    {}
func (*JoltLiquidityProviderClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{6}
}
func (m *JoltLiquidityProviderClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *JoltLiquidityProviderClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_JoltLiquidityProviderClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *JoltLiquidityProviderClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoltLiquidityProviderClaim.Merge(m, src)
}
func (m *JoltLiquidityProviderClaim) XXX_Size() int {
	return m.Size()
}
func (m *JoltLiquidityProviderClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_JoltLiquidityProviderClaim.DiscardUnknown(m)
}

var xxx_messageInfo_JoltLiquidityProviderClaim proto.InternalMessageInfo

// SwapClaim stores the swap rewards that can be claimed by owner
type SwapClaim struct {
	BaseMultiClaim `protobuf:"bytes,1,opt,name=base_claim,json=baseClaim,proto3,embedded=base_claim" json:"base_claim"`
	RewardIndexes  MultiRewardIndexes `protobuf:"bytes,2,rep,name=reward_indexes,json=rewardIndexes,proto3,castrepeated=MultiRewardIndexes" json:"reward_indexes"`
}

func (m *SwapClaim) Reset()         { *m = SwapClaim{} }
func (m *SwapClaim) String() string { return proto.CompactTextString(m) }
func (*SwapClaim) ProtoMessage()    {}
func (*SwapClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{7}
}
func (m *SwapClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapClaim.Merge(m, src)
}
func (m *SwapClaim) XXX_Size() int {
	return m.Size()
}
func (m *SwapClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapClaim.DiscardUnknown(m)
}

var xxx_messageInfo_SwapClaim proto.InternalMessageInfo

// SPVClaim stores the swap rewards that can be claimed by owner
// fixme this is the incorrect message
type SPVClaim struct {
	LinkedNftId    string                                   `protobuf:"bytes,1,opt,name=linked_nft_id,json=linkedNftId,proto3" json:"linked_nft_id,omitempty"`
	PaymentTime    time.Time                                `protobuf:"bytes,2,opt,name=payment_time,json=paymentTime,proto3,stdtime" json:"payment_time"`
	PaymentAmount  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=payment_amount,json=paymentAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"payment_amount"`
	BorrowedAmount types.Coin                               `protobuf:"bytes,4,opt,name=borrowed_amount,json=borrowedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"borrowed_amount"`
}

func (m *SPVClaim) Reset()         { *m = SPVClaim{} }
func (m *SPVClaim) String() string { return proto.CompactTextString(m) }
func (*SPVClaim) ProtoMessage()    {}
func (*SPVClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{8}
}
func (m *SPVClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPVClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPVClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPVClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPVClaim.Merge(m, src)
}
func (m *SPVClaim) XXX_Size() int {
	return m.Size()
}
func (m *SPVClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_SPVClaim.DiscardUnknown(m)
}

var xxx_messageInfo_SPVClaim proto.InternalMessageInfo

type SPVRewardAccTokens struct {
	PaymentAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=payment_amount,json=paymentAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"payment_amount"`
}

func (m *SPVRewardAccTokens) Reset()         { *m = SPVRewardAccTokens{} }
func (m *SPVRewardAccTokens) String() string { return proto.CompactTextString(m) }
func (*SPVRewardAccTokens) ProtoMessage()    {}
func (*SPVRewardAccTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{9}
}
func (m *SPVRewardAccTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPVRewardAccTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPVRewardAccTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPVRewardAccTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPVRewardAccTokens.Merge(m, src)
}
func (m *SPVRewardAccTokens) XXX_Size() int {
	return m.Size()
}
func (m *SPVRewardAccTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_SPVRewardAccTokens.DiscardUnknown(m)
}

var xxx_messageInfo_SPVRewardAccTokens proto.InternalMessageInfo

type SPVRewardAccIndex struct {
	CollateralType string             `protobuf:"bytes,1,opt,name=collateral_type,json=collateralType,proto3" json:"collateral_type,omitempty"`
	AccReward      SPVRewardAccTokens `protobuf:"bytes,2,opt,name=acc_reward,json=accReward,proto3,castrepeated=SPVRewardAccTokens" json:"acc_reward"`
}

func (m *SPVRewardAccIndex) Reset()         { *m = SPVRewardAccIndex{} }
func (m *SPVRewardAccIndex) String() string { return proto.CompactTextString(m) }
func (*SPVRewardAccIndex) ProtoMessage()    {}
func (*SPVRewardAccIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{10}
}
func (m *SPVRewardAccIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPVRewardAccIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPVRewardAccIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPVRewardAccIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPVRewardAccIndex.Merge(m, src)
}
func (m *SPVRewardAccIndex) XXX_Size() int {
	return m.Size()
}
func (m *SPVRewardAccIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_SPVRewardAccIndex.DiscardUnknown(m)
}

var xxx_messageInfo_SPVRewardAccIndex proto.InternalMessageInfo

// SPVIncentiveClaim stores the swap rewards that can be claimed by owner
type SPVIncentiveClaim struct {
	PaymentAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=payment_amount,json=paymentAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"payment_amount"`
}

func (m *SPVIncentiveClaim) Reset()         { *m = SPVIncentiveClaim{} }
func (m *SPVIncentiveClaim) String() string { return proto.CompactTextString(m) }
func (*SPVIncentiveClaim) ProtoMessage()    {}
func (*SPVIncentiveClaim) Descriptor() ([]byte, []int) {
	return fileDescriptor_c209f06838f9cf07, []int{11}
}
func (m *SPVIncentiveClaim) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SPVIncentiveClaim) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SPVIncentiveClaim.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SPVIncentiveClaim) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPVIncentiveClaim.Merge(m, src)
}
func (m *SPVIncentiveClaim) XXX_Size() int {
	return m.Size()
}
func (m *SPVIncentiveClaim) XXX_DiscardUnknown() {
	xxx_messageInfo_SPVIncentiveClaim.DiscardUnknown(m)
}

var xxx_messageInfo_SPVIncentiveClaim proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BaseClaim)(nil), "joltify.third_party.incentive.v1beta1.BaseClaim")
	proto.RegisterType((*BaseMultiClaim)(nil), "joltify.third_party.incentive.v1beta1.BaseMultiClaim")
	proto.RegisterType((*RewardIndex)(nil), "joltify.third_party.incentive.v1beta1.RewardIndex")
	proto.RegisterType((*RewardIndexesProto)(nil), "joltify.third_party.incentive.v1beta1.RewardIndexesProto")
	proto.RegisterType((*MultiRewardIndex)(nil), "joltify.third_party.incentive.v1beta1.MultiRewardIndex")
	proto.RegisterType((*MultiRewardIndexesProto)(nil), "joltify.third_party.incentive.v1beta1.MultiRewardIndexesProto")
	proto.RegisterType((*JoltLiquidityProviderClaim)(nil), "joltify.third_party.incentive.v1beta1.JoltLiquidityProviderClaim")
	proto.RegisterType((*SwapClaim)(nil), "joltify.third_party.incentive.v1beta1.SwapClaim")
	proto.RegisterType((*SPVClaim)(nil), "joltify.third_party.incentive.v1beta1.SPVClaim")
	proto.RegisterType((*SPVRewardAccTokens)(nil), "joltify.third_party.incentive.v1beta1.SPVRewardAccTokens")
	proto.RegisterType((*SPVRewardAccIndex)(nil), "joltify.third_party.incentive.v1beta1.SPVRewardAccIndex")
	proto.RegisterType((*SPVIncentiveClaim)(nil), "joltify.third_party.incentive.v1beta1.SPVIncentiveClaim")
}

func init() {
	proto.RegisterFile("joltify/third_party/incentive/v1beta1/claims.proto", fileDescriptor_c209f06838f9cf07)
}

var fileDescriptor_c209f06838f9cf07 = []byte{
	// 857 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x96, 0xcf, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0x33, 0xed, 0xee, 0x6a, 0x33, 0xf9, 0xb1, 0xe0, 0xdd, 0x15, 0xdd, 0x1c, 0x9c, 0x95,
	0x25, 0xa0, 0x97, 0xd8, 0x6c, 0x10, 0x5a, 0xc1, 0x2d, 0x5e, 0x04, 0x5b, 0x04, 0x28, 0x72, 0xaa,
	0x3d, 0x70, 0xc0, 0x9a, 0x8c, 0x27, 0xe9, 0x50, 0xdb, 0x63, 0xec, 0x49, 0x53, 0x73, 0xe7, 0x87,
	0xc4, 0xa5, 0xe2, 0xca, 0x89, 0x2b, 0x12, 0x42, 0x42, 0xfd, 0x23, 0x2a, 0x4e, 0x15, 0x27, 0xc4,
	0x21, 0x2d, 0xed, 0x95, 0x13, 0x47, 0x4e, 0xc8, 0x33, 0xe3, 0xd6, 0x69, 0x52, 0x48, 0x11, 0xe9,
	0x9e, 0xda, 0x79, 0xe3, 0xf7, 0xbe, 0x9f, 0xf9, 0xce, 0x9b, 0x99, 0xc0, 0xf6, 0x27, 0xcc, 0xe7,
	0x74, 0x90, 0x5a, 0x7c, 0x8b, 0xc6, 0x9e, 0x1b, 0xa1, 0x98, 0xa7, 0x16, 0x0d, 0x31, 0x09, 0x39,
	0xdd, 0x21, 0xd6, 0xce, 0xa3, 0x3e, 0xe1, 0xe8, 0x91, 0x85, 0x7d, 0x44, 0x83, 0xc4, 0x8c, 0x62,
	0xc6, 0x99, 0xf6, 0xb2, 0xca, 0x31, 0x0b, 0x39, 0xe6, 0x59, 0x8e, 0xa9, 0x72, 0x1a, 0xf7, 0x86,
	0x6c, 0xc8, 0x44, 0x86, 0x95, 0xfd, 0x27, 0x93, 0x1b, 0xcd, 0x21, 0x63, 0x43, 0x9f, 0x58, 0x62,
	0xd4, 0x1f, 0x0d, 0x2c, 0x4e, 0x03, 0x92, 0x70, 0x14, 0x44, 0xea, 0x83, 0x07, 0x98, 0x25, 0x01,
	0x4b, 0x5c, 0x99, 0x29, 0x07, 0x6a, 0x4a, 0x97, 0x23, 0xab, 0x8f, 0x92, 0x02, 0x1a, 0xa3, 0xa1,
	0x9c, 0x37, 0x7e, 0x04, 0xb0, 0x6c, 0xa3, 0x84, 0x3c, 0xc9, 0x68, 0xb5, 0x8f, 0xe1, 0x4d, 0x36,
	0x0e, 0x49, 0xbc, 0x06, 0x1e, 0x82, 0xf5, 0xaa, 0xfd, 0xf4, 0xaf, 0x49, 0xb3, 0x35, 0xa4, 0x7c,
	0x6b, 0xd4, 0x37, 0x31, 0x0b, 0x54, 0x65, 0xf5, 0xa7, 0x95, 0x78, 0xdb, 0x16, 0x4f, 0x23, 0x92,
	0x98, 0x1d, 0x8c, 0x3b, 0x9e, 0x17, 0x93, 0x24, 0xf9, 0x65, 0xbf, 0x75, 0x57, 0xe9, 0xab, 0x88,
	0x9d, 0x72, 0x92, 0x38, 0xb2, 0xac, 0xf6, 0x18, 0xde, 0x8a, 0xc9, 0x18, 0xc5, 0xde, 0xda, 0xca,
	0x43, 0xb0, 0x5e, 0x69, 0x3f, 0x30, 0xd5, 0xc7, 0x19, 0x5e, 0xee, 0x82, 0xf9, 0x84, 0xd1, 0xd0,
	0xbe, 0x71, 0x30, 0x69, 0x96, 0x1c, 0xf5, 0xf9, 0x5b, 0xe5, 0x9f, 0xf7, 0x5b, 0x37, 0x05, 0xa3,
	0x71, 0x0c, 0x60, 0x3d, 0x23, 0xfe, 0x60, 0xe4, 0x73, 0x7a, 0x3d, 0xd8, 0xb8, 0x80, 0xbd, 0xfa,
	0xcf, 0xd8, 0xaf, 0x65, 0xd8, 0xdf, 0x1f, 0x35, 0xd7, 0x17, 0xd0, 0xcf, 0x12, 0x92, 0x79, 0x4b,
	0xfc, 0x1a, 0xc0, 0x8a, 0x23, 0xa2, 0x1b, 0xa1, 0x47, 0x76, 0xb5, 0x57, 0xe1, 0x1d, 0xcc, 0x7c,
	0x1f, 0x71, 0x12, 0x23, 0xdf, 0xcd, 0x92, 0xc5, 0x4a, 0xcb, 0x4e, 0xfd, 0x3c, 0xbc, 0x99, 0x46,
	0x44, 0xeb, 0xc1, 0x9a, 0xac, 0xe6, 0x0e, 0x10, 0xe6, 0x2c, 0x16, 0x36, 0x57, 0x6d, 0x33, 0x83,
	0xfa, 0x6d, 0xd2, 0x7c, 0x65, 0x01, 0xa8, 0xb7, 0x09, 0x76, 0xaa, 0xb2, 0xc8, 0x3b, 0xa2, 0x86,
	0xf1, 0x05, 0x80, 0x5a, 0x81, 0x86, 0x24, 0x5d, 0xd1, 0xd2, 0x11, 0xac, 0x2b, 0x2d, 0x2a, 0xc3,
	0x6b, 0x40, 0x98, 0xd3, 0x36, 0x17, 0xea, 0x75, 0xb3, 0x50, 0xd2, 0xbe, 0xaf, 0x5c, 0xab, 0x4d,
	0xe9, 0x38, 0x6a, 0x31, 0x6a, 0x68, 0xfc, 0x00, 0xe0, 0x0b, 0x62, 0xd7, 0xff, 0x93, 0x37, 0xb3,
	0xbc, 0x2b, 0x4b, 0xe6, 0xfd, 0x0e, 0xc0, 0x97, 0x2e, 0xf2, 0xe6, 0xee, 0x7d, 0x0e, 0xe0, 0xbd,
	0x20, 0x9b, 0x73, 0xe7, 0x9a, 0xf8, 0x78, 0x41, 0xa8, 0x8b, 0xe5, 0xed, 0x86, 0x22, 0xd3, 0x66,
	0x85, 0x1d, 0x2d, 0x98, 0x89, 0x19, 0xdf, 0xae, 0xc2, 0xc6, 0x7b, 0xcc, 0xe7, 0xef, 0xd3, 0x4f,
	0x47, 0xd4, 0xa3, 0x3c, 0xed, 0xc6, 0x6c, 0x87, 0x7a, 0x24, 0xce, 0x4f, 0x16, 0xcc, 0x7a, 0xdc,
	0x15, 0x97, 0x99, 0x30, 0xb6, 0xd2, 0x7e, 0x63, 0x41, 0xb6, 0xe9, 0x43, 0x6a, 0xdf, 0xce, 0xc8,
	0x0e, 0x27, 0x4d, 0xe0, 0x94, 0xfb, 0x67, 0x17, 0xce, 0x97, 0x00, 0xde, 0x4f, 0x46, 0x51, 0xe4,
	0xa7, 0xee, 0xdc, 0xcd, 0x59, 0x8a, 0x0f, 0x77, 0xa5, 0xe2, 0x54, 0x50, 0x90, 0xf4, 0x59, 0x1c,
	0xb3, 0xf1, 0x45, 0x92, 0xd5, 0x25, 0x92, 0x48, 0xc5, 0xa9, 0x60, 0xf1, 0x22, 0xf8, 0x13, 0xc0,
	0x72, 0x6f, 0x8c, 0xa2, 0xeb, 0xd9, 0x8c, 0xcf, 0x2e, 0x39, 0x21, 0x4b, 0x59, 0xfa, 0xf4, 0x59,
	0x29, 0x2e, 0xfa, 0x8f, 0x15, 0x78, 0xbb, 0xd7, 0x7d, 0x26, 0x99, 0x0c, 0x58, 0xf3, 0x69, 0xb8,
	0x4d, 0x3c, 0x37, 0x1c, 0x70, 0x97, 0x7a, 0xea, 0x70, 0x57, 0x64, 0xf0, 0xc3, 0x01, 0xdf, 0xf0,
	0xb4, 0x77, 0x61, 0x35, 0x42, 0x69, 0x40, 0x42, 0xee, 0x66, 0x2f, 0xa3, 0x7a, 0x5b, 0x1a, 0xa6,
	0x7c, 0x36, 0xcd, 0xfc, 0xd9, 0x34, 0x37, 0xf3, 0x67, 0x53, 0x2e, 0x7f, 0xef, 0xa8, 0x09, 0x9c,
	0x8a, 0xca, 0xcc, 0xe6, 0xb4, 0x18, 0xd6, 0xf3, 0x42, 0x28, 0x60, 0xa3, 0x90, 0xab, 0xbd, 0xff,
	0x5f, 0xef, 0xfb, 0x9a, 0x92, 0xe8, 0x08, 0x05, 0x8d, 0xc3, 0x3b, 0xb2, 0x09, 0x88, 0x97, 0x8b,
	0xde, 0xf8, 0xb7, 0xb7, 0xf1, 0xea, 0xa2, 0xf5, 0x5c, 0x43, 0xaa, 0x16, 0xed, 0xfe, 0x0a, 0x40,
	0xad, 0xd7, 0x7d, 0x26, 0x77, 0xa7, 0x83, 0xf1, 0x26, 0xdb, 0x26, 0x61, 0x32, 0xc7, 0x0b, 0xb0,
	0x6c, 0x2f, 0x8c, 0x9f, 0x00, 0x7c, 0xb1, 0x88, 0x72, 0xc5, 0x1b, 0x9e, 0x43, 0x88, 0x30, 0x76,
	0xa7, 0x7e, 0x61, 0xbc, 0xb9, 0x60, 0xef, 0xce, 0x3a, 0x70, 0xde, 0xbd, 0xb3, 0x73, 0x4e, 0x19,
	0x61, 0x2c, 0x63, 0xc6, 0x37, 0x12, 0x7a, 0x23, 0x2f, 0x29, 0xfb, 0xf6, 0x39, 0xd8, 0x57, 0xd8,
	0x54, 0x7b, 0x70, 0xf0, 0xbb, 0x5e, 0x3a, 0x38, 0xd1, 0xc1, 0xe1, 0x89, 0x0e, 0x8e, 0x4f, 0x74,
	0xb0, 0x77, 0xaa, 0x97, 0x0e, 0x4f, 0xf5, 0xd2, 0xaf, 0xa7, 0x7a, 0xe9, 0xa3, 0xa7, 0x05, 0x05,
	0x65, 0x4f, 0x6b, 0x40, 0x43, 0x14, 0x62, 0x92, 0x8f, 0x5d, 0x9f, 0x84, 0x1e, 0x0d, 0x87, 0xd6,
	0xee, 0x25, 0x3f, 0x73, 0x05, 0x47, 0xff, 0x96, 0x38, 0x5c, 0xaf, 0xff, 0x1d, 0x00, 0x00, 0xff,
	0xff, 0xb5, 0x94, 0x5a, 0xa4, 0x14, 0x0b, 0x00, 0x00,
}

func (m *BaseClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClaims(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BaseMultiClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseMultiClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseMultiClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RewardFactor.Size()
		i -= size
		if _, err := m.RewardFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintClaims(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardIndexesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardIndexesProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardIndexesProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardIndexes) > 0 {
		for iNdEx := len(m.RewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MultiRewardIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiRewardIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiRewardIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardIndexes) > 0 {
		for iNdEx := len(m.RewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MultiRewardIndexesProto) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiRewardIndexesProto) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiRewardIndexesProto) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MultiRewardIndexes) > 0 {
		for iNdEx := len(m.MultiRewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultiRewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *JoltLiquidityProviderClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *JoltLiquidityProviderClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *JoltLiquidityProviderClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorrowRewardIndexes) > 0 {
		for iNdEx := len(m.BorrowRewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BorrowRewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SupplyRewardIndexes) > 0 {
		for iNdEx := len(m.SupplyRewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupplyRewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.BaseMultiClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClaims(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SwapClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardIndexes) > 0 {
		for iNdEx := len(m.RewardIndexes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardIndexes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.BaseMultiClaim.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClaims(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SPVClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPVClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPVClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BorrowedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClaims(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.PaymentAmount) > 0 {
		for iNdEx := len(m.PaymentAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PaymentTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PaymentTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintClaims(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if len(m.LinkedNftId) > 0 {
		i -= len(m.LinkedNftId)
		copy(dAtA[i:], m.LinkedNftId)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.LinkedNftId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SPVRewardAccTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPVRewardAccTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPVRewardAccTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentAmount) > 0 {
		for iNdEx := len(m.PaymentAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SPVRewardAccIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPVRewardAccIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPVRewardAccIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AccReward.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintClaims(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CollateralType) > 0 {
		i -= len(m.CollateralType)
		copy(dAtA[i:], m.CollateralType)
		i = encodeVarintClaims(dAtA, i, uint64(len(m.CollateralType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SPVIncentiveClaim) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SPVIncentiveClaim) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SPVIncentiveClaim) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentAmount) > 0 {
		for iNdEx := len(m.PaymentAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintClaims(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintClaims(dAtA []byte, offset int, v uint64) int {
	offset -= sovClaims(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	l = m.Reward.Size()
	n += 1 + l + sovClaims(uint64(l))
	return n
}

func (m *BaseMultiClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	return n
}

func (m *RewardIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	l = m.RewardFactor.Size()
	n += 1 + l + sovClaims(uint64(l))
	return n
}

func (m *RewardIndexesProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardIndexes) > 0 {
		for _, e := range m.RewardIndexes {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	return n
}

func (m *MultiRewardIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	if len(m.RewardIndexes) > 0 {
		for _, e := range m.RewardIndexes {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	return n
}

func (m *MultiRewardIndexesProto) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MultiRewardIndexes) > 0 {
		for _, e := range m.MultiRewardIndexes {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	return n
}

func (m *JoltLiquidityProviderClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseMultiClaim.Size()
	n += 1 + l + sovClaims(uint64(l))
	if len(m.SupplyRewardIndexes) > 0 {
		for _, e := range m.SupplyRewardIndexes {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	if len(m.BorrowRewardIndexes) > 0 {
		for _, e := range m.BorrowRewardIndexes {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	return n
}

func (m *SwapClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BaseMultiClaim.Size()
	n += 1 + l + sovClaims(uint64(l))
	if len(m.RewardIndexes) > 0 {
		for _, e := range m.RewardIndexes {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	return n
}

func (m *SPVClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LinkedNftId)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PaymentTime)
	n += 1 + l + sovClaims(uint64(l))
	if len(m.PaymentAmount) > 0 {
		for _, e := range m.PaymentAmount {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	l = m.BorrowedAmount.Size()
	n += 1 + l + sovClaims(uint64(l))
	return n
}

func (m *SPVRewardAccTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAmount) > 0 {
		for _, e := range m.PaymentAmount {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	return n
}

func (m *SPVRewardAccIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CollateralType)
	if l > 0 {
		n += 1 + l + sovClaims(uint64(l))
	}
	l = m.AccReward.Size()
	n += 1 + l + sovClaims(uint64(l))
	return n
}

func (m *SPVIncentiveClaim) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PaymentAmount) > 0 {
		for _, e := range m.PaymentAmount {
			l = e.Size()
			n += 1 + l + sovClaims(uint64(l))
		}
	}
	return n
}

func sovClaims(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClaims(x uint64) (n int) {
	return sovClaims(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BaseMultiClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseMultiClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseMultiClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types.Coin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardFactor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardIndexesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardIndexesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardIndexesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardIndexes = append(m.RewardIndexes, RewardIndex{})
			if err := m.RewardIndexes[len(m.RewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiRewardIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiRewardIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiRewardIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardIndexes = append(m.RewardIndexes, RewardIndex{})
			if err := m.RewardIndexes[len(m.RewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiRewardIndexesProto) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiRewardIndexesProto: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiRewardIndexesProto: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiRewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiRewardIndexes = append(m.MultiRewardIndexes, MultiRewardIndex{})
			if err := m.MultiRewardIndexes[len(m.MultiRewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *JoltLiquidityProviderClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: JoltLiquidityProviderClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: JoltLiquidityProviderClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseMultiClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseMultiClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyRewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplyRewardIndexes = append(m.SupplyRewardIndexes, MultiRewardIndex{})
			if err := m.SupplyRewardIndexes[len(m.SupplyRewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowRewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowRewardIndexes = append(m.BorrowRewardIndexes, MultiRewardIndex{})
			if err := m.BorrowRewardIndexes[len(m.BorrowRewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseMultiClaim", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseMultiClaim.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardIndexes = append(m.RewardIndexes, MultiRewardIndex{})
			if err := m.RewardIndexes[len(m.RewardIndexes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPVClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPVClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPVClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedNftId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkedNftId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PaymentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAmount = append(m.PaymentAmount, types.Coin{})
			if err := m.PaymentAmount[len(m.PaymentAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPVRewardAccTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPVRewardAccTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPVRewardAccTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAmount = append(m.PaymentAmount, types.Coin{})
			if err := m.PaymentAmount[len(m.PaymentAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPVRewardAccIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPVRewardAccIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPVRewardAccIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollateralType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollateralType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccReward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccReward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SPVIncentiveClaim) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SPVIncentiveClaim: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SPVIncentiveClaim: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthClaims
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthClaims
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAmount = append(m.PaymentAmount, types.Coin{})
			if err := m.PaymentAmount[len(m.PaymentAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClaims(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClaims
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClaims(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClaims
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClaims
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClaims
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClaims
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClaims
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClaims        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClaims          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClaims = fmt.Errorf("proto: unexpected end of group")
)
