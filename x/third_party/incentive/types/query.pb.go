// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/incentive/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83b0bbb3ec0d7db, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83b0bbb3ec0d7db, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryRewardsRequest is the request type for the Query/Rewards RPC method.
type QueryRewardsRequest struct {
	// owner is the address of the user to query rewards for.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// reward_type is the type of reward to query rewards for, e.g. hard, earn,
	// swap.
	RewardType string `protobuf:"bytes,2,opt,name=reward_type,json=rewardType,proto3" json:"reward_type,omitempty"`
	// unsynchronized is a flag to query rewards that are not simulated for reward
	// synchronized for the current block.
	Unsynchronized bool `protobuf:"varint,3,opt,name=unsynchronized,proto3" json:"unsynchronized,omitempty"`
}

func (m *QueryRewardsRequest) Reset()         { *m = QueryRewardsRequest{} }
func (m *QueryRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsRequest) ProtoMessage()    {}
func (*QueryRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83b0bbb3ec0d7db, []int{2}
}
func (m *QueryRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsRequest.Merge(m, src)
}
func (m *QueryRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsRequest proto.InternalMessageInfo

func (m *QueryRewardsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryRewardsRequest) GetRewardType() string {
	if m != nil {
		return m.RewardType
	}
	return ""
}

func (m *QueryRewardsRequest) GetUnsynchronized() bool {
	if m != nil {
		return m.Unsynchronized
	}
	return false
}

// QueryRewardsResponse is the response type for the Query/Rewards RPC method.
type QueryRewardsResponse struct {
	JoltLiquidityProviderClaims JoltLiquidityProviderClaims `protobuf:"bytes,1,rep,name=jolt_liquidity_provider_claims,json=joltLiquidityProviderClaims,proto3,castrepeated=JoltLiquidityProviderClaims" json:"jolt_liquidity_provider_claims"`
	SwapClaims                  SwapClaims                  `protobuf:"bytes,4,rep,name=swap_claims,json=swapClaims,proto3,castrepeated=SwapClaims" json:"swap_claims"`
}

func (m *QueryRewardsResponse) Reset()         { *m = QueryRewardsResponse{} }
func (m *QueryRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsResponse) ProtoMessage()    {}
func (*QueryRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83b0bbb3ec0d7db, []int{3}
}
func (m *QueryRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsResponse.Merge(m, src)
}
func (m *QueryRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsResponse proto.InternalMessageInfo

func (m *QueryRewardsResponse) GetJoltLiquidityProviderClaims() JoltLiquidityProviderClaims {
	if m != nil {
		return m.JoltLiquidityProviderClaims
	}
	return nil
}

func (m *QueryRewardsResponse) GetSwapClaims() SwapClaims {
	if m != nil {
		return m.SwapClaims
	}
	return nil
}

// QueryRewardFactorsRequest is the request type for the Query/RewardFactors RPC method.
type QueryRewardFactorsRequest struct {
}

func (m *QueryRewardFactorsRequest) Reset()         { *m = QueryRewardFactorsRequest{} }
func (m *QueryRewardFactorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardFactorsRequest) ProtoMessage()    {}
func (*QueryRewardFactorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83b0bbb3ec0d7db, []int{4}
}
func (m *QueryRewardFactorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardFactorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardFactorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardFactorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardFactorsRequest.Merge(m, src)
}
func (m *QueryRewardFactorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardFactorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardFactorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardFactorsRequest proto.InternalMessageInfo

// QueryRewardFactorsResponse is the response type for the Query/RewardFactors RPC method.
type QueryRewardFactorsResponse struct {
	JoltSupplyRewardFactors MultiRewardIndexes `protobuf:"bytes,1,rep,name=jolt_supply_reward_factors,json=joltSupplyRewardFactors,proto3,castrepeated=MultiRewardIndexes" json:"jolt_supply_reward_factors"`
	JoltBorrowRewardFactors MultiRewardIndexes `protobuf:"bytes,2,rep,name=jolt_borrow_reward_factors,json=joltBorrowRewardFactors,proto3,castrepeated=MultiRewardIndexes" json:"jolt_borrow_reward_factors"`
	SwapRewardFactors       MultiRewardIndexes `protobuf:"bytes,4,rep,name=swap_reward_factors,json=swapRewardFactors,proto3,castrepeated=MultiRewardIndexes" json:"swap_reward_factors"`
}

func (m *QueryRewardFactorsResponse) Reset()         { *m = QueryRewardFactorsResponse{} }
func (m *QueryRewardFactorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardFactorsResponse) ProtoMessage()    {}
func (*QueryRewardFactorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a83b0bbb3ec0d7db, []int{5}
}
func (m *QueryRewardFactorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardFactorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardFactorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardFactorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardFactorsResponse.Merge(m, src)
}
func (m *QueryRewardFactorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardFactorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardFactorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardFactorsResponse proto.InternalMessageInfo

func (m *QueryRewardFactorsResponse) GetJoltSupplyRewardFactors() MultiRewardIndexes {
	if m != nil {
		return m.JoltSupplyRewardFactors
	}
	return nil
}

func (m *QueryRewardFactorsResponse) GetJoltBorrowRewardFactors() MultiRewardIndexes {
	if m != nil {
		return m.JoltBorrowRewardFactors
	}
	return nil
}

func (m *QueryRewardFactorsResponse) GetSwapRewardFactors() MultiRewardIndexes {
	if m != nil {
		return m.SwapRewardFactors
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "joltify.third_party.incentive.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "joltify.third_party.incentive.v1.QueryParamsResponse")
	proto.RegisterType((*QueryRewardsRequest)(nil), "joltify.third_party.incentive.v1.QueryRewardsRequest")
	proto.RegisterType((*QueryRewardsResponse)(nil), "joltify.third_party.incentive.v1.QueryRewardsResponse")
	proto.RegisterType((*QueryRewardFactorsRequest)(nil), "joltify.third_party.incentive.v1.QueryRewardFactorsRequest")
	proto.RegisterType((*QueryRewardFactorsResponse)(nil), "joltify.third_party.incentive.v1.QueryRewardFactorsResponse")
}

func init() {
	proto.RegisterFile("joltify/third_party/incentive/v1/query.proto", fileDescriptor_a83b0bbb3ec0d7db)
}

var fileDescriptor_a83b0bbb3ec0d7db = []byte{
	// 665 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xc7, 0xe3, 0x34, 0xed, 0xef, 0xc7, 0x45, 0x20, 0x71, 0x8d, 0x44, 0x70, 0x91, 0x1b, 0x05,
	0x09, 0x45, 0x82, 0xda, 0x34, 0xd0, 0x32, 0x50, 0x96, 0x20, 0x55, 0x80, 0x40, 0x2a, 0x2e, 0x13,
	0x12, 0x32, 0x97, 0xf8, 0xea, 0x5e, 0xe5, 0xde, 0xb9, 0xe7, 0x73, 0x52, 0x33, 0x30, 0xb0, 0xb2,
	0x20, 0xf1, 0x0a, 0x58, 0x18, 0x10, 0x03, 0x0b, 0x12, 0x2f, 0xa1, 0x6c, 0x95, 0x58, 0x98, 0x00,
	0xb5, 0xbc, 0x10, 0xe4, 0xf3, 0x39, 0xd4, 0x81, 0xca, 0x09, 0x52, 0xb7, 0xf8, 0xf9, 0xf7, 0xfd,
	0x3c, 0xcf, 0xdd, 0x3d, 0x01, 0x57, 0xb6, 0x98, 0x2f, 0xc8, 0x46, 0x6c, 0x89, 0x4d, 0xc2, 0x5d,
	0x27, 0x40, 0x5c, 0xc4, 0x16, 0xa1, 0x3d, 0x4c, 0x05, 0xe9, 0x63, 0xab, 0xbf, 0x68, 0xed, 0x44,
	0x98, 0xc7, 0x66, 0xc0, 0x99, 0x60, 0xb0, 0xa1, 0xa2, 0xcd, 0x23, 0xd1, 0xe6, 0x30, 0xda, 0xec,
	0x2f, 0xea, 0x35, 0x8f, 0x79, 0x4c, 0x06, 0x5b, 0xc9, 0xaf, 0x34, 0x4f, 0xbf, 0xe0, 0x31, 0xe6,
	0xf9, 0xd8, 0x42, 0x01, 0xb1, 0x10, 0xa5, 0x4c, 0x20, 0x41, 0x18, 0x0d, 0x95, 0x77, 0xa1, 0x90,
	0xa1, 0xe7, 0x23, 0xb2, 0x3d, 0x7e, 0x78, 0x80, 0x38, 0xca, 0xc2, 0x9b, 0x35, 0x00, 0x1f, 0x26,
	0x2d, 0xac, 0x49, 0xa3, 0x8d, 0x77, 0x22, 0x1c, 0x8a, 0xe6, 0x13, 0x30, 0x9b, 0xb3, 0x86, 0x01,
	0xa3, 0x21, 0x86, 0xab, 0x60, 0x26, 0x4d, 0xae, 0x6b, 0x0d, 0xad, 0x55, 0x6d, 0xb7, 0xcc, 0xa2,
	0x8e, 0xcd, 0xb4, 0x42, 0xa7, 0xb2, 0xf7, 0x6d, 0xbe, 0x64, 0xab, 0xec, 0xa6, 0x50, 0xe5, 0x6d,
	0x3c, 0x40, 0xdc, 0xcd, 0x54, 0x61, 0x0d, 0x4c, 0xb3, 0x01, 0xc5, 0x5c, 0x56, 0x3f, 0x65, 0xa7,
	0x1f, 0x70, 0x1e, 0x54, 0xb9, 0x8c, 0x73, 0x44, 0x1c, 0xe0, 0x7a, 0x59, 0xfa, 0x40, 0x6a, 0x7a,
	0x14, 0x07, 0x18, 0x5e, 0x02, 0x67, 0x22, 0x1a, 0xc6, 0xb4, 0xb7, 0xc9, 0x19, 0x25, 0xcf, 0xb0,
	0x5b, 0x9f, 0x6a, 0x68, 0xad, 0xff, 0xed, 0x11, 0x6b, 0xf3, 0x4d, 0x19, 0xd4, 0xf2, 0xb2, 0xaa,
	0xad, 0xb7, 0x1a, 0x30, 0x92, 0x46, 0x1c, 0x9f, 0xec, 0x44, 0xc4, 0x25, 0x22, 0x76, 0x02, 0xce,
	0xfa, 0xc4, 0xc5, 0xdc, 0x49, 0x67, 0x5b, 0xd7, 0x1a, 0x53, 0xad, 0x6a, 0x7b, 0xa5, 0xb8, 0xdf,
	0x7b, 0xcc, 0x17, 0xf7, 0xb3, 0x32, 0x6b, 0xaa, 0xca, 0xed, 0xa4, 0x48, 0xe7, 0x62, 0x32, 0x83,
	0x77, 0xdf, 0xe7, 0xe7, 0x8e, 0x8f, 0x09, 0xed, 0xb9, 0xad, 0xe3, 0x9d, 0xf0, 0x29, 0xa8, 0x86,
	0x03, 0x14, 0x64, 0x50, 0x15, 0x09, 0x75, 0xb9, 0x18, 0x6a, 0x7d, 0x80, 0x82, 0x94, 0x01, 0x2a,
	0x06, 0x30, 0x34, 0x85, 0x36, 0x08, 0x87, 0xbf, 0x9b, 0x73, 0xe0, 0xfc, 0x91, 0x11, 0xad, 0xa2,
	0x9e, 0x60, 0x7c, 0x78, 0x2b, 0x3e, 0x4d, 0x01, 0xfd, 0x6f, 0x5e, 0x35, 0xc6, 0x97, 0x1a, 0xd0,
	0xe5, 0x18, 0xc3, 0x28, 0x08, 0xfc, 0xd8, 0x51, 0xa7, 0xb6, 0x91, 0x86, 0xa9, 0x11, 0xb6, 0x8b,
	0x69, 0x1f, 0x44, 0xbe, 0x20, 0xa9, 0xc4, 0x5d, 0xea, 0xe2, 0xdd, 0x8e, 0xae, 0xa0, 0xe1, 0xa8,
	0x07, 0x87, 0xf6, 0xb9, 0xa4, 0xdc, 0xba, 0x14, 0xcc, 0x51, 0xfd, 0xa6, 0xe9, 0x32, 0xce, 0xd9,
	0x60, 0x94, 0xa6, 0x7c, 0x72, 0x34, 0x1d, 0x29, 0x98, 0xa7, 0x79, 0x0e, 0x66, 0xe5, 0xc9, 0x8d,
	0x50, 0x54, 0x4e, 0x84, 0xe2, 0x6c, 0x22, 0x95, 0xd3, 0x6f, 0x7f, 0xac, 0x80, 0x69, 0x79, 0x74,
	0xf0, 0xbd, 0x06, 0x66, 0xd2, 0x47, 0x09, 0xaf, 0x17, 0xeb, 0xfe, 0xb9, 0x1b, 0xf4, 0xa5, 0x09,
	0xb3, 0xd2, 0xdb, 0xd1, 0x5c, 0x7a, 0xf1, 0xe5, 0xe7, 0xeb, 0xb2, 0x05, 0x17, 0xac, 0xa2, 0x05,
	0xd5, 0xc5, 0x02, 0x65, 0x5b, 0x0a, 0x7e, 0xd0, 0xc0, 0x7f, 0xea, 0xbd, 0xc2, 0x71, 0x95, 0xf3,
	0x6b, 0x45, 0x5f, 0x9e, 0x34, 0x4d, 0x11, 0x2f, 0x4b, 0xe2, 0xab, 0xd0, 0x1c, 0x93, 0x98, 0x2b,
	0xcc, 0xcf, 0x1a, 0x38, 0x9d, 0x3f, 0xfd, 0x9b, 0x13, 0x11, 0xe4, 0x5f, 0x9d, 0xbe, 0xf2, 0x6f,
	0xc9, 0xaa, 0x89, 0x5b, 0xb2, 0x89, 0x1b, 0x70, 0x69, 0xa2, 0x26, 0xb2, 0x0b, 0xda, 0xe9, 0xee,
	0x1d, 0x18, 0xda, 0xfe, 0x81, 0xa1, 0xfd, 0x38, 0x30, 0xb4, 0x57, 0x87, 0x46, 0x69, 0xff, 0xd0,
	0x28, 0x7d, 0x3d, 0x34, 0x4a, 0x8f, 0xef, 0x78, 0x44, 0x6c, 0x46, 0x5d, 0xb3, 0xc7, 0xb6, 0xb3,
	0xd2, 0x0b, 0x1b, 0x84, 0x22, 0xda, 0xc3, 0xd9, 0xb7, 0xe3, 0x63, 0xea, 0x12, 0xea, 0x59, 0xbb,
	0xc7, 0x88, 0x26, 0x0b, 0x3d, 0xec, 0xce, 0xc8, 0x7f, 0xa2, 0x6b, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x03, 0xf6, 0x7c, 0x82, 0x6d, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries module params.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Rewards queries reward information for a given user.
	Rewards(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error)
	// Rewards queries the reward factors.
	RewardFactors(ctx context.Context, in *QueryRewardFactorsRequest, opts ...grpc.CallOption) (*QueryRewardFactorsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.incentive.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Rewards(ctx context.Context, in *QueryRewardsRequest, opts ...grpc.CallOption) (*QueryRewardsResponse, error) {
	out := new(QueryRewardsResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.incentive.v1.Query/Rewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardFactors(ctx context.Context, in *QueryRewardFactorsRequest, opts ...grpc.CallOption) (*QueryRewardFactorsResponse, error) {
	out := new(QueryRewardFactorsResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.incentive.v1.Query/RewardFactors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries module params.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Rewards queries reward information for a given user.
	Rewards(context.Context, *QueryRewardsRequest) (*QueryRewardsResponse, error)
	// Rewards queries the reward factors.
	RewardFactors(context.Context, *QueryRewardFactorsRequest) (*QueryRewardFactorsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Rewards(ctx context.Context, req *QueryRewardsRequest) (*QueryRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rewards not implemented")
}
func (*UnimplementedQueryServer) RewardFactors(ctx context.Context, req *QueryRewardFactorsRequest) (*QueryRewardFactorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardFactors not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.incentive.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Rewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Rewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.incentive.v1.Query/Rewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Rewards(ctx, req.(*QueryRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardFactors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardFactorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardFactors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.incentive.v1.Query/RewardFactors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardFactors(ctx, req.(*QueryRewardFactorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "joltify.third_party.incentive.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Rewards",
			Handler:    _Query_Rewards_Handler,
		},
		{
			MethodName: "RewardFactors",
			Handler:    _Query_RewardFactors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "joltify/third_party/incentive/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Unsynchronized {
		i--
		if m.Unsynchronized {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.RewardType) > 0 {
		i -= len(m.RewardType)
		copy(dAtA[i:], m.RewardType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RewardType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapClaims) > 0 {
		for iNdEx := len(m.SwapClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.JoltLiquidityProviderClaims) > 0 {
		for iNdEx := len(m.JoltLiquidityProviderClaims) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoltLiquidityProviderClaims[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardFactorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardFactorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardFactorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRewardFactorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardFactorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardFactorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SwapRewardFactors) > 0 {
		for iNdEx := len(m.SwapRewardFactors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SwapRewardFactors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.JoltBorrowRewardFactors) > 0 {
		for iNdEx := len(m.JoltBorrowRewardFactors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoltBorrowRewardFactors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.JoltSupplyRewardFactors) > 0 {
		for iNdEx := len(m.JoltSupplyRewardFactors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.JoltSupplyRewardFactors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.RewardType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Unsynchronized {
		n += 2
	}
	return n
}

func (m *QueryRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JoltLiquidityProviderClaims) > 0 {
		for _, e := range m.JoltLiquidityProviderClaims {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SwapClaims) > 0 {
		for _, e := range m.SwapClaims {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRewardFactorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRewardFactorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.JoltSupplyRewardFactors) > 0 {
		for _, e := range m.JoltSupplyRewardFactors {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.JoltBorrowRewardFactors) > 0 {
		for _, e := range m.JoltBorrowRewardFactors {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SwapRewardFactors) > 0 {
		for _, e := range m.SwapRewardFactors {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsynchronized", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unsynchronized = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltLiquidityProviderClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoltLiquidityProviderClaims = append(m.JoltLiquidityProviderClaims, JoltLiquidityProviderClaim{})
			if err := m.JoltLiquidityProviderClaims[len(m.JoltLiquidityProviderClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapClaims", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapClaims = append(m.SwapClaims, SwapClaim{})
			if err := m.SwapClaims[len(m.SwapClaims)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardFactorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardFactorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardFactorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardFactorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardFactorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardFactorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltSupplyRewardFactors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoltSupplyRewardFactors = append(m.JoltSupplyRewardFactors, MultiRewardIndex{})
			if err := m.JoltSupplyRewardFactors[len(m.JoltSupplyRewardFactors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoltBorrowRewardFactors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JoltBorrowRewardFactors = append(m.JoltBorrowRewardFactors, MultiRewardIndex{})
			if err := m.JoltBorrowRewardFactors[len(m.JoltBorrowRewardFactors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapRewardFactors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SwapRewardFactors = append(m.SwapRewardFactors, MultiRewardIndex{})
			if err := m.SwapRewardFactors[len(m.SwapRewardFactors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
