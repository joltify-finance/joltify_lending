// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/issuance/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgIssueTokens represents a message used by the issuer to issue new tokens
type MsgIssueTokens struct {
	Sender   string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Tokens   types.Coin `protobuf:"bytes,2,opt,name=tokens,proto3" json:"tokens"`
	Receiver string     `protobuf:"bytes,3,opt,name=receiver,proto3" json:"receiver,omitempty"`
}

func (m *MsgIssueTokens) Reset()         { *m = MsgIssueTokens{} }
func (m *MsgIssueTokens) String() string { return proto.CompactTextString(m) }
func (*MsgIssueTokens) ProtoMessage()    {}
func (*MsgIssueTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{0}
}
func (m *MsgIssueTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueTokens.Merge(m, src)
}
func (m *MsgIssueTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueTokens proto.InternalMessageInfo

// MsgIssueTokensResponse defines the Msg/IssueTokens response type.
type MsgIssueTokensResponse struct {
}

func (m *MsgIssueTokensResponse) Reset()         { *m = MsgIssueTokensResponse{} }
func (m *MsgIssueTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgIssueTokensResponse) ProtoMessage()    {}
func (*MsgIssueTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{1}
}
func (m *MsgIssueTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssueTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssueTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssueTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssueTokensResponse.Merge(m, src)
}
func (m *MsgIssueTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssueTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssueTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssueTokensResponse proto.InternalMessageInfo

// MsgRedeemTokens represents a message used by the issuer to redeem (burn) tokens
type MsgRedeemTokens struct {
	Sender string     `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Tokens types.Coin `protobuf:"bytes,2,opt,name=tokens,proto3" json:"tokens"`
}

func (m *MsgRedeemTokens) Reset()         { *m = MsgRedeemTokens{} }
func (m *MsgRedeemTokens) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemTokens) ProtoMessage()    {}
func (*MsgRedeemTokens) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{2}
}
func (m *MsgRedeemTokens) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemTokens) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemTokens.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemTokens) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemTokens.Merge(m, src)
}
func (m *MsgRedeemTokens) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemTokens) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemTokens.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemTokens proto.InternalMessageInfo

// MsgRedeemTokensResponse defines the Msg/RedeemTokens response type.
type MsgRedeemTokensResponse struct {
}

func (m *MsgRedeemTokensResponse) Reset()         { *m = MsgRedeemTokensResponse{} }
func (m *MsgRedeemTokensResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemTokensResponse) ProtoMessage()    {}
func (*MsgRedeemTokensResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{3}
}
func (m *MsgRedeemTokensResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemTokensResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemTokensResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemTokensResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemTokensResponse.Merge(m, src)
}
func (m *MsgRedeemTokensResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemTokensResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemTokensResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemTokensResponse proto.InternalMessageInfo

// MsgBlockAddress represents a message used by the issuer to block an address from holding or transferring tokens
type MsgBlockAddress struct {
	Sender         string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom          string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	BlockedAddress string `protobuf:"bytes,3,opt,name=blocked_address,json=blockedAddress,proto3" json:"blocked_address,omitempty"`
}

func (m *MsgBlockAddress) Reset()         { *m = MsgBlockAddress{} }
func (m *MsgBlockAddress) String() string { return proto.CompactTextString(m) }
func (*MsgBlockAddress) ProtoMessage()    {}
func (*MsgBlockAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{4}
}
func (m *MsgBlockAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockAddress.Merge(m, src)
}
func (m *MsgBlockAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockAddress proto.InternalMessageInfo

// MsgBlockAddressResponse defines the Msg/BlockAddress response type.
type MsgBlockAddressResponse struct {
}

func (m *MsgBlockAddressResponse) Reset()         { *m = MsgBlockAddressResponse{} }
func (m *MsgBlockAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBlockAddressResponse) ProtoMessage()    {}
func (*MsgBlockAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{5}
}
func (m *MsgBlockAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBlockAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBlockAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBlockAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBlockAddressResponse.Merge(m, src)
}
func (m *MsgBlockAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBlockAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBlockAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBlockAddressResponse proto.InternalMessageInfo

// MsgUnblockAddress message type used by the issuer to unblock an address from holding or transferring tokens
type MsgUnblockAddress struct {
	Sender         string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom          string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	BlockedAddress string `protobuf:"bytes,3,opt,name=blocked_address,json=blockedAddress,proto3" json:"blocked_address,omitempty"`
}

func (m *MsgUnblockAddress) Reset()         { *m = MsgUnblockAddress{} }
func (m *MsgUnblockAddress) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockAddress) ProtoMessage()    {}
func (*MsgUnblockAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{6}
}
func (m *MsgUnblockAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockAddress.Merge(m, src)
}
func (m *MsgUnblockAddress) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockAddress.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockAddress proto.InternalMessageInfo

// MsgUnblockAddressResponse defines the Msg/UnblockAddress response type.
type MsgUnblockAddressResponse struct {
}

func (m *MsgUnblockAddressResponse) Reset()         { *m = MsgUnblockAddressResponse{} }
func (m *MsgUnblockAddressResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnblockAddressResponse) ProtoMessage()    {}
func (*MsgUnblockAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{7}
}
func (m *MsgUnblockAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnblockAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnblockAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnblockAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnblockAddressResponse.Merge(m, src)
}
func (m *MsgUnblockAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnblockAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnblockAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnblockAddressResponse proto.InternalMessageInfo

// MsgSetPauseStatus message type used by the issuer to pause or unpause status
type MsgSetPauseStatus struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Denom  string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Status bool   `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgSetPauseStatus) Reset()         { *m = MsgSetPauseStatus{} }
func (m *MsgSetPauseStatus) String() string { return proto.CompactTextString(m) }
func (*MsgSetPauseStatus) ProtoMessage()    {}
func (*MsgSetPauseStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{8}
}
func (m *MsgSetPauseStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPauseStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPauseStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPauseStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPauseStatus.Merge(m, src)
}
func (m *MsgSetPauseStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPauseStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPauseStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPauseStatus proto.InternalMessageInfo

// MsgSetPauseStatusResponse defines the Msg/SetPauseStatus response type.
type MsgSetPauseStatusResponse struct {
}

func (m *MsgSetPauseStatusResponse) Reset()         { *m = MsgSetPauseStatusResponse{} }
func (m *MsgSetPauseStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetPauseStatusResponse) ProtoMessage()    {}
func (*MsgSetPauseStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8a261d4271600e49, []int{9}
}
func (m *MsgSetPauseStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetPauseStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetPauseStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetPauseStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetPauseStatusResponse.Merge(m, src)
}
func (m *MsgSetPauseStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetPauseStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetPauseStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetPauseStatusResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgIssueTokens)(nil), "joltify.third_party.issuance.v1beta1.MsgIssueTokens")
	proto.RegisterType((*MsgIssueTokensResponse)(nil), "joltify.third_party.issuance.v1beta1.MsgIssueTokensResponse")
	proto.RegisterType((*MsgRedeemTokens)(nil), "joltify.third_party.issuance.v1beta1.MsgRedeemTokens")
	proto.RegisterType((*MsgRedeemTokensResponse)(nil), "joltify.third_party.issuance.v1beta1.MsgRedeemTokensResponse")
	proto.RegisterType((*MsgBlockAddress)(nil), "joltify.third_party.issuance.v1beta1.MsgBlockAddress")
	proto.RegisterType((*MsgBlockAddressResponse)(nil), "joltify.third_party.issuance.v1beta1.MsgBlockAddressResponse")
	proto.RegisterType((*MsgUnblockAddress)(nil), "joltify.third_party.issuance.v1beta1.MsgUnblockAddress")
	proto.RegisterType((*MsgUnblockAddressResponse)(nil), "joltify.third_party.issuance.v1beta1.MsgUnblockAddressResponse")
	proto.RegisterType((*MsgSetPauseStatus)(nil), "joltify.third_party.issuance.v1beta1.MsgSetPauseStatus")
	proto.RegisterType((*MsgSetPauseStatusResponse)(nil), "joltify.third_party.issuance.v1beta1.MsgSetPauseStatusResponse")
}

func init() {
	proto.RegisterFile("joltify/third_party/issuance/v1beta1/tx.proto", fileDescriptor_8a261d4271600e49)
}

var fileDescriptor_8a261d4271600e49 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x95, 0x4f, 0x6b, 0x13, 0x41,
	0x18, 0xc6, 0x77, 0xac, 0x0d, 0xe9, 0x54, 0x52, 0x5c, 0x4a, 0x4d, 0x56, 0xd8, 0x94, 0x20, 0xd8,
	0x4b, 0x67, 0x69, 0x55, 0x0a, 0xa2, 0x88, 0xf1, 0x20, 0x1e, 0x02, 0xb2, 0xd5, 0x8b, 0x97, 0xb0,
	0x7f, 0xde, 0x6e, 0xd7, 0x26, 0x33, 0x61, 0xdf, 0x49, 0x69, 0x8e, 0x82, 0xa0, 0x78, 0xf2, 0x23,
	0xf4, 0x2b, 0xf8, 0x2d, 0x7a, 0xec, 0xd1, 0x93, 0x48, 0x72, 0xf1, 0x63, 0x48, 0x66, 0x27, 0x71,
	0x37, 0x89, 0xb0, 0x09, 0xe8, 0x6d, 0xdf, 0xdd, 0xe7, 0x79, 0xde, 0x1f, 0xcb, 0xb3, 0x3b, 0x74,
	0xff, 0xbd, 0xe8, 0xc8, 0xf8, 0x64, 0xe0, 0xc8, 0xd3, 0x38, 0x09, 0xdb, 0x3d, 0x2f, 0x91, 0x03,
	0x27, 0x46, 0xec, 0x7b, 0x3c, 0x00, 0xe7, 0xfc, 0xc0, 0x07, 0xe9, 0x1d, 0x38, 0xf2, 0x82, 0xf5,
	0x12, 0x21, 0x85, 0x79, 0x4f, 0xcb, 0x59, 0x46, 0xce, 0x26, 0x72, 0xa6, 0xe5, 0xd6, 0x76, 0x24,
	0x22, 0xa1, 0x0c, 0xce, 0xf8, 0x2a, 0xf5, 0x5a, 0x76, 0x20, 0xb0, 0x2b, 0xd0, 0xf1, 0x3d, 0xfc,
	0x93, 0x1c, 0x88, 0x98, 0xa7, 0xcf, 0x1b, 0x9f, 0x08, 0xad, 0xb4, 0x30, 0x7a, 0x85, 0xd8, 0x87,
	0x37, 0xe2, 0x0c, 0x38, 0x9a, 0x3b, 0xb4, 0x84, 0xc0, 0x43, 0x48, 0xaa, 0x64, 0x97, 0xec, 0x6d,
	0xb8, 0x7a, 0x32, 0x8f, 0x68, 0x49, 0x2a, 0x45, 0xf5, 0xc6, 0x2e, 0xd9, 0xdb, 0x3c, 0xac, 0xb1,
	0x34, 0x9b, 0x8d, 0xb3, 0x27, 0x18, 0xec, 0x85, 0x88, 0x79, 0xf3, 0xe6, 0xd5, 0x8f, 0xba, 0xe1,
	0x6a, 0xb9, 0x69, 0xd1, 0x72, 0x02, 0x01, 0xc4, 0xe7, 0x90, 0x54, 0xd7, 0x54, 0xe4, 0x74, 0x7e,
	0x5c, 0xfe, 0x7c, 0x59, 0x37, 0x7e, 0x5d, 0xd6, 0x8d, 0x46, 0x95, 0xee, 0xe4, 0x41, 0x5c, 0xc0,
	0x9e, 0xe0, 0x08, 0x8d, 0x0e, 0xdd, 0x6a, 0x61, 0xe4, 0x42, 0x08, 0xd0, 0xfd, 0x47, 0x8c, 0x19,
	0x8e, 0x1a, 0xbd, 0x33, 0xb3, 0x6d, 0x0a, 0x92, 0x28, 0x90, 0x66, 0x47, 0x04, 0x67, 0xcf, 0xc3,
	0x30, 0x01, 0xfc, 0x3b, 0xc8, 0x36, 0x5d, 0x0f, 0x81, 0x8b, 0xae, 0xe2, 0xd8, 0x70, 0xd3, 0xc1,
	0xbc, 0x4f, 0xb7, 0xfc, 0xb1, 0x1b, 0xc2, 0xb6, 0x97, 0x06, 0xe8, 0x17, 0x52, 0xd1, 0xb7, 0x75,
	0xec, 0x1c, 0x4e, 0x76, 0xe7, 0x14, 0x47, 0xd2, 0xdb, 0x2d, 0x8c, 0xde, 0x72, 0xff, 0xbf, 0x02,
	0xdd, 0xa5, 0xb5, 0xb9, 0xad, 0x53, 0xa4, 0x40, 0x21, 0x1d, 0x83, 0x7c, 0xed, 0xf5, 0x11, 0x8e,
	0xa5, 0x27, 0xfb, 0xcb, 0x22, 0x8d, 0xd5, 0xca, 0xa7, 0x48, 0xca, 0xae, 0x9e, 0xe6, 0x08, 0xf2,
	0x4b, 0x26, 0x04, 0x87, 0xdf, 0xd6, 0xe9, 0x5a, 0x0b, 0x23, 0xf3, 0x03, 0xa1, 0x9b, 0xd9, 0x56,
	0x3f, 0x64, 0x45, 0xbe, 0x22, 0x96, 0xaf, 0xa0, 0xf5, 0x64, 0x15, 0xd7, 0x84, 0xc5, 0xfc, 0x48,
	0xe8, 0xad, 0x5c, 0x6d, 0x1f, 0x15, 0x8e, 0xcb, 0xda, 0xac, 0xa7, 0x2b, 0xd9, 0x72, 0x18, 0xb9,
	0xd2, 0x16, 0xc7, 0xc8, 0xda, 0x96, 0xc0, 0x58, 0x54, 0x57, 0xf3, 0x0b, 0xa1, 0x95, 0x99, 0xb2,
	0x1e, 0x15, 0x4e, 0xcc, 0x1b, 0xad, 0x67, 0x2b, 0x1a, 0x73, 0x30, 0x33, 0x35, 0x2d, 0x0e, 0x93,
	0x37, 0x2e, 0x01, 0xb3, 0xb8, 0xb3, 0x4d, 0xef, 0x6a, 0x68, 0x93, 0xeb, 0xa1, 0x4d, 0x7e, 0x0e,
	0x6d, 0xf2, 0x75, 0x64, 0x1b, 0xd7, 0x23, 0xdb, 0xf8, 0x3e, 0xb2, 0x8d, 0x77, 0x2f, 0xa3, 0x58,
	0x9e, 0xf6, 0x7d, 0x16, 0x88, 0xae, 0xa3, 0x97, 0xec, 0x9f, 0xc4, 0x5c, 0x9d, 0x13, 0x7a, 0x6e,
	0x77, 0x80, 0x87, 0x31, 0x8f, 0x9c, 0x8b, 0xc5, 0xc7, 0x89, 0x1c, 0xf4, 0x00, 0xfd, 0x92, 0xfa,
	0xdd, 0x3f, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x24, 0x56, 0xef, 0xbd, 0x7b, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// IssueTokens message type used by the issuer to issue new tokens
	IssueTokens(ctx context.Context, in *MsgIssueTokens, opts ...grpc.CallOption) (*MsgIssueTokensResponse, error)
	// RedeemTokens message type used by the issuer to redeem (burn) tokens
	RedeemTokens(ctx context.Context, in *MsgRedeemTokens, opts ...grpc.CallOption) (*MsgRedeemTokensResponse, error)
	// BlockAddress message type used by the issuer to block an address from holding or transferring tokens
	BlockAddress(ctx context.Context, in *MsgBlockAddress, opts ...grpc.CallOption) (*MsgBlockAddressResponse, error)
	// UnblockAddress message type used by the issuer to unblock an address from holding or transferring tokens
	UnblockAddress(ctx context.Context, in *MsgUnblockAddress, opts ...grpc.CallOption) (*MsgUnblockAddressResponse, error)
	// SetPauseStatus message type used to pause or unpause status
	SetPauseStatus(ctx context.Context, in *MsgSetPauseStatus, opts ...grpc.CallOption) (*MsgSetPauseStatusResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) IssueTokens(ctx context.Context, in *MsgIssueTokens, opts ...grpc.CallOption) (*MsgIssueTokensResponse, error) {
	out := new(MsgIssueTokensResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.issuance.v1beta1.Msg/IssueTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemTokens(ctx context.Context, in *MsgRedeemTokens, opts ...grpc.CallOption) (*MsgRedeemTokensResponse, error) {
	out := new(MsgRedeemTokensResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.issuance.v1beta1.Msg/RedeemTokens", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BlockAddress(ctx context.Context, in *MsgBlockAddress, opts ...grpc.CallOption) (*MsgBlockAddressResponse, error) {
	out := new(MsgBlockAddressResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.issuance.v1beta1.Msg/BlockAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnblockAddress(ctx context.Context, in *MsgUnblockAddress, opts ...grpc.CallOption) (*MsgUnblockAddressResponse, error) {
	out := new(MsgUnblockAddressResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.issuance.v1beta1.Msg/UnblockAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetPauseStatus(ctx context.Context, in *MsgSetPauseStatus, opts ...grpc.CallOption) (*MsgSetPauseStatusResponse, error) {
	out := new(MsgSetPauseStatusResponse)
	err := c.cc.Invoke(ctx, "/joltify.third_party.issuance.v1beta1.Msg/SetPauseStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// IssueTokens message type used by the issuer to issue new tokens
	IssueTokens(context.Context, *MsgIssueTokens) (*MsgIssueTokensResponse, error)
	// RedeemTokens message type used by the issuer to redeem (burn) tokens
	RedeemTokens(context.Context, *MsgRedeemTokens) (*MsgRedeemTokensResponse, error)
	// BlockAddress message type used by the issuer to block an address from holding or transferring tokens
	BlockAddress(context.Context, *MsgBlockAddress) (*MsgBlockAddressResponse, error)
	// UnblockAddress message type used by the issuer to unblock an address from holding or transferring tokens
	UnblockAddress(context.Context, *MsgUnblockAddress) (*MsgUnblockAddressResponse, error)
	// SetPauseStatus message type used to pause or unpause status
	SetPauseStatus(context.Context, *MsgSetPauseStatus) (*MsgSetPauseStatusResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) IssueTokens(ctx context.Context, req *MsgIssueTokens) (*MsgIssueTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueTokens not implemented")
}
func (*UnimplementedMsgServer) RedeemTokens(ctx context.Context, req *MsgRedeemTokens) (*MsgRedeemTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemTokens not implemented")
}
func (*UnimplementedMsgServer) BlockAddress(ctx context.Context, req *MsgBlockAddress) (*MsgBlockAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockAddress not implemented")
}
func (*UnimplementedMsgServer) UnblockAddress(ctx context.Context, req *MsgUnblockAddress) (*MsgUnblockAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnblockAddress not implemented")
}
func (*UnimplementedMsgServer) SetPauseStatus(ctx context.Context, req *MsgSetPauseStatus) (*MsgSetPauseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPauseStatus not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_IssueTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssueTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssueTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.issuance.v1beta1.Msg/IssueTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssueTokens(ctx, req.(*MsgIssueTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.issuance.v1beta1.Msg/RedeemTokens",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemTokens(ctx, req.(*MsgRedeemTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BlockAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBlockAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BlockAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.issuance.v1beta1.Msg/BlockAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BlockAddress(ctx, req.(*MsgBlockAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnblockAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnblockAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnblockAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.issuance.v1beta1.Msg/UnblockAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnblockAddress(ctx, req.(*MsgUnblockAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetPauseStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetPauseStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetPauseStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.third_party.issuance.v1beta1.Msg/SetPauseStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetPauseStatus(ctx, req.(*MsgSetPauseStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "joltify.third_party.issuance.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssueTokens",
			Handler:    _Msg_IssueTokens_Handler,
		},
		{
			MethodName: "RedeemTokens",
			Handler:    _Msg_RedeemTokens_Handler,
		},
		{
			MethodName: "BlockAddress",
			Handler:    _Msg_BlockAddress_Handler,
		},
		{
			MethodName: "UnblockAddress",
			Handler:    _Msg_UnblockAddress_Handler,
		},
		{
			MethodName: "SetPauseStatus",
			Handler:    _Msg_SetPauseStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "joltify/third_party/issuance/v1beta1/tx.proto",
}

func (m *MsgIssueTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Tokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssueTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssueTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssueTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRedeemTokens) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemTokens) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemTokens) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Tokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemTokensResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemTokensResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemTokensResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBlockAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockedAddress) > 0 {
		i -= len(m.BlockedAddress)
		copy(dAtA[i:], m.BlockedAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockedAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBlockAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBlockAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBlockAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnblockAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockedAddress) > 0 {
		i -= len(m.BlockedAddress)
		copy(dAtA[i:], m.BlockedAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockedAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnblockAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnblockAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnblockAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetPauseStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPauseStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPauseStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetPauseStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetPauseStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetPauseStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgIssueTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssueTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRedeemTokens) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Tokens.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgRedeemTokensResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBlockAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockedAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgBlockAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnblockAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BlockedAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnblockAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetPauseStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status {
		n += 2
	}
	return n
}

func (m *MsgSetPauseStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgIssueTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssueTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssueTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssueTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemTokens) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemTokens: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemTokens: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemTokensResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemTokensResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemTokensResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBlockAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBlockAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBlockAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockedAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockedAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnblockAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnblockAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnblockAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPauseStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPauseStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPauseStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetPauseStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetPauseStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetPauseStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
