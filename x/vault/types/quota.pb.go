// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/vault/quota.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HistoricalAmount struct {
	BlockHeight int64                                    `protobuf:"varint,1,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Amount      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *HistoricalAmount) Reset()         { *m = HistoricalAmount{} }
func (m *HistoricalAmount) String() string { return proto.CompactTextString(m) }
func (*HistoricalAmount) ProtoMessage()    {}
func (*HistoricalAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a61b5021d166123, []int{0}
}
func (m *HistoricalAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalAmount.Merge(m, src)
}
func (m *HistoricalAmount) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalAmount.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalAmount proto.InternalMessageInfo

func (m *HistoricalAmount) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *HistoricalAmount) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type CoinsQuota struct {
	History  []*HistoricalAmount                      `protobuf:"bytes,2,rep,name=history,proto3" json:"history,omitempty"`
	CoinsSum github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=CoinsSum,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"CoinsSum"`
}

func (m *CoinsQuota) Reset()         { *m = CoinsQuota{} }
func (m *CoinsQuota) String() string { return proto.CompactTextString(m) }
func (*CoinsQuota) ProtoMessage()    {}
func (*CoinsQuota) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a61b5021d166123, []int{1}
}
func (m *CoinsQuota) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinsQuota) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinsQuota.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinsQuota) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinsQuota.Merge(m, src)
}
func (m *CoinsQuota) XXX_Size() int {
	return m.Size()
}
func (m *CoinsQuota) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinsQuota.DiscardUnknown(m)
}

var xxx_messageInfo_CoinsQuota proto.InternalMessageInfo

func (m *CoinsQuota) GetHistory() []*HistoricalAmount {
	if m != nil {
		return m.History
	}
	return nil
}

func (m *CoinsQuota) GetCoinsSum() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.CoinsSum
	}
	return nil
}

func init() {
	proto.RegisterType((*HistoricalAmount)(nil), "joltify.vault.historicalAmount")
	proto.RegisterType((*CoinsQuota)(nil), "joltify.vault.coinsQuota")
}

func init() { proto.RegisterFile("joltify/vault/quota.proto", fileDescriptor_6a61b5021d166123) }

var fileDescriptor_6a61b5021d166123 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x3f, 0x4f, 0x02, 0x31,
	0x18, 0xc6, 0xaf, 0x92, 0xa0, 0x29, 0x31, 0x31, 0x17, 0x07, 0x60, 0x28, 0x84, 0x89, 0x85, 0x56,
	0x74, 0xd1, 0x51, 0x5c, 0x5c, 0x3d, 0x37, 0x17, 0xd3, 0x2b, 0x47, 0xa9, 0xdc, 0xf5, 0x45, 0xda,
	0x23, 0xf2, 0x2d, 0x5c, 0xfd, 0x0a, 0x4e, 0x7e, 0x0c, 0x46, 0x46, 0x27, 0x35, 0xf0, 0x45, 0xcc,
	0xf5, 0x8a, 0x41, 0x67, 0xa7, 0xfe, 0x79, 0xde, 0x3e, 0xcf, 0xef, 0xed, 0x8b, 0x1b, 0x0f, 0x90,
	0x5a, 0x35, 0x5a, 0xb0, 0x39, 0xcf, 0x53, 0xcb, 0x1e, 0x73, 0xb0, 0x9c, 0x4e, 0x67, 0x60, 0x21,
	0x3c, 0xf4, 0x12, 0x75, 0x52, 0xf3, 0x58, 0x82, 0x04, 0xa7, 0xb0, 0x62, 0x57, 0x16, 0x35, 0x89,
	0x00, 0x93, 0x81, 0x61, 0x31, 0x37, 0x09, 0x9b, 0xf7, 0xe3, 0xc4, 0xf2, 0x3e, 0x13, 0xa0, 0x74,
	0xa9, 0x77, 0x5e, 0x10, 0x3e, 0x1a, 0x2b, 0x63, 0x61, 0xa6, 0x04, 0x4f, 0x2f, 0x33, 0xc8, 0xb5,
	0x0d, 0xdb, 0xb8, 0x16, 0xa7, 0x20, 0x26, 0xd7, 0x89, 0x92, 0x63, 0x5b, 0x47, 0x6d, 0xd4, 0xad,
	0x44, 0xbb, 0x57, 0xa1, 0xc0, 0x55, 0xee, 0x6a, 0xeb, 0x7b, 0xed, 0x4a, 0xb7, 0x76, 0xda, 0xa0,
	0x65, 0x0e, 0x2d, 0x72, 0xa8, 0xcf, 0xa1, 0x57, 0xa0, 0xf4, 0xe0, 0x64, 0xf9, 0xd1, 0x0a, 0x5e,
	0x3f, 0x5b, 0x5d, 0xa9, 0xec, 0x38, 0x8f, 0xa9, 0x80, 0x8c, 0x79, 0xa8, 0x72, 0xe9, 0x99, 0xe1,
	0x84, 0xd9, 0xc5, 0x34, 0x31, 0xee, 0x81, 0x89, 0xbc, 0x75, 0xe7, 0x0d, 0x61, 0x5c, 0xa0, 0x9a,
	0x9b, 0xa2, 0xeb, 0xf0, 0x02, 0xef, 0x97, 0xa4, 0x0b, 0x1f, 0xda, 0xa2, 0xbf, 0x7e, 0x80, 0xfe,
	0xed, 0x23, 0xda, 0xd6, 0x87, 0x12, 0x1f, 0x38, 0xeb, 0xdb, 0x3c, 0xab, 0x57, 0xfe, 0x1f, 0xf8,
	0xc7, 0x7c, 0x10, 0x2d, 0xd7, 0x04, 0xad, 0xd6, 0x04, 0x7d, 0xad, 0x09, 0x7a, 0xde, 0x90, 0x60,
	0xb5, 0x21, 0xc1, 0xfb, 0x86, 0x04, 0x77, 0xe7, 0x3b, 0x6e, 0x1e, 0xbb, 0x37, 0x52, 0x9a, 0x6b,
	0x91, 0x6c, 0xcf, 0xf7, 0x69, 0xa2, 0x87, 0x4a, 0x4b, 0xf6, 0xe4, 0xa7, 0xed, 0x32, 0xe2, 0xaa,
	0x9b, 0xd4, 0xd9, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x38, 0x64, 0xf7, 0x08, 0x0b, 0x02, 0x00,
	0x00,
}

func (m *HistoricalAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuota(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintQuota(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CoinsQuota) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinsQuota) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinsQuota) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CoinsSum) > 0 {
		for iNdEx := len(m.CoinsSum) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinsSum[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuota(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.History) > 0 {
		for iNdEx := len(m.History) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.History[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuota(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuota(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuota(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HistoricalAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovQuota(uint64(m.BlockHeight))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuota(uint64(l))
		}
	}
	return n
}

func (m *CoinsQuota) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.History) > 0 {
		for _, e := range m.History {
			l = e.Size()
			n += 1 + l + sovQuota(uint64(l))
		}
	}
	if len(m.CoinsSum) > 0 {
		for _, e := range m.CoinsSum {
			l = e.Size()
			n += 1 + l + sovQuota(uint64(l))
		}
	}
	return n
}

func sovQuota(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuota(x uint64) (n int) {
	return sovQuota(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HistoricalAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuota
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: historicalAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: historicalAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuota
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuota
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuota(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuota
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinsQuota) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuota
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: coinsQuota: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: coinsQuota: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field History", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuota
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuota
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.History = append(m.History, &HistoricalAmount{})
			if err := m.History[len(m.History)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinsSum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuota
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuota
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinsSum = append(m.CoinsSum, types.Coin{})
			if err := m.CoinsSum[len(m.CoinsSum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuota(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuota
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuota(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuota
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuota
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuota
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuota
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuota
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuota        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuota          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuota = fmt.Errorf("proto: unexpected end of group")
)
