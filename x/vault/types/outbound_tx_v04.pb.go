// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/vault/outbound_tx_v04.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EntityV04 struct {
	Address github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=address,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"address,omitempty"`
	Feecoin github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,2,rep,name=feecoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"feecoin"`
}

func (m *EntityV04) Reset()         { *m = EntityV04{} }
func (m *EntityV04) String() string { return proto.CompactTextString(m) }
func (*EntityV04) ProtoMessage()    {}
func (*EntityV04) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee47e60af173ad4, []int{0}
}
func (m *EntityV04) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EntityV04) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EntityV04.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EntityV04) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntityV04.Merge(m, src)
}
func (m *EntityV04) XXX_Size() int {
	return m.Size()
}
func (m *EntityV04) XXX_DiscardUnknown() {
	xxx_messageInfo_EntityV04.DiscardUnknown(m)
}

var xxx_messageInfo_EntityV04 proto.InternalMessageInfo

func (m *EntityV04) GetAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *EntityV04) GetFeecoin() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Feecoin
	}
	return nil
}

type ProposalsV04 struct {
	Entry []*EntityV04 `protobuf:"bytes,1,rep,name=entry,proto3" json:"entry,omitempty"`
}

func (m *ProposalsV04) Reset()         { *m = ProposalsV04{} }
func (m *ProposalsV04) String() string { return proto.CompactTextString(m) }
func (*ProposalsV04) ProtoMessage()    {}
func (*ProposalsV04) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee47e60af173ad4, []int{1}
}
func (m *ProposalsV04) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalsV04) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalsV04.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalsV04) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalsV04.Merge(m, src)
}
func (m *ProposalsV04) XXX_Size() int {
	return m.Size()
}
func (m *ProposalsV04) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalsV04.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalsV04 proto.InternalMessageInfo

func (m *ProposalsV04) GetEntry() []*EntityV04 {
	if m != nil {
		return m.Entry
	}
	return nil
}

type OutboundTxV04 struct {
	Index           string                                        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Processed       bool                                          `protobuf:"varint,2,opt,name=processed,proto3" json:"processed,omitempty"`
	Items           map[string]ProposalsV04                       `protobuf:"bytes,3,rep,name=items,proto3" json:"items" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ChainType       string                                        `protobuf:"bytes,4,opt,name=chainType,proto3" json:"chainType,omitempty"`
	InTxHash        string                                        `protobuf:"bytes,5,opt,name=inTxHash,proto3" json:"inTxHash,omitempty"`
	ReceiverAddress github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,6,opt,name=receiverAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"receiverAddress,omitempty"`
	NeedMint        bool                                          `protobuf:"varint,7,opt,name=needMint,proto3" json:"needMint,omitempty"`
	Feecoin         github_com_cosmos_cosmos_sdk_types.Coins      `protobuf:"bytes,8,rep,name=feecoin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"feecoin"`
}

func (m *OutboundTxV04) Reset()         { *m = OutboundTxV04{} }
func (m *OutboundTxV04) String() string { return proto.CompactTextString(m) }
func (*OutboundTxV04) ProtoMessage()    {}
func (*OutboundTxV04) Descriptor() ([]byte, []int) {
	return fileDescriptor_dee47e60af173ad4, []int{2}
}
func (m *OutboundTxV04) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundTxV04) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundTxV04.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundTxV04) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTxV04.Merge(m, src)
}
func (m *OutboundTxV04) XXX_Size() int {
	return m.Size()
}
func (m *OutboundTxV04) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTxV04.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTxV04 proto.InternalMessageInfo

func (m *OutboundTxV04) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *OutboundTxV04) GetProcessed() bool {
	if m != nil {
		return m.Processed
	}
	return false
}

func (m *OutboundTxV04) GetItems() map[string]ProposalsV04 {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *OutboundTxV04) GetChainType() string {
	if m != nil {
		return m.ChainType
	}
	return ""
}

func (m *OutboundTxV04) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *OutboundTxV04) GetReceiverAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ReceiverAddress
	}
	return nil
}

func (m *OutboundTxV04) GetNeedMint() bool {
	if m != nil {
		return m.NeedMint
	}
	return false
}

func (m *OutboundTxV04) GetFeecoin() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Feecoin
	}
	return nil
}

func init() {
	proto.RegisterType((*EntityV04)(nil), "joltify.vault.EntityV04")
	proto.RegisterType((*ProposalsV04)(nil), "joltify.vault.ProposalsV04")
	proto.RegisterType((*OutboundTxV04)(nil), "joltify.vault.OutboundTxV04")
	proto.RegisterMapType((map[string]ProposalsV04)(nil), "joltify.vault.OutboundTxV04.ItemsEntry")
}

func init() {
	proto.RegisterFile("joltify/vault/outbound_tx_v04.proto", fileDescriptor_dee47e60af173ad4)
}

var fileDescriptor_dee47e60af173ad4 = []byte{
	// 515 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0x93, 0xa6, 0x49, 0xb6, 0xad, 0x40, 0x56, 0x0f, 0x4b, 0x40, 0x4e, 0x14, 0x0e, 0xe4,
	0x92, 0x75, 0x52, 0x7a, 0xa8, 0x38, 0x20, 0x35, 0x55, 0x25, 0x10, 0x42, 0x20, 0x2b, 0x70, 0x80,
	0x43, 0xe4, 0xd8, 0x93, 0x64, 0x69, 0xb2, 0x6b, 0x79, 0xd7, 0x96, 0xfd, 0x16, 0x3c, 0x07, 0x2f,
	0xc1, 0xb5, 0xc7, 0x1e, 0x39, 0x15, 0x94, 0x3c, 0x05, 0x9c, 0xd0, 0xae, 0x9d, 0x9f, 0xe6, 0x84,
	0x90, 0x7a, 0xf2, 0xce, 0xce, 0x37, 0xdf, 0x37, 0x33, 0x9f, 0x17, 0x3d, 0xfd, 0xc2, 0x67, 0x92,
	0x8e, 0x53, 0x3b, 0x76, 0xa3, 0x99, 0xb4, 0x79, 0x24, 0x47, 0x3c, 0x62, 0xfe, 0x50, 0x26, 0xc3,
	0xb8, 0x7b, 0x4a, 0x82, 0x90, 0x4b, 0x6e, 0x1e, 0xe5, 0x20, 0xa2, 0x41, 0xf5, 0xe3, 0x09, 0x9f,
	0x70, 0x9d, 0xb1, 0xd5, 0x29, 0x03, 0xd5, 0x2d, 0x8f, 0x8b, 0x39, 0x17, 0xf6, 0xc8, 0x15, 0x60,
	0xc7, 0xbd, 0x11, 0x48, 0xb7, 0x67, 0x7b, 0x9c, 0xb2, 0x2c, 0xdf, 0xfa, 0x6e, 0xa0, 0xda, 0x25,
	0x93, 0x54, 0xa6, 0x1f, 0xbb, 0xa7, 0xe6, 0x1b, 0x54, 0x71, 0x7d, 0x3f, 0x04, 0x21, 0xb0, 0xd1,
	0x34, 0xda, 0x87, 0xfd, 0xde, 0x9f, 0xdb, 0x46, 0x67, 0x42, 0xe5, 0x34, 0x1a, 0x11, 0x8f, 0xcf,
	0xed, 0x9c, 0x2d, 0xfb, 0x74, 0x84, 0x7f, 0x65, 0xcb, 0x34, 0x00, 0x41, 0xce, 0x3d, 0xef, 0x3c,
	0x2b, 0x74, 0x56, 0x0c, 0x26, 0xa0, 0xca, 0x18, 0x40, 0x69, 0xe1, 0x62, 0xb3, 0xd4, 0x3e, 0x38,
	0x79, 0x44, 0xb2, 0x3a, 0xa2, 0x9a, 0x21, 0x79, 0x33, 0xe4, 0x82, 0x53, 0xd6, 0xef, 0x5e, 0xdf,
	0x36, 0x0a, 0xdf, 0x7e, 0x36, 0xda, 0xff, 0xa0, 0xa5, 0x0a, 0x84, 0xb3, 0xe2, 0x6e, 0xbd, 0x44,
	0x87, 0xef, 0x43, 0x1e, 0x70, 0xe1, 0xce, 0x84, 0x9a, 0x81, 0xa0, 0x32, 0x30, 0x19, 0xa6, 0xd8,
	0xd0, 0xa2, 0x98, 0xdc, 0x59, 0x13, 0x59, 0x0f, 0xeb, 0x64, 0xb0, 0xd6, 0xef, 0x12, 0x3a, 0x7a,
	0x97, 0x2f, 0x78, 0x90, 0x28, 0x86, 0x63, 0x54, 0xa6, 0xcc, 0x87, 0x44, 0xef, 0xa0, 0xe6, 0x64,
	0x81, 0xf9, 0x04, 0xd5, 0x82, 0x90, 0x7b, 0x20, 0x04, 0xf8, 0xb8, 0xd8, 0x34, 0xda, 0x55, 0x67,
	0x73, 0x61, 0x5e, 0xa0, 0x32, 0x95, 0x30, 0x17, 0xb8, 0xa4, 0x55, 0x9f, 0xed, 0xa8, 0xde, 0x11,
	0x20, 0xaf, 0x15, 0xf2, 0x52, 0xa9, 0xf7, 0xf7, 0xd4, 0xe0, 0x4e, 0x56, 0xab, 0x24, 0xbc, 0xa9,
	0x4b, 0xd9, 0x20, 0x0d, 0x00, 0xef, 0x69, 0xf1, 0xcd, 0x85, 0x59, 0x47, 0x55, 0xca, 0x06, 0xc9,
	0x2b, 0x57, 0x4c, 0x71, 0x59, 0x27, 0xd7, 0xb1, 0xf9, 0x19, 0x3d, 0x08, 0xc1, 0x03, 0x1a, 0x43,
	0x98, 0xfb, 0x80, 0xf7, 0xff, 0xd7, 0xc0, 0x5d, 0x26, 0x25, 0xcc, 0x00, 0xfc, 0xb7, 0x94, 0x49,
	0x5c, 0xd1, 0x83, 0xaf, 0xe3, 0x6d, 0x93, 0xab, 0xf7, 0x67, 0x72, 0xfd, 0x03, 0x42, 0x9b, 0xa5,
	0x99, 0x0f, 0x51, 0xe9, 0x0a, 0xd2, 0xdc, 0x1e, 0x75, 0x34, 0x7b, 0xa8, 0x1c, 0xbb, 0xb3, 0x08,
	0xb4, 0x31, 0x07, 0x27, 0x8f, 0x77, 0xd6, 0xbf, 0xfd, 0x83, 0x38, 0x19, 0xf2, 0x45, 0xf1, 0xcc,
	0xe8, 0x3b, 0xd7, 0x0b, 0xcb, 0xb8, 0x59, 0x58, 0xc6, 0xaf, 0x85, 0x65, 0x7c, 0x5d, 0x5a, 0x85,
	0x9b, 0xa5, 0x55, 0xf8, 0xb1, 0xb4, 0x0a, 0x9f, 0xce, 0xb6, 0x7a, 0xcc, 0xb9, 0x3a, 0x63, 0xca,
	0x5c, 0xe6, 0xc1, 0x2a, 0x1e, 0xce, 0x80, 0xf9, 0x94, 0x4d, 0xec, 0x24, 0x7f, 0xa6, 0xba, 0xf3,
	0xd1, 0xbe, 0x7e, 0x58, 0xcf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xac, 0xcc, 0x0e, 0xc4,
	0x03, 0x00, 0x00,
}

func (m *EntityV04) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EntityV04) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EntityV04) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feecoin) > 0 {
		for iNdEx := len(m.Feecoin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feecoin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutboundTxV04(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintOutboundTxV04(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalsV04) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalsV04) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalsV04) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entry) > 0 {
		for iNdEx := len(m.Entry) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entry[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutboundTxV04(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OutboundTxV04) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundTxV04) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundTxV04) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Feecoin) > 0 {
		for iNdEx := len(m.Feecoin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Feecoin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutboundTxV04(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.NeedMint {
		i--
		if m.NeedMint {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.ReceiverAddress) > 0 {
		i -= len(m.ReceiverAddress)
		copy(dAtA[i:], m.ReceiverAddress)
		i = encodeVarintOutboundTxV04(dAtA, i, uint64(len(m.ReceiverAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintOutboundTxV04(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChainType) > 0 {
		i -= len(m.ChainType)
		copy(dAtA[i:], m.ChainType)
		i = encodeVarintOutboundTxV04(dAtA, i, uint64(len(m.ChainType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Items) > 0 {
		for k := range m.Items {
			v := m.Items[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutboundTxV04(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOutboundTxV04(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutboundTxV04(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.Processed {
		i--
		if m.Processed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintOutboundTxV04(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutboundTxV04(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutboundTxV04(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EntityV04) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovOutboundTxV04(uint64(l))
	}
	if len(m.Feecoin) > 0 {
		for _, e := range m.Feecoin {
			l = e.Size()
			n += 1 + l + sovOutboundTxV04(uint64(l))
		}
	}
	return n
}

func (m *ProposalsV04) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Entry) > 0 {
		for _, e := range m.Entry {
			l = e.Size()
			n += 1 + l + sovOutboundTxV04(uint64(l))
		}
	}
	return n
}

func (m *OutboundTxV04) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovOutboundTxV04(uint64(l))
	}
	if m.Processed {
		n += 2
	}
	if len(m.Items) > 0 {
		for k, v := range m.Items {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovOutboundTxV04(uint64(len(k))) + 1 + l + sovOutboundTxV04(uint64(l))
			n += mapEntrySize + 1 + sovOutboundTxV04(uint64(mapEntrySize))
		}
	}
	l = len(m.ChainType)
	if l > 0 {
		n += 1 + l + sovOutboundTxV04(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovOutboundTxV04(uint64(l))
	}
	l = len(m.ReceiverAddress)
	if l > 0 {
		n += 1 + l + sovOutboundTxV04(uint64(l))
	}
	if m.NeedMint {
		n += 2
	}
	if len(m.Feecoin) > 0 {
		for _, e := range m.Feecoin {
			l = e.Size()
			n += 1 + l + sovOutboundTxV04(uint64(l))
		}
	}
	return n
}

func sovOutboundTxV04(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutboundTxV04(x uint64) (n int) {
	return sovOutboundTxV04(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EntityV04) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutboundTxV04
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EntityV04: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EntityV04: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feecoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feecoin = append(m.Feecoin, types.Coin{})
			if err := m.Feecoin[len(m.Feecoin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutboundTxV04(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalsV04) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutboundTxV04
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalsV04: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalsV04: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entry = append(m.Entry, &EntityV04{})
			if err := m.Entry[len(m.Entry)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutboundTxV04(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundTxV04) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutboundTxV04
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTxV04: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTxV04: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Processed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Processed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Items == nil {
				m.Items = make(map[string]ProposalsV04)
			}
			var mapkey string
			mapvalue := &ProposalsV04{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutboundTxV04
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutboundTxV04
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutboundTxV04
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutboundTxV04
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutboundTxV04
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutboundTxV04
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutboundTxV04
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ProposalsV04{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutboundTxV04(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthOutboundTxV04
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Items[mapkey] = *mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverAddress = append(m.ReceiverAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.ReceiverAddress == nil {
				m.ReceiverAddress = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedMint", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedMint = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Feecoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Feecoin = append(m.Feecoin, types.Coin{})
			if err := m.Feecoin[len(m.Feecoin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutboundTxV04(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthOutboundTxV04
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutboundTxV04(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutboundTxV04
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutboundTxV04
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutboundTxV04
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutboundTxV04
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutboundTxV04
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutboundTxV04        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutboundTxV04          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutboundTxV04 = fmt.Errorf("proto: unexpected end of group")
)
