// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/mint/dist.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HistoricalDistInfo struct {
	PayoutTime     time.Time                                `protobuf:"bytes,1,opt,name=payout_time,json=payoutTime,proto3,stdtime" json:"payout_time" yaml:"first_dist_time"`
	TotalMintCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_mint_coins,json=totalMintCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_mint_coins"`
}

func (m *HistoricalDistInfo) Reset()         { *m = HistoricalDistInfo{} }
func (m *HistoricalDistInfo) String() string { return proto.CompactTextString(m) }
func (*HistoricalDistInfo) ProtoMessage()    {}
func (*HistoricalDistInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf5df87643c0477, []int{0}
}
func (m *HistoricalDistInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalDistInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalDistInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalDistInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalDistInfo.Merge(m, src)
}
func (m *HistoricalDistInfo) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalDistInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalDistInfo.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalDistInfo proto.InternalMessageInfo

func (m *HistoricalDistInfo) GetPayoutTime() time.Time {
	if m != nil {
		return m.PayoutTime
	}
	return time.Time{}
}

func (m *HistoricalDistInfo) GetTotalMintCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalMintCoins
	}
	return nil
}

func init() {
	proto.RegisterType((*HistoricalDistInfo)(nil), "joltify.mint.HistoricalDistInfo")
}

func init() { proto.RegisterFile("joltify/mint/dist.proto", fileDescriptor_fcf5df87643c0477) }

var fileDescriptor_fcf5df87643c0477 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x93, 0xef, 0x93, 0x18, 0x52, 0x84, 0x50, 0x84, 0xa0, 0x74, 0x48, 0xaa, 0x4c, 0x5d,
	0x6a, 0xd3, 0x32, 0x20, 0x31, 0x16, 0x06, 0x18, 0x18, 0xa8, 0x98, 0x58, 0x22, 0xe7, 0x2f, 0x86,
	0xc4, 0x37, 0x8a, 0x6f, 0x10, 0x79, 0x8b, 0x3e, 0x07, 0x4f, 0xd2, 0xb1, 0x23, 0x53, 0x8b, 0xda,
	0x95, 0x89, 0x27, 0x40, 0x76, 0x12, 0x09, 0x31, 0xd9, 0x57, 0xc7, 0xf7, 0xfc, 0xce, 0xf5, 0xb5,
	0x4e, 0x9e, 0x21, 0x43, 0x9e, 0xd4, 0x34, 0xe7, 0x02, 0x69, 0xc4, 0x25, 0x92, 0xa2, 0x04, 0x04,
	0x7b, 0xbf, 0x15, 0x88, 0x12, 0x06, 0x47, 0x29, 0xa4, 0xa0, 0x05, 0xaa, 0x6e, 0xcd, 0x9b, 0x81,
	0x93, 0x02, 0xa4, 0x59, 0x4c, 0x75, 0x15, 0x54, 0x09, 0x8d, 0xaa, 0x92, 0x21, 0x07, 0xd1, 0xea,
	0xee, 0x5f, 0x1d, 0x79, 0x1e, 0x4b, 0x64, 0x79, 0xd1, 0x19, 0x84, 0x20, 0x73, 0x90, 0x34, 0x60,
	0x32, 0xa6, 0xaf, 0x93, 0x20, 0x46, 0x36, 0xa1, 0x21, 0xf0, 0xd6, 0xc0, 0xfb, 0x32, 0x2d, 0xfb,
	0x86, 0x4b, 0x84, 0x92, 0x87, 0x2c, 0xbb, 0xe6, 0x12, 0x6f, 0x45, 0x02, 0xb6, 0x6f, 0xf5, 0x0a,
	0x56, 0x43, 0x85, 0xbe, 0x32, 0xec, 0x9b, 0x43, 0x73, 0xd4, 0x9b, 0x0e, 0x48, 0x43, 0x23, 0x1d,
	0x8d, 0x3c, 0x74, 0xb4, 0x99, 0xb7, 0x5c, 0xbb, 0xc6, 0xf7, 0xda, 0x3d, 0xae, 0x59, 0x9e, 0x5d,
	0x7a, 0x09, 0x2f, 0x25, 0xfa, 0x6a, 0x58, 0x6d, 0xe0, 0x2d, 0x36, 0xae, 0x39, 0xb7, 0x1a, 0x4b,
	0xd5, 0x64, 0x57, 0xd6, 0x21, 0x02, 0xb2, 0xcc, 0x57, 0xc3, 0xfb, 0x2a, 0x90, 0xec, 0xff, 0x1b,
	0xfe, 0x1f, 0xf5, 0xa6, 0xa7, 0xa4, 0x89, 0x4c, 0x54, 0x64, 0xd2, 0x46, 0x26, 0x57, 0xc0, 0xc5,
	0xec, 0x4c, 0x41, 0xde, 0x37, 0xee, 0x28, 0xe5, 0xf8, 0x54, 0x05, 0x24, 0x84, 0x9c, 0xb6, 0xf3,
	0x35, 0xc7, 0x58, 0x46, 0x2f, 0x14, 0xeb, 0x22, 0x96, 0xba, 0x41, 0xce, 0x0f, 0x34, 0xe4, 0x8e,
	0x0b, 0xd4, 0xf5, 0xec, 0x7e, 0xb9, 0x75, 0xcc, 0xd5, 0xd6, 0x31, 0x3f, 0xb7, 0x8e, 0xb9, 0xd8,
	0x39, 0xc6, 0x6a, 0xe7, 0x18, 0x1f, 0x3b, 0xc7, 0x78, 0xbc, 0xf8, 0xe5, 0xd9, 0x2e, 0x66, 0x9c,
	0x70, 0xc1, 0x44, 0x18, 0x77, 0xb5, 0x9f, 0xc5, 0x22, 0xe2, 0x22, 0xa5, 0x6f, 0xcd, 0x2e, 0x35,
	0x28, 0xd8, 0xd3, 0xbf, 0x71, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x8e, 0xcd, 0x6d, 0xe8,
	0x01, 0x00, 0x00,
}

func (m *HistoricalDistInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalDistInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalDistInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalMintCoins) > 0 {
		for iNdEx := len(m.TotalMintCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalMintCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDist(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PayoutTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PayoutTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintDist(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDist(dAtA []byte, offset int, v uint64) int {
	offset -= sovDist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HistoricalDistInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PayoutTime)
	n += 1 + l + sovDist(uint64(l))
	if len(m.TotalMintCoins) > 0 {
		for _, e := range m.TotalMintCoins {
			l = e.Size()
			n += 1 + l + sovDist(uint64(l))
		}
	}
	return n
}

func sovDist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDist(x uint64) (n int) {
	return sovDist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HistoricalDistInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalDistInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalDistInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayoutTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PayoutTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMintCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDist
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalMintCoins = append(m.TotalMintCoins, types.Coin{})
			if err := m.TotalMintCoins[len(m.TotalMintCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDist = fmt.Errorf("proto: unexpected end of group")
)
