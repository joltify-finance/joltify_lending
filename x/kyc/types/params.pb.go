// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/kyc/params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BasicInfo struct {
	Description    string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	ProjectsUrl    string `protobuf:"bytes,2,opt,name=projects_url,json=projectsUrl,proto3" json:"projects_url,omitempty"`
	ProjectCountry string `protobuf:"bytes,3,opt,name=project_country,json=projectCountry,proto3" json:"project_country,omitempty"`
	BusinessNumber string `protobuf:"bytes,4,opt,name=business_number,json=businessNumber,proto3" json:"business_number,omitempty"`
	Reserved       []byte `protobuf:"bytes,5,opt,name=reserved,proto3" json:"reserved,omitempty"`
	ProjectName    string `protobuf:"bytes,6,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Email          string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Name           string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *BasicInfo) Reset()         { *m = BasicInfo{} }
func (m *BasicInfo) String() string { return proto.CompactTextString(m) }
func (*BasicInfo) ProtoMessage()    {}
func (*BasicInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d397e055e79ddcb0, []int{0}
}
func (m *BasicInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BasicInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BasicInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BasicInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BasicInfo.Merge(m, src)
}
func (m *BasicInfo) XXX_Size() int {
	return m.Size()
}
func (m *BasicInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BasicInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BasicInfo proto.InternalMessageInfo

func (m *BasicInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *BasicInfo) GetProjectsUrl() string {
	if m != nil {
		return m.ProjectsUrl
	}
	return ""
}

func (m *BasicInfo) GetProjectCountry() string {
	if m != nil {
		return m.ProjectCountry
	}
	return ""
}

func (m *BasicInfo) GetBusinessNumber() string {
	if m != nil {
		return m.BusinessNumber
	}
	return ""
}

func (m *BasicInfo) GetReserved() []byte {
	if m != nil {
		return m.Reserved
	}
	return nil
}

func (m *BasicInfo) GetProjectName() string {
	if m != nil {
		return m.ProjectName
	}
	return ""
}

func (m *BasicInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *BasicInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Market defines an asset in the pricefeed.
type ProjectInfo struct {
	Index                        int32                                         `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	SPVName                      string                                        `protobuf:"bytes,2,opt,name=SPV_name,json=SPVName,proto3" json:"SPV_name,omitempty"`
	BasicInfo                    *BasicInfo                                    `protobuf:"bytes,3,opt,name=basic_info,json=basicInfo,proto3" json:"basic_info,omitempty"`
	ProjectOwner                 github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=project_owner,json=projectOwner,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"project_owner,omitempty"`
	ProjectLength                uint64                                        `protobuf:"varint,5,opt,name=project_length,json=projectLength,proto3" json:"project_length,omitempty"`
	ProjectTargetAmount          types.Coin                                    `protobuf:"bytes,6,opt,name=project_target_amount,json=projectTargetAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"project_target_amount"`
	BaseApy                      github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,7,opt,name=base_apy,json=baseApy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"base_apy"`
	PayFreq                      string                                        `protobuf:"bytes,8,opt,name=pay_freq,json=payFreq,proto3" json:"pay_freq,omitempty"`
	WithdrawRequestWindowSeconds int32                                         `protobuf:"varint,9,opt,name=withdraw_request_window_seconds,json=withdrawRequestWindowSeconds,proto3" json:"withdraw_request_window_seconds,omitempty"`
	PoolLockedSeconds            int32                                         `protobuf:"varint,10,opt,name=pool_locked_seconds,json=poolLockedSeconds,proto3" json:"pool_locked_seconds,omitempty"`
	PoolTotalBorrowLimit         int32                                         `protobuf:"varint,11,opt,name=pool_total_borrow_limit,json=poolTotalBorrowLimit,proto3" json:"pool_total_borrow_limit,omitempty"`
	GraceTime                    time.Duration                                 `protobuf:"bytes,12,opt,name=grace_time,json=graceTime,proto3,stdduration" json:"grace_time"`
	MarketId                     string                                        `protobuf:"bytes,13,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	JuniorMinRatio               github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,14,opt,name=junior_min_ratio,json=juniorMinRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"junior_min_ratio"`
}

func (m *ProjectInfo) Reset()         { *m = ProjectInfo{} }
func (m *ProjectInfo) String() string { return proto.CompactTextString(m) }
func (*ProjectInfo) ProtoMessage()    {}
func (*ProjectInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d397e055e79ddcb0, []int{1}
}
func (m *ProjectInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProjectInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProjectInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProjectInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProjectInfo.Merge(m, src)
}
func (m *ProjectInfo) XXX_Size() int {
	return m.Size()
}
func (m *ProjectInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProjectInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProjectInfo proto.InternalMessageInfo

func (m *ProjectInfo) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ProjectInfo) GetSPVName() string {
	if m != nil {
		return m.SPVName
	}
	return ""
}

func (m *ProjectInfo) GetBasicInfo() *BasicInfo {
	if m != nil {
		return m.BasicInfo
	}
	return nil
}

func (m *ProjectInfo) GetProjectOwner() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.ProjectOwner
	}
	return nil
}

func (m *ProjectInfo) GetProjectLength() uint64 {
	if m != nil {
		return m.ProjectLength
	}
	return 0
}

func (m *ProjectInfo) GetProjectTargetAmount() types.Coin {
	if m != nil {
		return m.ProjectTargetAmount
	}
	return types.Coin{}
}

func (m *ProjectInfo) GetPayFreq() string {
	if m != nil {
		return m.PayFreq
	}
	return ""
}

func (m *ProjectInfo) GetWithdrawRequestWindowSeconds() int32 {
	if m != nil {
		return m.WithdrawRequestWindowSeconds
	}
	return 0
}

func (m *ProjectInfo) GetPoolLockedSeconds() int32 {
	if m != nil {
		return m.PoolLockedSeconds
	}
	return 0
}

func (m *ProjectInfo) GetPoolTotalBorrowLimit() int32 {
	if m != nil {
		return m.PoolTotalBorrowLimit
	}
	return 0
}

func (m *ProjectInfo) GetGraceTime() time.Duration {
	if m != nil {
		return m.GraceTime
	}
	return 0
}

func (m *ProjectInfo) GetMarketId() string {
	if m != nil {
		return m.MarketId
	}
	return ""
}

// Params defines the parameters for the module.
type Params struct {
	ProjectsInfo []*ProjectInfo                                  `protobuf:"bytes,1,rep,name=projects_info,json=projectsInfo,proto3" json:"projects_info,omitempty"`
	Submitter    []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,rep,name=submitter,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"submitter,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d397e055e79ddcb0, []int{2}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetProjectsInfo() []*ProjectInfo {
	if m != nil {
		return m.ProjectsInfo
	}
	return nil
}

func (m *Params) GetSubmitter() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Submitter
	}
	return nil
}

func init() {
	proto.RegisterType((*BasicInfo)(nil), "joltify.kyc.BasicInfo")
	proto.RegisterType((*ProjectInfo)(nil), "joltify.kyc.ProjectInfo")
	proto.RegisterType((*Params)(nil), "joltify.kyc.Params")
}

func init() { proto.RegisterFile("joltify/kyc/params.proto", fileDescriptor_d397e055e79ddcb0) }

var fileDescriptor_d397e055e79ddcb0 = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x3f, 0x73, 0xdc, 0x44,
	0x14, 0x3f, 0xc5, 0xff, 0xee, 0xf6, 0x1c, 0x03, 0x6b, 0x03, 0xb2, 0x61, 0xee, 0x8c, 0x67, 0x20,
	0x6e, 0x4e, 0x9a, 0x98, 0x09, 0x05, 0x03, 0x85, 0x15, 0xc3, 0x90, 0x19, 0x13, 0x6e, 0x64, 0x93,
	0xcc, 0xd0, 0xec, 0xac, 0xa4, 0x3d, 0x79, 0x7d, 0xd2, 0xae, 0xbc, 0xbb, 0xca, 0x45, 0x0d, 0x5f,
	0x80, 0x86, 0x32, 0x25, 0x35, 0x75, 0xf8, 0x0e, 0x29, 0x33, 0xa9, 0x18, 0x0a, 0x87, 0xb1, 0xbf,
	0x03, 0x05, 0x15, 0xb3, 0x7f, 0x74, 0x5c, 0xba, 0x14, 0xae, 0xac, 0xf7, 0x7e, 0xbf, 0xf7, 0x67,
	0xdf, 0x7b, 0x3f, 0x1f, 0xf0, 0xcf, 0x79, 0xa1, 0xe8, 0xa4, 0x09, 0xa7, 0x4d, 0x1a, 0x56, 0x58,
	0xe0, 0x52, 0x06, 0x95, 0xe0, 0x8a, 0xc3, 0xbe, 0x43, 0x82, 0x69, 0x93, 0xee, 0x6c, 0xe5, 0x3c,
	0xe7, 0xc6, 0x1f, 0xea, 0x2f, 0x4b, 0xd9, 0xd9, 0x4e, 0xb9, 0x2c, 0xb9, 0x44, 0x16, 0xb0, 0x86,
	0x83, 0x06, 0xd6, 0x0a, 0x13, 0x2c, 0x49, 0xf8, 0xe4, 0x6e, 0x42, 0x14, 0xbe, 0x1b, 0xa6, 0x9c,
	0xb2, 0x16, 0xcf, 0x39, 0xcf, 0x0b, 0x12, 0x1a, 0x2b, 0xa9, 0x27, 0x61, 0x56, 0x0b, 0xac, 0x28,
	0x77, 0xf8, 0xde, 0x2f, 0xb7, 0x40, 0x2f, 0xc2, 0x92, 0xa6, 0x0f, 0xd8, 0x84, 0xc3, 0x5d, 0xd0,
	0xcf, 0x88, 0x4c, 0x05, 0xad, 0x34, 0xc5, 0xf7, 0x76, 0xbd, 0xfd, 0x5e, 0xbc, 0xe8, 0x82, 0x9f,
	0x80, 0xf5, 0x4a, 0xf0, 0x73, 0x92, 0x2a, 0x89, 0x6a, 0x51, 0xf8, 0xb7, 0x2c, 0xa5, 0xf5, 0xfd,
	0x28, 0x0a, 0x78, 0x07, 0xbc, 0xe3, 0x4c, 0x94, 0xf2, 0x9a, 0x29, 0xd1, 0xf8, 0x4b, 0x86, 0xb5,
	0xe1, 0xdc, 0xf7, 0xad, 0x57, 0x13, 0x93, 0x5a, 0x52, 0x46, 0xa4, 0x44, 0xac, 0x2e, 0x13, 0x22,
	0xfc, 0x65, 0x4b, 0x6c, 0xdd, 0x0f, 0x8d, 0x17, 0xee, 0x80, 0xae, 0x20, 0x92, 0x88, 0x27, 0x24,
	0xf3, 0x57, 0x76, 0xbd, 0xfd, 0xf5, 0x78, 0x6e, 0x2f, 0x34, 0x84, 0x18, 0x2e, 0x89, 0xbf, 0xfa,
	0x46, 0x43, 0x0f, 0x71, 0x49, 0xe0, 0x16, 0x58, 0x21, 0x25, 0xa6, 0x85, 0xbf, 0x66, 0x30, 0x6b,
	0x40, 0x08, 0x96, 0x4d, 0x40, 0xd7, 0x38, 0xcd, 0xf7, 0xde, 0x3f, 0xab, 0xa0, 0x3f, 0xb6, 0x91,
	0x66, 0x1e, 0x5b, 0x60, 0x85, 0xb2, 0x8c, 0x3c, 0x35, 0x93, 0x58, 0x89, 0xad, 0x01, 0xb7, 0x41,
	0xf7, 0x64, 0xfc, 0xc8, 0x96, 0xb3, 0xef, 0x5f, 0x3b, 0x19, 0x3f, 0x32, 0xa5, 0xee, 0x01, 0x90,
	0xe8, 0x69, 0x22, 0xca, 0x26, 0xdc, 0x3c, 0xbb, 0x7f, 0xf0, 0x41, 0xb0, 0xb0, 0xe1, 0x60, 0x3e,
	0xec, 0xb8, 0x97, 0xcc, 0xe7, 0x5e, 0x82, 0xdb, 0xed, 0x23, 0xf8, 0x8c, 0xb9, 0x39, 0xac, 0x47,
	0xdf, 0xfd, 0x7b, 0x39, 0x1c, 0xe5, 0x54, 0x9d, 0xd5, 0x49, 0x90, 0xf2, 0xd2, 0x6d, 0xde, 0xfd,
	0x19, 0xc9, 0x6c, 0x1a, 0xaa, 0xa6, 0x22, 0x32, 0x38, 0x4c, 0xd3, 0xc3, 0x2c, 0x13, 0x44, 0xca,
	0x57, 0xcf, 0x47, 0x9b, 0xee, 0x3e, 0x9c, 0x27, 0x6a, 0x14, 0x91, 0x71, 0x3b, 0xa3, 0x1f, 0x74,
	0x76, 0xf8, 0x29, 0x68, 0x57, 0x81, 0x0a, 0xc2, 0x72, 0x75, 0x66, 0xa6, 0xba, 0x1c, 0xb7, 0x4d,
	0x1c, 0x1b, 0x27, 0xfc, 0x19, 0xbc, 0xdf, 0xd2, 0x14, 0x16, 0x39, 0x51, 0x08, 0x97, 0x7a, 0x75,
	0x66, 0xc6, 0xfd, 0x83, 0xed, 0xc0, 0x55, 0xd2, 0xb7, 0x17, 0xb8, 0xdb, 0x0b, 0xee, 0x73, 0xca,
	0xa2, 0xf0, 0xc5, 0xe5, 0xb0, 0xf3, 0xfb, 0xeb, 0xe1, 0x9d, 0xb7, 0x68, 0x5e, 0x07, 0xc4, 0x9b,
	0xae, 0xd0, 0xa9, 0xa9, 0x73, 0x68, 0xca, 0xc0, 0xc7, 0xa0, 0xab, 0x53, 0x23, 0x5c, 0x35, 0x76,
	0x75, 0xd1, 0x57, 0x3a, 0xef, 0x5f, 0x97, 0xc3, 0xcf, 0xde, 0x22, 0xef, 0x11, 0x49, 0x5f, 0x3d,
	0x1f, 0x01, 0xd7, 0xe3, 0x11, 0x49, 0xe3, 0x35, 0x9d, 0xed, 0xb0, 0x6a, 0xf4, 0x02, 0x2b, 0xdc,
	0xa0, 0x89, 0x20, 0x17, 0x6e, 0xfd, 0x6b, 0x15, 0x6e, 0xbe, 0x15, 0xe4, 0x02, 0x7e, 0x03, 0x86,
	0x33, 0xaa, 0xce, 0x32, 0x81, 0x67, 0x48, 0x90, 0x8b, 0x9a, 0x48, 0x85, 0x66, 0x94, 0x65, 0x7c,
	0x86, 0x24, 0x49, 0x39, 0xcb, 0xa4, 0xdf, 0x33, 0xb7, 0xf0, 0x71, 0x4b, 0x8b, 0x2d, 0xeb, 0xb1,
	0x21, 0x9d, 0x58, 0x0e, 0x0c, 0xc0, 0x66, 0xc5, 0x79, 0x81, 0x0a, 0x9e, 0x4e, 0x49, 0x36, 0x0f,
	0x05, 0x26, 0xf4, 0x3d, 0x0d, 0x1d, 0x1b, 0xa4, 0xe5, 0xdf, 0x03, 0x1f, 0x1a, 0xbe, 0xe2, 0x0a,
	0x17, 0x28, 0xe1, 0x42, 0xf0, 0x19, 0x2a, 0x68, 0x49, 0x95, 0xdf, 0x37, 0x31, 0x5b, 0x1a, 0x3e,
	0xd5, 0x68, 0x64, 0xc0, 0x63, 0x8d, 0xc1, 0x08, 0x80, 0x5c, 0xe0, 0x94, 0x20, 0x45, 0x4b, 0xe2,
	0xaf, 0xbb, 0xb5, 0x58, 0xc9, 0x07, 0xad, 0xe4, 0x83, 0x23, 0x27, 0xf9, 0xa8, 0xab, 0xc7, 0xf7,
	0xec, 0xf5, 0xd0, 0x8b, 0x7b, 0x26, 0xec, 0x94, 0x96, 0x04, 0x7e, 0x04, 0x7a, 0x25, 0x16, 0x53,
	0xa2, 0x10, 0xcd, 0xfc, 0xdb, 0x66, 0x1a, 0x5d, 0xeb, 0x78, 0x90, 0xc1, 0x09, 0x78, 0xf7, 0xbc,
	0x66, 0x94, 0x0b, 0x54, 0x52, 0x86, 0x4c, 0x1a, 0x7f, 0xe3, 0x06, 0x56, 0xb1, 0x61, 0xb3, 0x7e,
	0x4f, 0x59, 0xac, 0x73, 0xee, 0xfd, 0xe1, 0x81, 0xd5, 0xb1, 0xf9, 0xaf, 0x08, 0xbf, 0x9e, 0x6b,
	0x41, 0x5a, 0x15, 0x79, 0xbb, 0x4b, 0xfb, 0xfd, 0x03, 0xff, 0x0d, 0x15, 0x2d, 0x88, 0x74, 0x7e,
	0xdb, 0xd2, 0x48, 0x69, 0x02, 0x7a, 0xb2, 0x4e, 0x4a, 0xaa, 0x94, 0x91, 0xd1, 0xd2, 0x8d, 0xca,
	0xe8, 0xff, 0xd4, 0x5f, 0x2e, 0x3f, 0xfb, 0x6d, 0xd8, 0x89, 0xc6, 0x2f, 0xae, 0x06, 0xde, 0xcb,
	0xab, 0x81, 0xf7, 0xf7, 0xd5, 0xc0, 0xfb, 0xf5, 0x7a, 0xd0, 0x79, 0x79, 0x3d, 0xe8, 0xfc, 0x79,
	0x3d, 0xe8, 0xfc, 0xf4, 0xc5, 0x42, 0x41, 0xd7, 0xf9, 0x68, 0x42, 0x19, 0x66, 0x29, 0x69, 0x6d,
	0x2d, 0xbe, 0x8c, 0xb2, 0x3c, 0x7c, 0x6a, 0x7e, 0x15, 0x4c, 0x13, 0xc9, 0xaa, 0x59, 0xdb, 0xe7,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x78, 0x6a, 0x4a, 0x0c, 0x31, 0x06, 0x00, 0x00,
}

func (m *BasicInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BasicInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BasicInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ProjectName) > 0 {
		i -= len(m.ProjectName)
		copy(dAtA[i:], m.ProjectName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProjectName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Reserved) > 0 {
		i -= len(m.Reserved)
		copy(dAtA[i:], m.Reserved)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Reserved)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BusinessNumber) > 0 {
		i -= len(m.BusinessNumber)
		copy(dAtA[i:], m.BusinessNumber)
		i = encodeVarintParams(dAtA, i, uint64(len(m.BusinessNumber)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProjectCountry) > 0 {
		i -= len(m.ProjectCountry)
		copy(dAtA[i:], m.ProjectCountry)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProjectCountry)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ProjectsUrl) > 0 {
		i -= len(m.ProjectsUrl)
		copy(dAtA[i:], m.ProjectsUrl)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProjectsUrl)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProjectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProjectInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.JuniorMinRatio.Size()
		i -= size
		if _, err := m.JuniorMinRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.MarketId) > 0 {
		i -= len(m.MarketId)
		copy(dAtA[i:], m.MarketId)
		i = encodeVarintParams(dAtA, i, uint64(len(m.MarketId)))
		i--
		dAtA[i] = 0x6a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.GraceTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.GraceTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x62
	if m.PoolTotalBorrowLimit != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PoolTotalBorrowLimit))
		i--
		dAtA[i] = 0x58
	}
	if m.PoolLockedSeconds != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.PoolLockedSeconds))
		i--
		dAtA[i] = 0x50
	}
	if m.WithdrawRequestWindowSeconds != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.WithdrawRequestWindowSeconds))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PayFreq) > 0 {
		i -= len(m.PayFreq)
		copy(dAtA[i:], m.PayFreq)
		i = encodeVarintParams(dAtA, i, uint64(len(m.PayFreq)))
		i--
		dAtA[i] = 0x42
	}
	{
		size := m.BaseApy.Size()
		i -= size
		if _, err := m.BaseApy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.ProjectTargetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.ProjectLength != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.ProjectLength))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ProjectOwner) > 0 {
		i -= len(m.ProjectOwner)
		copy(dAtA[i:], m.ProjectOwner)
		i = encodeVarintParams(dAtA, i, uint64(len(m.ProjectOwner)))
		i--
		dAtA[i] = 0x22
	}
	if m.BasicInfo != nil {
		{
			size, err := m.BasicInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintParams(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SPVName) > 0 {
		i -= len(m.SPVName)
		copy(dAtA[i:], m.SPVName)
		i = encodeVarintParams(dAtA, i, uint64(len(m.SPVName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Submitter) > 0 {
		for iNdEx := len(m.Submitter) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Submitter[iNdEx])
			copy(dAtA[i:], m.Submitter[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.Submitter[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ProjectsInfo) > 0 {
		for iNdEx := len(m.ProjectsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProjectsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BasicInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProjectsUrl)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProjectCountry)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.BusinessNumber)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Reserved)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProjectName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	return n
}

func (m *ProjectInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovParams(uint64(m.Index))
	}
	l = len(m.SPVName)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.BasicInfo != nil {
		l = m.BasicInfo.Size()
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.ProjectOwner)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.ProjectLength != 0 {
		n += 1 + sovParams(uint64(m.ProjectLength))
	}
	l = m.ProjectTargetAmount.Size()
	n += 1 + l + sovParams(uint64(l))
	l = m.BaseApy.Size()
	n += 1 + l + sovParams(uint64(l))
	l = len(m.PayFreq)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.WithdrawRequestWindowSeconds != 0 {
		n += 1 + sovParams(uint64(m.WithdrawRequestWindowSeconds))
	}
	if m.PoolLockedSeconds != 0 {
		n += 1 + sovParams(uint64(m.PoolLockedSeconds))
	}
	if m.PoolTotalBorrowLimit != 0 {
		n += 1 + sovParams(uint64(m.PoolTotalBorrowLimit))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.GraceTime)
	n += 1 + l + sovParams(uint64(l))
	l = len(m.MarketId)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = m.JuniorMinRatio.Size()
	n += 1 + l + sovParams(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProjectsInfo) > 0 {
		for _, e := range m.ProjectsInfo {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.Submitter) > 0 {
		for _, b := range m.Submitter {
			l = len(b)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BasicInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BasicInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BasicInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectsUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectsUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectCountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectCountry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BusinessNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BusinessNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reserved", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reserved = append(m.Reserved[:0], dAtA[iNdEx:postIndex]...)
			if m.Reserved == nil {
				m.Reserved = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SPVName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SPVName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BasicInfo == nil {
				m.BasicInfo = &BasicInfo{}
			}
			if err := m.BasicInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectOwner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectOwner = append(m.ProjectOwner[:0], dAtA[iNdEx:postIndex]...)
			if m.ProjectOwner == nil {
				m.ProjectOwner = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectLength", wireType)
			}
			m.ProjectLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectTargetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProjectTargetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseApy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaseApy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayFreq", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayFreq = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawRequestWindowSeconds", wireType)
			}
			m.WithdrawRequestWindowSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawRequestWindowSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolLockedSeconds", wireType)
			}
			m.PoolLockedSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolLockedSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTotalBorrowLimit", wireType)
			}
			m.PoolTotalBorrowLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolTotalBorrowLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraceTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.GraceTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MarketId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JuniorMinRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JuniorMinRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectsInfo = append(m.ProjectsInfo, &ProjectInfo{})
			if err := m.ProjectsInfo[len(m.ProjectsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submitter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submitter = append(m.Submitter, make([]byte, postIndex-iNdEx))
			copy(m.Submitter[len(m.Submitter)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
