// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/dydxprotocol/ratelimit/limit_params.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	github_com_joltify_finance_joltify_lending_dydx_helper_dtypes "github.com/joltify-finance/joltify_lending/dydx_helper/dtypes"
	_ "google.golang.org/protobuf/types/known/durationpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Marshal
	_ = fmt.Errorf
	_ = math.Inf
	_ = time.Kitchen
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LimitParams defines rate limit params on a denom.
type LimitParams struct {
	// denom is the denomination of the token being rate limited.
	// e.g. ibc/65D0BEC6DAD96C7F5043D1E54E54B6BB5D5B3AEC3FF6CEBB75B9E059F3580EA3
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// limiters is a list of rate-limiters on this denom. All limiters
	// must be satified for a withdrawal to proceed.
	Limiters []Limiter `protobuf:"bytes,2,rep,name=limiters,proto3" json:"limiters"`
}

func (m *LimitParams) Reset()         { *m = LimitParams{} }
func (m *LimitParams) String() string { return proto.CompactTextString(m) }
func (*LimitParams) ProtoMessage()    {}
func (*LimitParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e410a72ca1c0f930, []int{0}
}

func (m *LimitParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *LimitParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LimitParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *LimitParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LimitParams.Merge(m, src)
}

func (m *LimitParams) XXX_Size() int {
	return m.Size()
}

func (m *LimitParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LimitParams.DiscardUnknown(m)
}

var xxx_messageInfo_LimitParams proto.InternalMessageInfo

func (m *LimitParams) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *LimitParams) GetLimiters() []Limiter {
	if m != nil {
		return m.Limiters
	}
	return nil
}

// Limiter defines one rate-limiter on a specfic denom.
type Limiter struct {
	// period is the rolling time period for which the limit applies
	// e.g. 3600 (an hour)
	Period time.Duration `protobuf:"bytes,1,opt,name=period,proto3,stdduration" json:"period"`
	// baseline_minimum is the minimum maximum withdrawal coin amount within the
	// time period.
	// e.g. 100_000_000_000 uusdc for 100k USDC; 5e22 adv4tnt for 50k DV4TNT
	BaselineMinimum github_com_joltify_finance_joltify_lending_dydx_helper_dtypes.SerializableInt `protobuf:"bytes,3,opt,name=baseline_minimum,json=baselineMinimum,proto3,customtype=github.com/joltify-finance/joltify_lending/dydx_helper/dtypes.SerializableInt" json:"baseline_minimum"`
	// baseline_tvl_ppm is the maximum ratio of TVL withdrawable in
	// the time period, in part-per-million.
	// e.g. 100_000 (10%)
	BaselineTvlPpm uint32 `protobuf:"varint,4,opt,name=baseline_tvl_ppm,json=baselineTvlPpm,proto3" json:"baseline_tvl_ppm,omitempty"`
}

func (m *Limiter) Reset()         { *m = Limiter{} }
func (m *Limiter) String() string { return proto.CompactTextString(m) }
func (*Limiter) ProtoMessage()    {}
func (*Limiter) Descriptor() ([]byte, []int) {
	return fileDescriptor_e410a72ca1c0f930, []int{1}
}

func (m *Limiter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}

func (m *Limiter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Limiter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}

func (m *Limiter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Limiter.Merge(m, src)
}

func (m *Limiter) XXX_Size() int {
	return m.Size()
}

func (m *Limiter) XXX_DiscardUnknown() {
	xxx_messageInfo_Limiter.DiscardUnknown(m)
}

var xxx_messageInfo_Limiter proto.InternalMessageInfo

func (m *Limiter) GetPeriod() time.Duration {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *Limiter) GetBaselineTvlPpm() uint32 {
	if m != nil {
		return m.BaselineTvlPpm
	}
	return 0
}

func init() {
	proto.RegisterType((*LimitParams)(nil), "joltify.third_party.dydxprotocol.ratelimit.LimitParams")
	proto.RegisterType((*Limiter)(nil), "joltify.third_party.dydxprotocol.ratelimit.Limiter")
}

func init() {
	proto.RegisterFile("joltify/third_party/dydxprotocol/ratelimit/limit_params.proto", fileDescriptor_e410a72ca1c0f930)
}

var fileDescriptor_e410a72ca1c0f930 = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x3d, 0x6f, 0xd4, 0x30,
	0x18, 0xc7, 0x63, 0x5a, 0x4a, 0xc9, 0xf1, 0xa6, 0xa8, 0x43, 0xe8, 0x90, 0x8b, 0x3a, 0x45, 0x48,
	0xd8, 0x52, 0x3b, 0x22, 0x96, 0x88, 0x05, 0xa9, 0x95, 0xaa, 0x40, 0x17, 0x96, 0xc8, 0x39, 0xfb,
	0x72, 0x46, 0x7e, 0x93, 0xe3, 0x54, 0x97, 0x9b, 0xf8, 0x08, 0x8c, 0x7c, 0xa4, 0x1b, 0x6f, 0x44,
	0x0c, 0x07, 0xba, 0xfb, 0x08, 0x7c, 0x01, 0x14, 0x27, 0x39, 0x65, 0xa4, 0x8b, 0xe5, 0xe7, 0xe5,
	0xff, 0xfc, 0x7f, 0xb2, 0x1f, 0xff, 0xfd, 0x57, 0xc5, 0x2d, 0x9b, 0x37, 0xc8, 0x2e, 0x98, 0x21,
	0xb9, 0xc6, 0xc6, 0x36, 0x88, 0x34, 0x64, 0xa9, 0x8d, 0xb2, 0x6a, 0xa6, 0x38, 0x32, 0xd8, 0x52,
	0xce, 0x04, 0xb3, 0xc8, 0x9d, 0x6d, 0x0b, 0x16, 0x15, 0x74, 0xf5, 0xe0, 0x4d, 0x2f, 0x87, 0x23,
	0x39, 0x1c, 0xcb, 0xe1, 0x41, 0x7e, 0x7e, 0x56, 0xaa, 0x52, 0xb9, 0x3c, 0x6a, 0x6f, 0xdd, 0x84,
	0xf3, 0xa8, 0x54, 0xaa, 0xe4, 0x14, 0xb9, 0xa8, 0xa8, 0xe7, 0x88, 0xd4, 0x06, 0x5b, 0xa6, 0x64,
	0x57, 0xbf, 0x58, 0xf9, 0x93, 0xeb, 0x56, 0x7e, 0xeb, 0x6c, 0x83, 0x33, 0xff, 0x31, 0xa1, 0x52,
	0x89, 0x10, 0xc4, 0x20, 0x79, 0x9a, 0x75, 0x41, 0x70, 0xe7, 0x9f, 0x3a, 0x0f, 0x6a, 0xaa, 0xf0,
	0x51, 0x7c, 0x94, 0x4c, 0x2e, 0xaf, 0xe0, 0xff, 0x93, 0xc1, 0xeb, 0x4e, 0x9b, 0x1e, 0xaf, 0xb7,
	0x53, 0x2f, 0x3b, 0x8c, 0xba, 0xf8, 0x0b, 0xfc, 0x27, 0x7d, 0x2d, 0x78, 0xe7, 0x9f, 0x68, 0x6a,
	0x98, 0x22, 0xce, 0x79, 0x72, 0xf9, 0x1a, 0x76, 0xe0, 0x70, 0x00, 0x87, 0x1f, 0x7a, 0xf0, 0xf4,
	0xb4, 0x1d, 0xf3, 0xe3, 0xf7, 0x14, 0x64, 0xbd, 0x24, 0xf8, 0x06, 0xfc, 0x57, 0x05, 0xae, 0x28,
	0x67, 0x92, 0xe6, 0x82, 0x49, 0x26, 0x6a, 0x11, 0x1e, 0xc5, 0x20, 0x79, 0x96, 0xde, 0xb5, 0xcd,
	0xbf, 0xb6, 0xd3, 0x9b, 0x92, 0xd9, 0x45, 0x5d, 0xc0, 0x99, 0x12, 0xa8, 0x47, 0x7f, 0x3b, 0x67,
	0x12, 0xcb, 0x19, 0x1d, 0xe2, 0x9c, 0x53, 0x49, 0x98, 0x2c, 0xdd, 0xff, 0xe4, 0x0b, 0xca, 0x35,
	0x35, 0x88, 0xd8, 0x46, 0xd3, 0x0a, 0x7e, 0xa2, 0x86, 0x61, 0xce, 0x56, 0xb8, 0xe0, 0xf4, 0xa3,
	0xb4, 0xd9, 0xcb, 0xc1, 0xee, 0xa6, 0x73, 0x0b, 0x92, 0x11, 0x81, 0xbd, 0xe7, 0xb9, 0xd6, 0x22,
	0x3c, 0x8e, 0x41, 0xf2, 0x3c, 0x7b, 0x31, 0xe4, 0x3f, 0xdf, 0xf3, 0x5b, 0x2d, 0xd2, 0x72, 0xbd,
	0x8b, 0xc0, 0x66, 0x17, 0x81, 0x3f, 0xbb, 0x08, 0x7c, 0xdf, 0x47, 0xde, 0x66, 0x1f, 0x79, 0x3f,
	0xf7, 0x91, 0xf7, 0xe5, 0x21, 0x8c, 0xcb, 0xf1, 0x46, 0xe5, 0x2d, 0xf1, 0x68, 0x93, 0x1c, 0x73,
	0x71, 0xe2, 0x9e, 0xee, 0xea, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xce, 0x1b, 0xe3, 0x84,
	0x02, 0x00, 0x00,
}

func (m *LimitParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LimitParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LimitParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Limiters) > 0 {
		for iNdEx := len(m.Limiters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Limiters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLimitParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintLimitParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Limiter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Limiter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Limiter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BaselineTvlPpm != 0 {
		i = encodeVarintLimitParams(dAtA, i, uint64(m.BaselineTvlPpm))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.BaselineMinimum.Size()
		i -= size
		if _, err := m.BaselineMinimum.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLimitParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Period, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Period):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintLimitParams(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintLimitParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovLimitParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}

func (m *LimitParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovLimitParams(uint64(l))
	}
	if len(m.Limiters) > 0 {
		for _, e := range m.Limiters {
			l = e.Size()
			n += 1 + l + sovLimitParams(uint64(l))
		}
	}
	return n
}

func (m *Limiter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Period)
	n += 1 + l + sovLimitParams(uint64(l))
	l = m.BaselineMinimum.Size()
	n += 1 + l + sovLimitParams(uint64(l))
	if m.BaselineTvlPpm != 0 {
		n += 1 + sovLimitParams(uint64(m.BaselineTvlPpm))
	}
	return n
}

func sovLimitParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}

func sozLimitParams(x uint64) (n int) {
	return sovLimitParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func (m *LimitParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LimitParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LimitParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLimitParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limiters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimitParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimitParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Limiters = append(m.Limiters, Limiter{})
			if err := m.Limiters[len(m.Limiters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLimitParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *Limiter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLimitParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Limiter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Limiter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLimitParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLimitParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Period, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineMinimum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLimitParams
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLimitParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BaselineMinimum.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaselineTvlPpm", wireType)
			}
			m.BaselineTvlPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLimitParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BaselineTvlPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLimitParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLimitParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func skipLimitParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLimitParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLimitParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLimitParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLimitParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLimitParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLimitParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLimitParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLimitParams = fmt.Errorf("proto: unexpected end of group")
)
