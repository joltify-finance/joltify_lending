// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/third_party/dydxprotocol/rewards/params.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for x/rewards module.
type Params struct {
	// The module account to distribute rewards from.
	TreasuryAccount string `protobuf:"bytes,1,opt,name=treasury_account,json=treasuryAccount,proto3" json:"treasury_account,omitempty"`
	// The denom of the rewards token.
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	// The exponent of converting one unit of `denom` to a full coin.
	// For example, `denom=uatom, denom_exponent=-6` defines that
	// `1 uatom = 10^(-6) ATOM`. This conversion is needed since the
	// `market_id` retrieves the price of a full coin of the reward token.
	DenomExponent int32 `protobuf:"zigzag32,3,opt,name=denom_exponent,json=denomExponent,proto3" json:"denom_exponent,omitempty"`
	// The id of the market that has the price of the rewards token.
	MarketId uint32 `protobuf:"varint,4,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The amount (in ppm) that fees are multiplied by to get
	// the maximum rewards amount.
	FeeMultiplierPpm uint32 `protobuf:"varint,5,opt,name=fee_multiplier_ppm,json=feeMultiplierPpm,proto3" json:"fee_multiplier_ppm,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_adf0a2620e4a40fe, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetTreasuryAccount() string {
	if m != nil {
		return m.TreasuryAccount
	}
	return ""
}

func (m *Params) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Params) GetDenomExponent() int32 {
	if m != nil {
		return m.DenomExponent
	}
	return 0
}

func (m *Params) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Params) GetFeeMultiplierPpm() uint32 {
	if m != nil {
		return m.FeeMultiplierPpm
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "joltify.third_party.dydxprotocol.rewards.Params")
}

func init() {
	proto.RegisterFile("joltify/third_party/dydxprotocol/rewards/params.proto", fileDescriptor_adf0a2620e4a40fe)
}

var fileDescriptor_adf0a2620e4a40fe = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x4f, 0x4a, 0x33, 0x31,
	0x18, 0x87, 0x9b, 0xef, 0xb3, 0xc5, 0x06, 0xaa, 0x35, 0xb8, 0x18, 0x10, 0x42, 0x11, 0x84, 0x11,
	0x74, 0xb2, 0x10, 0x0f, 0xa0, 0xe0, 0x42, 0x44, 0x28, 0x5d, 0xba, 0x09, 0xe9, 0xe4, 0x9d, 0x36,
	0x3a, 0xf9, 0x43, 0x26, 0x83, 0x9d, 0x5b, 0x78, 0x1f, 0x2f, 0xe0, 0xb2, 0x4b, 0x97, 0xd2, 0x5e,
	0x44, 0x4c, 0xa7, 0xa5, 0xbb, 0xbc, 0xcf, 0x2f, 0xcf, 0xe6, 0xc1, 0xb7, 0xaf, 0xb6, 0x0c, 0xaa,
	0x68, 0x58, 0x98, 0x2b, 0x2f, 0xb9, 0x13, 0x3e, 0x34, 0x4c, 0x36, 0x72, 0xe1, 0xbc, 0x0d, 0x36,
	0xb7, 0x25, 0xf3, 0xf0, 0x2e, 0xbc, 0xac, 0x98, 0x13, 0x5e, 0xe8, 0x2a, 0x8b, 0x9c, 0xa4, 0xad,
	0x96, 0xed, 0x69, 0xd9, 0xbe, 0x96, 0xb5, 0xda, 0xf9, 0x27, 0xc2, 0xbd, 0x71, 0x54, 0xc9, 0x25,
	0x1e, 0x06, 0x0f, 0xa2, 0xaa, 0x7d, 0xc3, 0x45, 0x9e, 0xdb, 0xda, 0x84, 0x04, 0x8d, 0x50, 0xda,
	0x9f, 0x1c, 0x6f, 0xf9, 0xdd, 0x06, 0x93, 0x53, 0xdc, 0x95, 0x60, 0xac, 0x4e, 0xfe, 0xc5, 0x7d,
	0x73, 0x90, 0x0b, 0x7c, 0x14, 0x1f, 0x1c, 0x16, 0xce, 0x1a, 0x30, 0x21, 0xf9, 0x3f, 0x42, 0xe9,
	0xc9, 0x64, 0x10, 0xe9, 0x43, 0x0b, 0xc9, 0x19, 0xee, 0x6b, 0xe1, 0xdf, 0x20, 0x70, 0x25, 0x93,
	0x83, 0x11, 0x4a, 0x07, 0x93, 0xc3, 0x0d, 0x78, 0x94, 0xe4, 0x0a, 0x93, 0x02, 0x80, 0xeb, 0xba,
	0x0c, 0xca, 0x95, 0x0a, 0x3c, 0x77, 0x4e, 0x27, 0xdd, 0xf8, 0x6b, 0x58, 0x00, 0x3c, 0xef, 0x86,
	0xb1, 0xd3, 0xf7, 0xf0, 0xb5, 0xa2, 0x68, 0xb9, 0xa2, 0xe8, 0x67, 0x45, 0xd1, 0xc7, 0x9a, 0x76,
	0x96, 0x6b, 0xda, 0xf9, 0x5e, 0xd3, 0xce, 0xcb, 0xd3, 0x4c, 0x85, 0x79, 0x3d, 0xcd, 0x72, 0xab,
	0x59, 0x1b, 0xe3, 0xba, 0x50, 0x46, 0x98, 0x1c, 0xb6, 0x37, 0x2f, 0xc1, 0x48, 0x65, 0x66, 0x6c,
	0xb1, 0x5f, 0x97, 0xff, 0x65, 0xda, 0x55, 0x0d, 0x8d, 0x83, 0x6a, 0xda, 0x8b, 0xd9, 0x6e, 0x7e,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xb2, 0x89, 0xe4, 0x52, 0x8e, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeMultiplierPpm != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.FeeMultiplierPpm))
		i--
		dAtA[i] = 0x28
	}
	if m.MarketId != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x20
	}
	if m.DenomExponent != 0 {
		i = encodeVarintParams(dAtA, i, uint64((uint32(m.DenomExponent)<<1)^uint32((m.DenomExponent>>31))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintParams(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TreasuryAccount) > 0 {
		i -= len(m.TreasuryAccount)
		copy(dAtA[i:], m.TreasuryAccount)
		i = encodeVarintParams(dAtA, i, uint64(len(m.TreasuryAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TreasuryAccount)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if m.DenomExponent != 0 {
		n += 1 + sozParams(uint64(m.DenomExponent))
	}
	if m.MarketId != 0 {
		n += 1 + sovParams(uint64(m.MarketId))
	}
	if m.FeeMultiplierPpm != 0 {
		n += 1 + sovParams(uint64(m.FeeMultiplierPpm))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreasuryAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreasuryAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomExponent", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.DenomExponent = v
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeMultiplierPpm", wireType)
			}
			m.FeeMultiplierPpm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeMultiplierPpm |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
