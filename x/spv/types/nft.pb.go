// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/spv/nft.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "github.com/cosmos/gogoproto/types"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BorrowDetail struct {
	BorrowedAmount types.Coin                             `protobuf:"bytes,1,opt,name=borrowed_amount,json=borrowedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"borrowed_amount"`
	TimeStamp      time.Time                              `protobuf:"bytes,2,opt,name=time_stamp,json=timeStamp,proto3,stdtime" json:"time_stamp"`
	ExchangeRatio  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=exchange_ratio,json=exchangeRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"exchange_ratio"`
}

func (m *BorrowDetail) Reset()         { *m = BorrowDetail{} }
func (m *BorrowDetail) String() string { return proto.CompactTextString(m) }
func (*BorrowDetail) ProtoMessage()    {}
func (*BorrowDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_e522259423be67f7, []int{0}
}
func (m *BorrowDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowDetail.Merge(m, src)
}
func (m *BorrowDetail) XXX_Size() int {
	return m.Size()
}
func (m *BorrowDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowDetail.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowDetail proto.InternalMessageInfo

func (m *BorrowDetail) GetBorrowedAmount() types.Coin {
	if m != nil {
		return m.BorrowedAmount
	}
	return types.Coin{}
}

func (m *BorrowDetail) GetTimeStamp() time.Time {
	if m != nil {
		return m.TimeStamp
	}
	return time.Time{}
}

type NftInfo struct {
	Issuer                     string                                 `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Receiver                   string                                 `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Borrowed                   types.Coin                             `protobuf:"bytes,3,opt,name=borrowed,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"borrowed"`
	LastPayment                time.Time                              `protobuf:"bytes,4,opt,name=last_payment,json=lastPayment,proto3,stdtime" json:"last_payment"`
	TotalLiquidationAmount     github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=total_liquidation_amount,json=totalLiquidationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_liquidation_amount"`
	LastLiquidationPaymentTime time.Time                              `protobuf:"bytes,6,opt,name=last_liquidation_payment_time,json=lastLiquidationPaymentTime,proto3,stdtime" json:"last_liquidation_payment_time"`
	PaymentOffset              uint32                                 `protobuf:"varint,7,opt,name=payment_offset,json=paymentOffset,proto3" json:"payment_offset,omitempty"`
	LiquidationPaymentOffset   uint32                                 `protobuf:"varint,8,opt,name=liquidation_payment_offset,json=liquidationPaymentOffset,proto3" json:"liquidation_payment_offset,omitempty"`
	IncentivePaymentOffset     uint32                                 `protobuf:"varint,9,opt,name=incentive_payment_offset,json=incentivePaymentOffset,proto3" json:"incentive_payment_offset,omitempty"`
}

func (m *NftInfo) Reset()         { *m = NftInfo{} }
func (m *NftInfo) String() string { return proto.CompactTextString(m) }
func (*NftInfo) ProtoMessage()    {}
func (*NftInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e522259423be67f7, []int{1}
}
func (m *NftInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NftInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NftInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NftInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NftInfo.Merge(m, src)
}
func (m *NftInfo) XXX_Size() int {
	return m.Size()
}
func (m *NftInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NftInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NftInfo proto.InternalMessageInfo

func (m *NftInfo) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *NftInfo) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *NftInfo) GetBorrowed() types.Coin {
	if m != nil {
		return m.Borrowed
	}
	return types.Coin{}
}

func (m *NftInfo) GetLastPayment() time.Time {
	if m != nil {
		return m.LastPayment
	}
	return time.Time{}
}

func (m *NftInfo) GetLastLiquidationPaymentTime() time.Time {
	if m != nil {
		return m.LastLiquidationPaymentTime
	}
	return time.Time{}
}

func (m *NftInfo) GetPaymentOffset() uint32 {
	if m != nil {
		return m.PaymentOffset
	}
	return 0
}

func (m *NftInfo) GetLiquidationPaymentOffset() uint32 {
	if m != nil {
		return m.LiquidationPaymentOffset
	}
	return 0
}

func (m *NftInfo) GetIncentivePaymentOffset() uint32 {
	if m != nil {
		return m.IncentivePaymentOffset
	}
	return 0
}

type PaymentItem struct {
	PaymentTime    time.Time  `protobuf:"bytes,1,opt,name=payment_time,json=paymentTime,proto3,stdtime" json:"payment_time"`
	PaymentAmount  types.Coin `protobuf:"bytes,2,opt,name=payment_amount,json=paymentAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"payment_amount"`
	BorrowedAmount types.Coin `protobuf:"bytes,3,opt,name=borrowed_amount,json=borrowedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"borrowed_amount"`
}

func (m *PaymentItem) Reset()         { *m = PaymentItem{} }
func (m *PaymentItem) String() string { return proto.CompactTextString(m) }
func (*PaymentItem) ProtoMessage()    {}
func (*PaymentItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e522259423be67f7, []int{2}
}
func (m *PaymentItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PaymentItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PaymentItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PaymentItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PaymentItem.Merge(m, src)
}
func (m *PaymentItem) XXX_Size() int {
	return m.Size()
}
func (m *PaymentItem) XXX_DiscardUnknown() {
	xxx_messageInfo_PaymentItem.DiscardUnknown(m)
}

var xxx_messageInfo_PaymentItem proto.InternalMessageInfo

func (m *PaymentItem) GetPaymentTime() time.Time {
	if m != nil {
		return m.PaymentTime
	}
	return time.Time{}
}

func (m *PaymentItem) GetPaymentAmount() types.Coin {
	if m != nil {
		return m.PaymentAmount
	}
	return types.Coin{}
}

func (m *PaymentItem) GetBorrowedAmount() types.Coin {
	if m != nil {
		return m.BorrowedAmount
	}
	return types.Coin{}
}

type IncentivePaymentItem struct {
	PaymentTime    time.Time                                `protobuf:"bytes,1,opt,name=payment_time,json=paymentTime,proto3,stdtime" json:"payment_time"`
	PaymentAmount  github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=payment_amount,json=paymentAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"payment_amount"`
	BorrowedAmount types.Coin                               `protobuf:"bytes,3,opt,name=borrowed_amount,json=borrowedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"borrowed_amount"`
}

func (m *IncentivePaymentItem) Reset()         { *m = IncentivePaymentItem{} }
func (m *IncentivePaymentItem) String() string { return proto.CompactTextString(m) }
func (*IncentivePaymentItem) ProtoMessage()    {}
func (*IncentivePaymentItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e522259423be67f7, []int{3}
}
func (m *IncentivePaymentItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePaymentItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePaymentItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePaymentItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePaymentItem.Merge(m, src)
}
func (m *IncentivePaymentItem) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePaymentItem) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePaymentItem.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePaymentItem proto.InternalMessageInfo

func (m *IncentivePaymentItem) GetPaymentTime() time.Time {
	if m != nil {
		return m.PaymentTime
	}
	return time.Time{}
}

func (m *IncentivePaymentItem) GetPaymentAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PaymentAmount
	}
	return nil
}

func (m *IncentivePaymentItem) GetBorrowedAmount() types.Coin {
	if m != nil {
		return m.BorrowedAmount
	}
	return types.Coin{}
}

type BorrowInterest struct {
	PoolIndex                  string                                 `protobuf:"bytes,1,opt,name=pool_index,json=poolIndex,proto3" json:"pool_index,omitempty"`
	Apy                        github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=apy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"apy"`
	PayFreq                    int32                                  `protobuf:"varint,3,opt,name=pay_freq,json=payFreq,proto3" json:"pay_freq,omitempty"`
	IssueTime                  time.Time                              `protobuf:"bytes,4,opt,name=issue_time,json=issueTime,proto3,stdtime" json:"issue_time"`
	BorrowDetails              []BorrowDetail                         `protobuf:"bytes,5,rep,name=borrow_details,json=borrowDetails,proto3" json:"borrow_details"`
	MonthlyRatio               github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=monthly_ratio,json=monthlyRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"monthly_ratio"`
	InterestSPY                github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=interest_sPY,json=interestSPY,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"interest_sPY"`
	Payments                   []*PaymentItem                         `protobuf:"bytes,8,rep,name=payments,proto3" json:"payments,omitempty"`
	InterestPaid               types.Coin                             `protobuf:"bytes,9,opt,name=interestPaid,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"interestPaid"`
	AccInterest                types.Coin                             `protobuf:"bytes,10,opt,name=acc_interest,json=accInterest,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"acc_interest"`
	LiquidationItems           []*LiquidationItem                     `protobuf:"bytes,11,rep,name=liquidation_items,json=liquidationItems,proto3" json:"liquidation_items,omitempty"`
	TotalPaidLiquidationAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,35,opt,name=total_paid_liquidation_amount,json=totalPaidLiquidationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_paid_liquidation_amount"`
	IncentivePayments          []*IncentivePaymentItem                `protobuf:"bytes,12,rep,name=incentive_payments,json=incentivePayments,proto3" json:"incentive_payments,omitempty"`
}

func (m *BorrowInterest) Reset()         { *m = BorrowInterest{} }
func (m *BorrowInterest) String() string { return proto.CompactTextString(m) }
func (*BorrowInterest) ProtoMessage()    {}
func (*BorrowInterest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e522259423be67f7, []int{4}
}
func (m *BorrowInterest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BorrowInterest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BorrowInterest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BorrowInterest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BorrowInterest.Merge(m, src)
}
func (m *BorrowInterest) XXX_Size() int {
	return m.Size()
}
func (m *BorrowInterest) XXX_DiscardUnknown() {
	xxx_messageInfo_BorrowInterest.DiscardUnknown(m)
}

var xxx_messageInfo_BorrowInterest proto.InternalMessageInfo

func (m *BorrowInterest) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

func (m *BorrowInterest) GetPayFreq() int32 {
	if m != nil {
		return m.PayFreq
	}
	return 0
}

func (m *BorrowInterest) GetIssueTime() time.Time {
	if m != nil {
		return m.IssueTime
	}
	return time.Time{}
}

func (m *BorrowInterest) GetBorrowDetails() []BorrowDetail {
	if m != nil {
		return m.BorrowDetails
	}
	return nil
}

func (m *BorrowInterest) GetPayments() []*PaymentItem {
	if m != nil {
		return m.Payments
	}
	return nil
}

func (m *BorrowInterest) GetInterestPaid() types.Coin {
	if m != nil {
		return m.InterestPaid
	}
	return types.Coin{}
}

func (m *BorrowInterest) GetAccInterest() types.Coin {
	if m != nil {
		return m.AccInterest
	}
	return types.Coin{}
}

func (m *BorrowInterest) GetLiquidationItems() []*LiquidationItem {
	if m != nil {
		return m.LiquidationItems
	}
	return nil
}

func (m *BorrowInterest) GetIncentivePayments() []*IncentivePaymentItem {
	if m != nil {
		return m.IncentivePayments
	}
	return nil
}

type LiquidationItem struct {
	Amount                 types.Coin `protobuf:"bytes,1,opt,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"amount"`
	LiquidationPaymentTime time.Time  `protobuf:"bytes,2,opt,name=liquidation_payment_time,json=liquidationPaymentTime,proto3,stdtime" json:"liquidation_payment_time"`
}

func (m *LiquidationItem) Reset()         { *m = LiquidationItem{} }
func (m *LiquidationItem) String() string { return proto.CompactTextString(m) }
func (*LiquidationItem) ProtoMessage()    {}
func (*LiquidationItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_e522259423be67f7, []int{5}
}
func (m *LiquidationItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationItem.Merge(m, src)
}
func (m *LiquidationItem) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationItem) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationItem.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationItem proto.InternalMessageInfo

func (m *LiquidationItem) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *LiquidationItem) GetLiquidationPaymentTime() time.Time {
	if m != nil {
		return m.LiquidationPaymentTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*BorrowDetail)(nil), "joltify.spv.BorrowDetail")
	proto.RegisterType((*NftInfo)(nil), "joltify.spv.NftInfo")
	proto.RegisterType((*PaymentItem)(nil), "joltify.spv.PaymentItem")
	proto.RegisterType((*IncentivePaymentItem)(nil), "joltify.spv.IncentivePaymentItem")
	proto.RegisterType((*BorrowInterest)(nil), "joltify.spv.BorrowInterest")
	proto.RegisterType((*LiquidationItem)(nil), "joltify.spv.Liquidation_item")
}

func init() { proto.RegisterFile("joltify/spv/nft.proto", fileDescriptor_e522259423be67f7) }

var fileDescriptor_e522259423be67f7 = []byte{
	// 940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x57, 0xcf, 0x6e, 0x1b, 0x45,
	0x18, 0xcf, 0x3a, 0x89, 0x63, 0x7f, 0xb6, 0x43, 0x3b, 0x2a, 0xd1, 0xc6, 0x52, 0xec, 0x60, 0x04,
	0xe4, 0x92, 0x5d, 0x0a, 0x08, 0x71, 0xe8, 0x05, 0x37, 0x2a, 0x32, 0xaa, 0x8a, 0xb5, 0xe5, 0x52,
	0x0e, 0xac, 0xc6, 0xeb, 0xf1, 0x66, 0x60, 0x77, 0x66, 0xb3, 0x33, 0x36, 0xf1, 0x89, 0x57, 0xe8,
	0x2b, 0x70, 0xe5, 0xc0, 0x89, 0x07, 0xe0, 0x58, 0x6e, 0x15, 0x07, 0x84, 0x38, 0xb4, 0x28, 0x79,
	0x00, 0x5e, 0x01, 0xcd, 0xec, 0xac, 0xb3, 0x76, 0x8c, 0x14, 0xab, 0xee, 0xa5, 0xa7, 0xec, 0x7c,
	0x33, 0xdf, 0x9f, 0xdf, 0xef, 0x9b, 0x7c, 0xbf, 0x31, 0xbc, 0xfd, 0x1d, 0x8f, 0x24, 0x1d, 0x4d,
	0x5d, 0x91, 0x4c, 0x5c, 0x36, 0x92, 0x4e, 0x92, 0x72, 0xc9, 0x51, 0xcd, 0x98, 0x1d, 0x91, 0x4c,
	0x9a, 0xed, 0x90, 0xf3, 0x30, 0x22, 0xae, 0xde, 0x1a, 0x8c, 0x47, 0xae, 0xa4, 0x31, 0x11, 0x12,
	0xc7, 0x49, 0x76, 0xba, 0x79, 0x27, 0xe4, 0x21, 0xd7, 0x9f, 0xae, 0xfa, 0x32, 0xd6, 0x56, 0xc0,
	0x45, 0xcc, 0x85, 0x3b, 0xc0, 0x82, 0xb8, 0x93, 0xbb, 0x03, 0x22, 0xf1, 0x5d, 0x37, 0xe0, 0x94,
	0x99, 0xfd, 0xfd, 0x6c, 0xdf, 0xcf, 0x1c, 0xb3, 0x45, 0xb6, 0xd5, 0xf9, 0xa5, 0x04, 0xf5, 0x2e,
	0x4f, 0x53, 0xfe, 0xc3, 0x09, 0x91, 0x98, 0x46, 0x48, 0xc2, 0x5b, 0x03, 0xbd, 0x26, 0x43, 0x1f,
	0xc7, 0x7c, 0xcc, 0xa4, 0x6d, 0x1d, 0x5a, 0x47, 0xb5, 0x8f, 0xf6, 0x1d, 0xe3, 0xa8, 0xb2, 0x38,
	0x26, 0x8b, 0x73, 0x9f, 0x53, 0xd6, 0xfd, 0xf0, 0xd9, 0x8b, 0xf6, 0xc6, 0xcf, 0x2f, 0xdb, 0x47,
	0x21, 0x95, 0xa7, 0xe3, 0x81, 0x13, 0xf0, 0xd8, 0x64, 0x31, 0x7f, 0x8e, 0xc5, 0xf0, 0x7b, 0x57,
	0x4e, 0x13, 0x22, 0xb4, 0x83, 0xf0, 0x76, 0xf3, 0x1c, 0x9f, 0xeb, 0x14, 0xe8, 0x3e, 0x80, 0x82,
	0xea, 0x6b, 0xac, 0x76, 0x49, 0x27, 0x6c, 0x3a, 0x19, 0x1b, 0x4e, 0xce, 0x86, 0xf3, 0x75, 0xce,
	0x46, 0xb7, 0xa2, 0x32, 0x3e, 0x7d, 0xd9, 0xb6, 0xbc, 0xaa, 0xf2, 0x7b, 0xac, 0x8c, 0x28, 0x80,
	0x5d, 0x72, 0x1e, 0x9c, 0x62, 0x16, 0x12, 0x3f, 0xc5, 0x92, 0x72, 0x7b, 0xf3, 0xd0, 0x3a, 0xaa,
	0x76, 0xef, 0xa9, 0xc3, 0x7f, 0xbf, 0x68, 0xbf, 0x7f, 0x83, 0xf2, 0x4e, 0x48, 0xf0, 0xc7, 0xaf,
	0xc7, 0x60, 0xa0, 0x9e, 0x90, 0xc0, 0x6b, 0xe4, 0x31, 0x3d, 0x15, 0xb2, 0xf3, 0xef, 0x16, 0xec,
	0x3c, 0x1a, 0xc9, 0x1e, 0x1b, 0x71, 0xb4, 0x07, 0x65, 0x2a, 0xc4, 0x98, 0xa4, 0x9a, 0xa2, 0xaa,
	0x67, 0x56, 0xa8, 0x09, 0x95, 0x94, 0x04, 0x84, 0x4e, 0x48, 0xaa, 0xb1, 0x54, 0xbd, 0xd9, 0x1a,
	0x85, 0x50, 0xc9, 0xb1, 0xeb, 0xf2, 0xd6, 0x4c, 0xec, 0x2c, 0x38, 0xfa, 0x02, 0xea, 0x11, 0x16,
	0xd2, 0x4f, 0xf0, 0x34, 0x26, 0x4c, 0xda, 0x5b, 0x2b, 0x90, 0x5a, 0x53, 0x9e, 0xfd, 0xcc, 0x11,
	0x4d, 0xc0, 0x96, 0x5c, 0xe2, 0xc8, 0x8f, 0xe8, 0xd9, 0x98, 0x0e, 0x15, 0x0b, 0x2c, 0xbf, 0x1a,
	0xdb, 0x2b, 0x13, 0xdc, 0x63, 0xb2, 0x40, 0x70, 0x8f, 0x49, 0x6f, 0x4f, 0x47, 0x7f, 0x78, 0x15,
	0xdc, 0xdc, 0x89, 0x10, 0x0e, 0x34, 0x80, 0x62, 0x5a, 0x03, 0xc6, 0x57, 0x4d, 0xb7, 0xcb, 0x2b,
	0x20, 0x6a, 0xaa, 0x50, 0x85, 0x1c, 0x06, 0x9c, 0x3a, 0x8a, 0xde, 0x83, 0xdd, 0x3c, 0x2e, 0x1f,
	0x8d, 0x04, 0x91, 0xf6, 0xce, 0xa1, 0x75, 0xd4, 0xf0, 0x1a, 0xc6, 0xfa, 0x95, 0x36, 0xa2, 0x7b,
	0xd0, 0x5c, 0x56, 0x8a, 0x71, 0xa9, 0x68, 0x17, 0x3b, 0xba, 0x96, 0xc2, 0x78, 0x7f, 0x06, 0x36,
	0x65, 0x01, 0x61, 0x92, 0x4e, 0xc8, 0xa2, 0x6f, 0x55, 0xfb, 0xee, 0xcd, 0xf6, 0xe7, 0x3c, 0x3b,
	0xbf, 0x95, 0xa0, 0x66, 0x2c, 0x3d, 0x49, 0x62, 0xd5, 0xd8, 0x39, 0x1a, 0xac, 0x55, 0x1a, 0x9b,
	0x14, 0x70, 0xa7, 0x57, 0xb8, 0x4d, 0x3b, 0x4b, 0xeb, 0xbf, 0x90, 0x39, 0x89, 0xa6, 0xa9, 0x4b,
	0xc6, 0xcb, 0xe6, 0x6b, 0x1f, 0x2f, 0x9d, 0xdf, 0x4b, 0x70, 0xa7, 0xb7, 0xc0, 0xee, 0xeb, 0xe7,
	0x72, 0xf3, 0x8d, 0xe4, 0xf2, 0xa7, 0x0a, 0xec, 0x66, 0x8a, 0xd1, 0x63, 0x92, 0xa4, 0x44, 0x48,
	0x74, 0x00, 0x90, 0x70, 0x1e, 0xf9, 0x94, 0x0d, 0xc9, 0xb9, 0x99, 0x85, 0x55, 0x65, 0xe9, 0x29,
	0x03, 0x7a, 0x04, 0x9b, 0x38, 0x99, 0x66, 0x93, 0xf0, 0x15, 0x87, 0xb1, 0x0a, 0x84, 0xf6, 0xa1,
	0x92, 0xe0, 0xa9, 0x3f, 0x4a, 0xc9, 0x99, 0x06, 0xbc, 0xed, 0xed, 0x24, 0x78, 0xfa, 0x20, 0x25,
	0x67, 0x4a, 0x47, 0xf4, 0x0c, 0xce, 0xba, 0xb9, 0xca, 0xc8, 0xab, 0x6a, 0x3f, 0xdd, 0xcb, 0x07,
	0x60, 0x30, 0xfb, 0x43, 0xad, 0x89, 0xc2, 0xde, 0x36, 0xbd, 0x2c, 0x68, 0xb5, 0x53, 0x54, 0xcd,
	0xee, 0x96, 0x8a, 0xe3, 0x35, 0x06, 0x05, 0x9b, 0x40, 0x18, 0x1a, 0x31, 0x67, 0xf2, 0x34, 0x9a,
	0x1a, 0x39, 0x2a, 0xaf, 0x81, 0x81, 0xba, 0x09, 0xa9, 0xd5, 0x08, 0xf9, 0x50, 0xa7, 0xa6, 0x0b,
	0xbe, 0xe8, 0x3f, 0xd1, 0x83, 0xeb, 0x55, 0x33, 0xd4, 0xf2, 0x88, 0x8f, 0xfb, 0x4f, 0xd0, 0x27,
	0x9a, 0x6b, 0x75, 0xe9, 0x84, 0x5d, 0xd1, 0x2c, 0xd8, 0x73, 0x2c, 0x14, 0xfe, 0x99, 0xbc, 0xd9,
	0x49, 0xc4, 0xaf, 0xca, 0xea, 0x63, 0x3a, 0xd4, 0x03, 0x6e, 0xcd, 0xd7, 0x72, 0x2e, 0x01, 0x62,
	0x50, 0xc7, 0x41, 0xe0, 0xe7, 0x36, 0x1b, 0xd6, 0x9f, 0xb0, 0x86, 0x83, 0x60, 0x76, 0xe3, 0xbf,
	0x84, 0xdb, 0x45, 0x2d, 0xa0, 0x92, 0xc4, 0xc2, 0xae, 0x69, 0x7e, 0x0e, 0xe6, 0xf8, 0x79, 0xb8,
	0x70, 0xca, 0xbb, 0x55, 0xf0, 0x53, 0xac, 0x09, 0xf4, 0x23, 0x1c, 0x64, 0xfa, 0x9a, 0x60, 0x3a,
	0x5c, 0x26, 0xb2, 0xef, 0xae, 0x41, 0x64, 0x9b, 0x3a, 0x85, 0xe2, 0xea, 0xba, 0xd0, 0xf6, 0x01,
	0x5d, 0x93, 0x26, 0x61, 0xd7, 0x35, 0x9a, 0x77, 0xe6, 0xd0, 0x2c, 0x9b, 0xa1, 0xde, 0xed, 0x45,
	0xdd, 0x12, 0x9d, 0x3f, 0x2d, 0xb8, 0xb5, 0x88, 0x1c, 0x0d, 0xa0, 0x7c, 0xd3, 0x07, 0xa5, 0x6b,
	0xba, 0xf3, 0xc1, 0x0d, 0xbb, 0xe3, 0x99, 0xc8, 0xe8, 0x5b, 0xb0, 0xff, 0xf7, 0xb9, 0xb0, 0xca,
	0xab, 0x72, 0x2f, 0x5a, 0xfa, 0x54, 0xe8, 0xf6, 0x9f, 0x5d, 0xb4, 0xac, 0xe7, 0x17, 0x2d, 0xeb,
	0x9f, 0x8b, 0x96, 0xf5, 0xf4, 0xb2, 0xb5, 0xf1, 0xfc, 0xb2, 0xb5, 0xf1, 0xd7, 0x65, 0x6b, 0xe3,
	0x9b, 0x4f, 0x0b, 0xa5, 0x1a, 0xca, 0x8e, 0x47, 0x94, 0x61, 0x16, 0x90, 0x7c, 0xed, 0x47, 0x84,
	0x0d, 0x29, 0x0b, 0xdd, 0x73, 0xfd, 0x1b, 0x40, 0x97, 0x3f, 0x28, 0xeb, 0x3a, 0x3e, 0xfe, 0x2f,
	0x00, 0x00, 0xff, 0xff, 0x40, 0x03, 0x46, 0x56, 0x1f, 0x0c, 0x00, 0x00,
}

func (m *BorrowDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExchangeRatio.Size()
		i -= size
		if _, err := m.ExchangeRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.TimeStamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.TimeStamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintNft(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.BorrowedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NftInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NftInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NftInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IncentivePaymentOffset != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.IncentivePaymentOffset))
		i--
		dAtA[i] = 0x48
	}
	if m.LiquidationPaymentOffset != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.LiquidationPaymentOffset))
		i--
		dAtA[i] = 0x40
	}
	if m.PaymentOffset != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.PaymentOffset))
		i--
		dAtA[i] = 0x38
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastLiquidationPaymentTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastLiquidationPaymentTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintNft(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalLiquidationAmount.Size()
		i -= size
		if _, err := m.TotalLiquidationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LastPayment, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastPayment):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintNft(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Borrowed.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintNft(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PaymentItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PaymentItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PaymentItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BorrowedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.PaymentAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PaymentTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PaymentTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintNft(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *IncentivePaymentItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePaymentItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePaymentItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BorrowedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PaymentAmount) > 0 {
		for iNdEx := len(m.PaymentAmount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PaymentAmount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	n10, err10 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PaymentTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PaymentTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintNft(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BorrowInterest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BorrowInterest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BorrowInterest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalPaidLiquidationAmount.Size()
		i -= size
		if _, err := m.TotalPaidLiquidationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x9a
	if len(m.IncentivePayments) > 0 {
		for iNdEx := len(m.IncentivePayments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivePayments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.LiquidationItems) > 0 {
		for iNdEx := len(m.LiquidationItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidationItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	{
		size, err := m.AccInterest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.InterestPaid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if len(m.Payments) > 0 {
		for iNdEx := len(m.Payments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Payments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	{
		size := m.InterestSPY.Size()
		i -= size
		if _, err := m.InterestSPY.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MonthlyRatio.Size()
		i -= size
		if _, err := m.MonthlyRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.BorrowDetails) > 0 {
		for iNdEx := len(m.BorrowDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BorrowDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	n13, err13 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.IssueTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.IssueTime):])
	if err13 != nil {
		return 0, err13
	}
	i -= n13
	i = encodeVarintNft(dAtA, i, uint64(n13))
	i--
	dAtA[i] = 0x22
	if m.PayFreq != 0 {
		i = encodeVarintNft(dAtA, i, uint64(m.PayFreq))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Apy.Size()
		i -= size
		if _, err := m.Apy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintNft(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidationItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n14, err14 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.LiquidationPaymentTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LiquidationPaymentTime):])
	if err14 != nil {
		return 0, err14
	}
	i -= n14
	i = encodeVarintNft(dAtA, i, uint64(n14))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BorrowDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BorrowedAmount.Size()
	n += 1 + l + sovNft(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.TimeStamp)
	n += 1 + l + sovNft(uint64(l))
	l = m.ExchangeRatio.Size()
	n += 1 + l + sovNft(uint64(l))
	return n
}

func (m *NftInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = m.Borrowed.Size()
	n += 1 + l + sovNft(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastPayment)
	n += 1 + l + sovNft(uint64(l))
	l = m.TotalLiquidationAmount.Size()
	n += 1 + l + sovNft(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LastLiquidationPaymentTime)
	n += 1 + l + sovNft(uint64(l))
	if m.PaymentOffset != 0 {
		n += 1 + sovNft(uint64(m.PaymentOffset))
	}
	if m.LiquidationPaymentOffset != 0 {
		n += 1 + sovNft(uint64(m.LiquidationPaymentOffset))
	}
	if m.IncentivePaymentOffset != 0 {
		n += 1 + sovNft(uint64(m.IncentivePaymentOffset))
	}
	return n
}

func (m *PaymentItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PaymentTime)
	n += 1 + l + sovNft(uint64(l))
	l = m.PaymentAmount.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.BorrowedAmount.Size()
	n += 1 + l + sovNft(uint64(l))
	return n
}

func (m *IncentivePaymentItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PaymentTime)
	n += 1 + l + sovNft(uint64(l))
	if len(m.PaymentAmount) > 0 {
		for _, e := range m.PaymentAmount {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	l = m.BorrowedAmount.Size()
	n += 1 + l + sovNft(uint64(l))
	return n
}

func (m *BorrowInterest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	l = m.Apy.Size()
	n += 1 + l + sovNft(uint64(l))
	if m.PayFreq != 0 {
		n += 1 + sovNft(uint64(m.PayFreq))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.IssueTime)
	n += 1 + l + sovNft(uint64(l))
	if len(m.BorrowDetails) > 0 {
		for _, e := range m.BorrowDetails {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	l = m.MonthlyRatio.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.InterestSPY.Size()
	n += 1 + l + sovNft(uint64(l))
	if len(m.Payments) > 0 {
		for _, e := range m.Payments {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	l = m.InterestPaid.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.AccInterest.Size()
	n += 1 + l + sovNft(uint64(l))
	if len(m.LiquidationItems) > 0 {
		for _, e := range m.LiquidationItems {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	if len(m.IncentivePayments) > 0 {
		for _, e := range m.IncentivePayments {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	l = m.TotalPaidLiquidationAmount.Size()
	n += 2 + l + sovNft(uint64(l))
	return n
}

func (m *LiquidationItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovNft(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.LiquidationPaymentTime)
	n += 1 + l + sovNft(uint64(l))
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BorrowDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.TimeStamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExchangeRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExchangeRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NftInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NftInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NftInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Borrowed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Borrowed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPayment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastPayment, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLiquidationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastLiquidationPaymentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LastLiquidationPaymentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentOffset", wireType)
			}
			m.PaymentOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPaymentOffset", wireType)
			}
			m.LiquidationPaymentOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LiquidationPaymentOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivePaymentOffset", wireType)
			}
			m.IncentivePaymentOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncentivePaymentOffset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PaymentItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PaymentItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PaymentItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PaymentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PaymentAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePaymentItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivePaymentItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivePaymentItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PaymentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentAmount = append(m.PaymentAmount, types.Coin{})
			if err := m.PaymentAmount[len(m.PaymentAmount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BorrowInterest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BorrowInterest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BorrowInterest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Apy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayFreq", wireType)
			}
			m.PayFreq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayFreq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssueTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.IssueTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorrowDetails = append(m.BorrowDetails, BorrowDetail{})
			if err := m.BorrowDetails[len(m.BorrowDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonthlyRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MonthlyRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestSPY", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestSPY.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payments = append(m.Payments, &PaymentItem{})
			if err := m.Payments[len(m.Payments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InterestPaid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InterestPaid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccInterest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccInterest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidationItems = append(m.LiquidationItems, &LiquidationItem{})
			if err := m.LiquidationItems[len(m.LiquidationItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivePayments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivePayments = append(m.IncentivePayments, &IncentivePaymentItem{})
			if err := m.IncentivePayments[len(m.IncentivePayments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 35:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPaidLiquidationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPaidLiquidationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidationItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liquidation_item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liquidation_item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationPaymentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.LiquidationPaymentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
