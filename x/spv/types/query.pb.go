// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/spv/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryListPoolsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListPoolsRequest) Reset()         { *m = QueryListPoolsRequest{} }
func (m *QueryListPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryListPoolsRequest) ProtoMessage()    {}
func (*QueryListPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{2}
}
func (m *QueryListPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPoolsRequest.Merge(m, src)
}
func (m *QueryListPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPoolsRequest proto.InternalMessageInfo

func (m *QueryListPoolsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryListPoolsResponse struct {
	PoolsInfo  []*PoolInfo         `protobuf:"bytes,1,rep,name=pools_info,json=poolsInfo,proto3" json:"pools_info,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryListPoolsResponse) Reset()         { *m = QueryListPoolsResponse{} }
func (m *QueryListPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryListPoolsResponse) ProtoMessage()    {}
func (*QueryListPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{3}
}
func (m *QueryListPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryListPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryListPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryListPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryListPoolsResponse.Merge(m, src)
}
func (m *QueryListPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryListPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryListPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryListPoolsResponse proto.InternalMessageInfo

func (m *QueryListPoolsResponse) GetPoolsInfo() []*PoolInfo {
	if m != nil {
		return m.PoolsInfo
	}
	return nil
}

func (m *QueryListPoolsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryQueryPoolRequest struct {
	PoolIndex string `protobuf:"bytes,1,opt,name=poolIndex,proto3" json:"poolIndex,omitempty"`
}

func (m *QueryQueryPoolRequest) Reset()         { *m = QueryQueryPoolRequest{} }
func (m *QueryQueryPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryQueryPoolRequest) ProtoMessage()    {}
func (*QueryQueryPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{4}
}
func (m *QueryQueryPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueryPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueryPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueryPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueryPoolRequest.Merge(m, src)
}
func (m *QueryQueryPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueryPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueryPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueryPoolRequest proto.InternalMessageInfo

func (m *QueryQueryPoolRequest) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

type QueryQueryPoolResponse struct {
	PoolInfo *PoolInfo `protobuf:"bytes,1,opt,name=poolInfo,proto3" json:"poolInfo,omitempty"`
}

func (m *QueryQueryPoolResponse) Reset()         { *m = QueryQueryPoolResponse{} }
func (m *QueryQueryPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryQueryPoolResponse) ProtoMessage()    {}
func (*QueryQueryPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{5}
}
func (m *QueryQueryPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryQueryPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryQueryPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryQueryPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryQueryPoolResponse.Merge(m, src)
}
func (m *QueryQueryPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryQueryPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryQueryPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryQueryPoolResponse proto.InternalMessageInfo

func (m *QueryQueryPoolResponse) GetPoolInfo() *PoolInfo {
	if m != nil {
		return m.PoolInfo
	}
	return nil
}

type QueryDepositorRequest struct {
	WalletAddress    string `protobuf:"bytes,1,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
	DepositPoolIndex string `protobuf:"bytes,2,opt,name=depositPoolIndex,proto3" json:"depositPoolIndex,omitempty"`
}

func (m *QueryDepositorRequest) Reset()         { *m = QueryDepositorRequest{} }
func (m *QueryDepositorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDepositorRequest) ProtoMessage()    {}
func (*QueryDepositorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{6}
}
func (m *QueryDepositorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositorRequest.Merge(m, src)
}
func (m *QueryDepositorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositorRequest proto.InternalMessageInfo

func (m *QueryDepositorRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *QueryDepositorRequest) GetDepositPoolIndex() string {
	if m != nil {
		return m.DepositPoolIndex
	}
	return ""
}

type QueryDepositorResponse struct {
	Depositor *DepositorInfo `protobuf:"bytes,1,opt,name=depositor,proto3" json:"depositor,omitempty"`
}

func (m *QueryDepositorResponse) Reset()         { *m = QueryDepositorResponse{} }
func (m *QueryDepositorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDepositorResponse) ProtoMessage()    {}
func (*QueryDepositorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{7}
}
func (m *QueryDepositorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDepositorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDepositorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDepositorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDepositorResponse.Merge(m, src)
}
func (m *QueryDepositorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDepositorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDepositorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDepositorResponse proto.InternalMessageInfo

func (m *QueryDepositorResponse) GetDepositor() *DepositorInfo {
	if m != nil {
		return m.Depositor
	}
	return nil
}

type QueryAllowedPoolsRequest struct {
	WalletAddress string `protobuf:"bytes,1,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
}

func (m *QueryAllowedPoolsRequest) Reset()         { *m = QueryAllowedPoolsRequest{} }
func (m *QueryAllowedPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedPoolsRequest) ProtoMessage()    {}
func (*QueryAllowedPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{8}
}
func (m *QueryAllowedPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedPoolsRequest.Merge(m, src)
}
func (m *QueryAllowedPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedPoolsRequest proto.InternalMessageInfo

func (m *QueryAllowedPoolsRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

type QueryAllowedPoolsResponse struct {
	PoolsIndex []string `protobuf:"bytes,1,rep,name=pools_index,json=poolsIndex,proto3" json:"pools_index,omitempty"`
}

func (m *QueryAllowedPoolsResponse) Reset()         { *m = QueryAllowedPoolsResponse{} }
func (m *QueryAllowedPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowedPoolsResponse) ProtoMessage()    {}
func (*QueryAllowedPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{9}
}
func (m *QueryAllowedPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowedPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowedPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowedPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowedPoolsResponse.Merge(m, src)
}
func (m *QueryAllowedPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowedPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowedPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowedPoolsResponse proto.InternalMessageInfo

func (m *QueryAllowedPoolsResponse) GetPoolsIndex() []string {
	if m != nil {
		return m.PoolsIndex
	}
	return nil
}

type QueryClaimableInterestRequest struct {
	Wallet    string `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	PoolIndex string `protobuf:"bytes,2,opt,name=pool_index,json=poolIndex,proto3" json:"pool_index,omitempty"`
}

func (m *QueryClaimableInterestRequest) Reset()         { *m = QueryClaimableInterestRequest{} }
func (m *QueryClaimableInterestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryClaimableInterestRequest) ProtoMessage()    {}
func (*QueryClaimableInterestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{10}
}
func (m *QueryClaimableInterestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimableInterestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimableInterestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimableInterestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimableInterestRequest.Merge(m, src)
}
func (m *QueryClaimableInterestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimableInterestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimableInterestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimableInterestRequest proto.InternalMessageInfo

func (m *QueryClaimableInterestRequest) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

func (m *QueryClaimableInterestRequest) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

type QueryClaimableInterestResponse struct {
	ClaimableInterestAmount types.Coin `protobuf:"bytes,6,opt,name=claimable_interest_amount,json=claimableInterestAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"claimable_interest_amount"`
}

func (m *QueryClaimableInterestResponse) Reset()         { *m = QueryClaimableInterestResponse{} }
func (m *QueryClaimableInterestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryClaimableInterestResponse) ProtoMessage()    {}
func (*QueryClaimableInterestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{11}
}
func (m *QueryClaimableInterestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryClaimableInterestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryClaimableInterestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryClaimableInterestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryClaimableInterestResponse.Merge(m, src)
}
func (m *QueryClaimableInterestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryClaimableInterestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryClaimableInterestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryClaimableInterestResponse proto.InternalMessageInfo

func (m *QueryClaimableInterestResponse) GetClaimableInterestAmount() types.Coin {
	if m != nil {
		return m.ClaimableInterestAmount
	}
	return types.Coin{}
}

type QueryOutstandingInterestRequest struct {
	Wallet    string `protobuf:"bytes,1,opt,name=wallet,proto3" json:"wallet,omitempty"`
	PoolIndex string `protobuf:"bytes,2,opt,name=poolIndex,proto3" json:"poolIndex,omitempty"`
}

func (m *QueryOutstandingInterestRequest) Reset()         { *m = QueryOutstandingInterestRequest{} }
func (m *QueryOutstandingInterestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOutstandingInterestRequest) ProtoMessage()    {}
func (*QueryOutstandingInterestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{12}
}
func (m *QueryOutstandingInterestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutstandingInterestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutstandingInterestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutstandingInterestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutstandingInterestRequest.Merge(m, src)
}
func (m *QueryOutstandingInterestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutstandingInterestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutstandingInterestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutstandingInterestRequest proto.InternalMessageInfo

func (m *QueryOutstandingInterestRequest) GetWallet() string {
	if m != nil {
		return m.Wallet
	}
	return ""
}

func (m *QueryOutstandingInterestRequest) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

type QueryOutstandingInterestResponse struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QueryOutstandingInterestResponse) Reset()         { *m = QueryOutstandingInterestResponse{} }
func (m *QueryOutstandingInterestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOutstandingInterestResponse) ProtoMessage()    {}
func (*QueryOutstandingInterestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{13}
}
func (m *QueryOutstandingInterestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOutstandingInterestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOutstandingInterestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOutstandingInterestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOutstandingInterestResponse.Merge(m, src)
}
func (m *QueryOutstandingInterestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOutstandingInterestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOutstandingInterestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOutstandingInterestResponse proto.InternalMessageInfo

func (m *QueryOutstandingInterestResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

type QuerywithdrawalPrincipalRequest struct {
	PoolIndex     string `protobuf:"bytes,1,opt,name=poolIndex,proto3" json:"poolIndex,omitempty"`
	WalletAddress string `protobuf:"bytes,2,opt,name=walletAddress,proto3" json:"walletAddress,omitempty"`
}

func (m *QuerywithdrawalPrincipalRequest) Reset()         { *m = QuerywithdrawalPrincipalRequest{} }
func (m *QuerywithdrawalPrincipalRequest) String() string { return proto.CompactTextString(m) }
func (*QuerywithdrawalPrincipalRequest) ProtoMessage()    {}
func (*QuerywithdrawalPrincipalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{14}
}
func (m *QuerywithdrawalPrincipalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerywithdrawalPrincipalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerywithdrawalPrincipalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerywithdrawalPrincipalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerywithdrawalPrincipalRequest.Merge(m, src)
}
func (m *QuerywithdrawalPrincipalRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerywithdrawalPrincipalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerywithdrawalPrincipalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerywithdrawalPrincipalRequest proto.InternalMessageInfo

func (m *QuerywithdrawalPrincipalRequest) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

func (m *QuerywithdrawalPrincipalRequest) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

type QuerywithdrawalPrincipalResponse struct {
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *QuerywithdrawalPrincipalResponse) Reset()         { *m = QuerywithdrawalPrincipalResponse{} }
func (m *QuerywithdrawalPrincipalResponse) String() string { return proto.CompactTextString(m) }
func (*QuerywithdrawalPrincipalResponse) ProtoMessage()    {}
func (*QuerywithdrawalPrincipalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ad7ca650742ee34, []int{15}
}
func (m *QuerywithdrawalPrincipalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerywithdrawalPrincipalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerywithdrawalPrincipalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerywithdrawalPrincipalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerywithdrawalPrincipalResponse.Merge(m, src)
}
func (m *QuerywithdrawalPrincipalResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerywithdrawalPrincipalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerywithdrawalPrincipalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerywithdrawalPrincipalResponse proto.InternalMessageInfo

func (m *QuerywithdrawalPrincipalResponse) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "joltify.spv.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "joltify.spv.QueryParamsResponse")
	proto.RegisterType((*QueryListPoolsRequest)(nil), "joltify.spv.QueryListPoolsRequest")
	proto.RegisterType((*QueryListPoolsResponse)(nil), "joltify.spv.QueryListPoolsResponse")
	proto.RegisterType((*QueryQueryPoolRequest)(nil), "joltify.spv.QueryQueryPoolRequest")
	proto.RegisterType((*QueryQueryPoolResponse)(nil), "joltify.spv.QueryQueryPoolResponse")
	proto.RegisterType((*QueryDepositorRequest)(nil), "joltify.spv.QueryDepositorRequest")
	proto.RegisterType((*QueryDepositorResponse)(nil), "joltify.spv.QueryDepositorResponse")
	proto.RegisterType((*QueryAllowedPoolsRequest)(nil), "joltify.spv.QueryAllowedPoolsRequest")
	proto.RegisterType((*QueryAllowedPoolsResponse)(nil), "joltify.spv.QueryAllowedPoolsResponse")
	proto.RegisterType((*QueryClaimableInterestRequest)(nil), "joltify.spv.QueryClaimableInterestRequest")
	proto.RegisterType((*QueryClaimableInterestResponse)(nil), "joltify.spv.QueryClaimableInterestResponse")
	proto.RegisterType((*QueryOutstandingInterestRequest)(nil), "joltify.spv.QueryOutstandingInterestRequest")
	proto.RegisterType((*QueryOutstandingInterestResponse)(nil), "joltify.spv.QueryOutstandingInterestResponse")
	proto.RegisterType((*QuerywithdrawalPrincipalRequest)(nil), "joltify.spv.QuerywithdrawalPrincipalRequest")
	proto.RegisterType((*QuerywithdrawalPrincipalResponse)(nil), "joltify.spv.QuerywithdrawalPrincipalResponse")
}

func init() { proto.RegisterFile("joltify/spv/query.proto", fileDescriptor_4ad7ca650742ee34) }

var fileDescriptor_4ad7ca650742ee34 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xbd, 0x2e, 0x58, 0xf8, 0x05, 0x24, 0x98, 0xb4, 0x89, 0xbd, 0x6a, 0xed, 0x68, 0x4b,
	0x83, 0x95, 0x90, 0xdd, 0x26, 0x85, 0xaa, 0x42, 0x08, 0x91, 0x14, 0x28, 0x11, 0x54, 0x18, 0x1f,
	0x40, 0xe2, 0x62, 0x8d, 0xbd, 0x13, 0x77, 0x60, 0xbd, 0xb3, 0xdd, 0x59, 0x27, 0x8d, 0xaa, 0x1c,
	0x40, 0x48, 0xbd, 0x22, 0x38, 0x70, 0xe3, 0x0f, 0xe8, 0x91, 0xff, 0x80, 0x5b, 0x8f, 0x91, 0xb8,
	0x70, 0x02, 0x94, 0xf0, 0x87, 0xa0, 0x9d, 0x79, 0xbb, 0xde, 0xf5, 0xae, 0x13, 0x9f, 0xe2, 0x9d,
	0x79, 0x3f, 0x3e, 0xef, 0xcd, 0x9b, 0xef, 0x04, 0x56, 0xbf, 0x15, 0x5e, 0xc4, 0x0f, 0x8e, 0x1d,
	0x19, 0x1c, 0x3a, 0x8f, 0x27, 0x2c, 0x3c, 0xb6, 0x83, 0x50, 0x44, 0x82, 0x2c, 0xe1, 0x86, 0x2d,
	0x83, 0x43, 0xf3, 0xea, 0x48, 0x8c, 0x84, 0x5a, 0x77, 0xe2, 0x5f, 0xda, 0xc4, 0xbc, 0x3e, 0x12,
	0x62, 0xe4, 0x31, 0x87, 0x06, 0xdc, 0xa1, 0xbe, 0x2f, 0x22, 0x1a, 0x71, 0xe1, 0x4b, 0xdc, 0xdd,
	0x18, 0x0a, 0x39, 0x16, 0xd2, 0x19, 0x50, 0xc9, 0x74, 0x64, 0xe7, 0x70, 0x7b, 0xc0, 0x22, 0xba,
	0xed, 0x04, 0x74, 0xc4, 0x7d, 0x65, 0x8c, 0xb6, 0x66, 0x96, 0x22, 0x10, 0xc2, 0xe3, 0xfe, 0x41,
	0x92, 0xa5, 0x95, 0x8d, 0x93, 0x44, 0x18, 0x0a, 0x9e, 0xf8, 0x36, 0xb3, 0xbe, 0x2e, 0x0b, 0x84,
	0xe4, 0x11, 0x6e, 0x35, 0x72, 0x61, 0x69, 0x48, 0xc7, 0x08, 0x67, 0x5d, 0x05, 0xf2, 0x65, 0x8c,
	0xd4, 0x55, 0x8b, 0x3d, 0xf6, 0x78, 0xc2, 0x64, 0x64, 0x7d, 0x0a, 0xcb, 0xb9, 0x55, 0x19, 0x08,
	0x5f, 0x32, 0xb2, 0x0d, 0x35, 0xed, 0xdc, 0x30, 0xd6, 0x8c, 0xce, 0xd2, 0xce, 0xb2, 0x9d, 0xe9,
	0x8d, 0xad, 0x8d, 0xf7, 0x5e, 0x7a, 0xf1, 0x77, 0xbb, 0xd2, 0x43, 0x43, 0xab, 0x0f, 0xd7, 0x54,
	0xa4, 0xcf, 0xb9, 0x8c, 0xba, 0x42, 0x78, 0x49, 0x0a, 0xf2, 0x09, 0xc0, 0xb4, 0x7a, 0x8c, 0xb7,
	0x6e, 0xeb, 0x12, 0xed, 0xb8, 0x44, 0x5b, 0x1f, 0x02, 0x16, 0x6a, 0x77, 0xe9, 0x88, 0xa1, 0x6f,
	0x2f, 0xe3, 0x69, 0xfd, 0x6a, 0xc0, 0xca, 0x6c, 0x06, 0xc4, 0x7d, 0x07, 0x20, 0x6e, 0xa1, 0xec,
	0xc7, 0x4d, 0x6c, 0x18, 0x6b, 0x57, 0x3a, 0x4b, 0x3b, 0xd7, 0xf2, 0xc8, 0x42, 0x78, 0xfb, 0xfe,
	0x81, 0xe8, 0xd5, 0x95, 0x61, 0xfc, 0x93, 0x3c, 0xc8, 0x81, 0x55, 0x15, 0xd8, 0x5b, 0x97, 0x82,
	0xe9, 0x94, 0x39, 0xb2, 0x77, 0xb1, 0x74, 0xdd, 0x49, 0x21, 0xbc, 0xa4, 0xf4, 0xeb, 0xa0, 0xd2,
	0xed, 0xfb, 0x2e, 0x7b, 0xa2, 0x2a, 0xaf, 0xf7, 0xa6, 0x0b, 0xd6, 0x67, 0x58, 0x4f, 0xc6, 0x2d,
	0x6d, 0xff, 0x2b, 0x01, 0x02, 0x63, 0xc3, 0xe6, 0x54, 0x93, 0x9a, 0x59, 0x1c, 0x19, 0x3e, 0xd2,
	0xe3, 0x20, 0xc2, 0x84, 0xe1, 0x4d, 0x78, 0xed, 0x88, 0x7a, 0x1e, 0x8b, 0x76, 0x5d, 0x37, 0x64,
	0x52, 0x22, 0x47, 0x7e, 0x91, 0x6c, 0xc0, 0xeb, 0x38, 0x48, 0xdd, 0x14, 0xb8, 0xaa, 0x0c, 0x0b,
	0xeb, 0x56, 0x0f, 0xb9, 0x33, 0xa9, 0x90, 0xfb, 0x1e, 0xd4, 0xdd, 0x64, 0x11, 0xc1, 0xcd, 0x1c,
	0x78, 0xea, 0xa2, 0xcf, 0x22, 0x35, 0xb6, 0x3e, 0x84, 0x86, 0x8a, 0xb9, 0xeb, 0x79, 0xe2, 0x88,
	0xb9, 0xb9, 0x01, 0x5a, 0xa8, 0x02, 0xeb, 0x7d, 0x68, 0x96, 0x44, 0x40, 0xb0, 0x36, 0x2c, 0x25,
	0x03, 0xa2, 0x8f, 0xe2, 0x4a, 0xa7, 0xde, 0x03, 0x1c, 0x85, 0xb8, 0xa6, 0xaf, 0xe0, 0x86, 0xf2,
	0xbe, 0xef, 0x51, 0x3e, 0xa6, 0x03, 0x8f, 0xed, 0xfb, 0x11, 0x0b, 0xe3, 0x11, 0x44, 0x88, 0x15,
	0xa8, 0xe9, 0x7c, 0x98, 0x1d, 0xbf, 0xc8, 0x0d, 0x3d, 0x7a, 0x18, 0xb8, 0x3a, 0x7b, 0xc6, 0xcf,
	0x0d, 0x68, 0xcd, 0x0b, 0x8c, 0x6c, 0xcf, 0x0c, 0x68, 0x0e, 0x93, 0xdd, 0x3e, 0xc7, 0xed, 0x3e,
	0x1d, 0x8b, 0x89, 0x1f, 0x35, 0x6a, 0xaa, 0x8b, 0xcd, 0xdc, 0x58, 0x26, 0x03, 0x79, 0x5f, 0x70,
	0x7f, 0xef, 0x76, 0x7c, 0x0b, 0x9f, 0xff, 0xd3, 0xee, 0x8c, 0x78, 0xf4, 0x68, 0x32, 0xb0, 0x87,
	0x62, 0xec, 0xa0, 0x7e, 0xe8, 0x3f, 0x5b, 0xd2, 0xfd, 0xce, 0x89, 0x8e, 0x03, 0x26, 0x95, 0x83,
	0xec, 0xad, 0x0e, 0x67, 0x59, 0x76, 0x55, 0x2e, 0xeb, 0x6b, 0x68, 0x2b, 0xd6, 0x2f, 0x26, 0x91,
	0x8c, 0xa8, 0xef, 0x72, 0x7f, 0xb4, 0x68, 0x1b, 0x72, 0x93, 0x5e, 0xe8, 0xc2, 0x7b, 0xb0, 0x36,
	0x3f, 0x30, 0xb6, 0x61, 0x05, 0x6a, 0x58, 0x32, 0x46, 0xd6, 0x5f, 0x16, 0x43, 0xa8, 0x23, 0x1e,
	0x3d, 0x72, 0x43, 0x7a, 0x44, 0xbd, 0x6e, 0xc8, 0xfd, 0x21, 0x0f, 0xe8, 0x62, 0xd7, 0xac, 0x38,
	0x3e, 0xd5, 0xb2, 0xf1, 0x49, 0x10, 0x4b, 0xd3, 0x5c, 0x8c, 0xb8, 0xf3, 0xac, 0x0e, 0x2f, 0x2b,
	0x67, 0xf2, 0x10, 0x6a, 0x5a, 0x1c, 0x49, 0x3b, 0x37, 0xf7, 0x45, 0xe5, 0x35, 0xd7, 0xe6, 0x1b,
	0xe8, 0x74, 0x56, 0x85, 0x4c, 0xa0, 0x9e, 0x8a, 0x1d, 0xb1, 0x8a, 0x0e, 0xb3, 0x5a, 0x6b, 0xde,
	0xbc, 0xd0, 0x06, 0xe3, 0xb6, 0x7f, 0xf8, 0xf3, 0xbf, 0x5f, 0xaa, 0x4d, 0xb2, 0xea, 0x64, 0x1f,
	0x0b, 0x8f, 0xcb, 0xa8, 0xaf, 0x6e, 0x04, 0xf9, 0xde, 0x80, 0x7a, 0x2a, 0x4a, 0x65, 0x79, 0x67,
	0x85, 0xae, 0x2c, 0x6f, 0x41, 0xd5, 0xac, 0x4d, 0x95, 0xf7, 0x16, 0xb9, 0xe9, 0x14, 0x5e, 0x60,
	0x95, 0xd8, 0x79, 0x9a, 0x1e, 0xda, 0x09, 0xf9, 0xd1, 0x80, 0x7a, 0xaa, 0x16, 0x65, 0x0c, 0xb3,
	0x42, 0x57, 0xc6, 0x50, 0x50, 0x28, 0xcb, 0x56, 0x0c, 0x1d, 0xb2, 0xee, 0x94, 0xbc, 0xa1, 0x22,
	0x74, 0x9e, 0xe6, 0xa6, 0xe2, 0x84, 0xfc, 0x6c, 0xc0, 0xab, 0x59, 0x45, 0x21, 0xb7, 0x8a, 0x59,
	0x4a, 0x34, 0xcb, 0x5c, 0xbf, 0xcc, 0x0c, 0x79, 0xee, 0x28, 0x9e, 0x2d, 0xb2, 0x99, 0xe5, 0x61,
	0x0e, 0xd5, 0xb6, 0xfa, 0x3c, 0x0a, 0x50, 0xbf, 0x1b, 0xb0, 0x5c, 0x72, 0x95, 0xc8, 0xdb, 0xc5,
	0xa4, 0xf3, 0xaf, 0xb2, 0xb9, 0xb5, 0xa0, 0x35, 0x92, 0x7e, 0xa0, 0x48, 0xef, 0x91, 0xbb, 0xb9,
	0xce, 0x89, 0xa9, 0x47, 0x2a, 0x5d, 0x09, 0xef, 0x49, 0xee, 0x40, 0x7f, 0x33, 0xe0, 0x8d, 0x82,
	0x08, 0x92, 0x8d, 0x22, 0xc4, 0x3c, 0x09, 0x36, 0x37, 0x17, 0xb2, 0x45, 0xdc, 0xdb, 0x0a, 0x77,
	0x83, 0x74, 0x72, 0xb8, 0x45, 0x9d, 0x4d, 0x61, 0xc9, 0x1f, 0x06, 0x2c, 0x97, 0xdc, 0xfe, 0xb2,
	0xae, 0xce, 0xd7, 0xa2, 0xb2, 0xae, 0x5e, 0x20, 0x29, 0xd6, 0x43, 0x85, 0xf9, 0x80, 0x7c, 0x9c,
	0x60, 0x6e, 0x1d, 0x70, 0x9f, 0xfa, 0x43, 0x96, 0x7c, 0xf7, 0x3d, 0xa6, 0xba, 0xab, 0xf0, 0xa7,
	0x91, 0xfa, 0x41, 0x12, 0x2a, 0xdb, 0xe4, 0xbd, 0xee, 0x8b, 0xb3, 0x96, 0x71, 0x7a, 0xd6, 0x32,
	0xfe, 0x3d, 0x6b, 0x19, 0x3f, 0x9d, 0xb7, 0x2a, 0xa7, 0xe7, 0xad, 0xca, 0x5f, 0xe7, 0xad, 0xca,
	0x37, 0x77, 0x33, 0xcf, 0xc3, 0x65, 0xa9, 0x9e, 0xa8, 0x64, 0xea, 0xc9, 0x18, 0xd4, 0xd4, 0x7f,
	0x8f, 0x77, 0xfe, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x5b, 0xbe, 0xdc, 0x36, 0x36, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of Listpools items.
	ListPools(ctx context.Context, in *QueryListPoolsRequest, opts ...grpc.CallOption) (*QueryListPoolsResponse, error)
	// Queries a list of QueryPool items.
	QueryPool(ctx context.Context, in *QueryQueryPoolRequest, opts ...grpc.CallOption) (*QueryQueryPoolResponse, error)
	Depositor(ctx context.Context, in *QueryDepositorRequest, opts ...grpc.CallOption) (*QueryDepositorResponse, error)
	// Queries a list of AllowedPools items.
	AllowedPools(ctx context.Context, in *QueryAllowedPoolsRequest, opts ...grpc.CallOption) (*QueryAllowedPoolsResponse, error)
	OutstandingInterest(ctx context.Context, in *QueryOutstandingInterestRequest, opts ...grpc.CallOption) (*QueryOutstandingInterestResponse, error)
	// Queries a list of ClaimableInterest items.
	ClaimableInterest(ctx context.Context, in *QueryClaimableInterestRequest, opts ...grpc.CallOption) (*QueryClaimableInterestResponse, error)
	// Queries a list of withdrawalPrincipal items.
	WithdrawalPrincipal(ctx context.Context, in *QuerywithdrawalPrincipalRequest, opts ...grpc.CallOption) (*QuerywithdrawalPrincipalResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/joltify.spv.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPools(ctx context.Context, in *QueryListPoolsRequest, opts ...grpc.CallOption) (*QueryListPoolsResponse, error) {
	out := new(QueryListPoolsResponse)
	err := c.cc.Invoke(ctx, "/joltify.spv.Query/ListPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryPool(ctx context.Context, in *QueryQueryPoolRequest, opts ...grpc.CallOption) (*QueryQueryPoolResponse, error) {
	out := new(QueryQueryPoolResponse)
	err := c.cc.Invoke(ctx, "/joltify.spv.Query/QueryPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Depositor(ctx context.Context, in *QueryDepositorRequest, opts ...grpc.CallOption) (*QueryDepositorResponse, error) {
	out := new(QueryDepositorResponse)
	err := c.cc.Invoke(ctx, "/joltify.spv.Query/Depositor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowedPools(ctx context.Context, in *QueryAllowedPoolsRequest, opts ...grpc.CallOption) (*QueryAllowedPoolsResponse, error) {
	out := new(QueryAllowedPoolsResponse)
	err := c.cc.Invoke(ctx, "/joltify.spv.Query/AllowedPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OutstandingInterest(ctx context.Context, in *QueryOutstandingInterestRequest, opts ...grpc.CallOption) (*QueryOutstandingInterestResponse, error) {
	out := new(QueryOutstandingInterestResponse)
	err := c.cc.Invoke(ctx, "/joltify.spv.Query/OutstandingInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimableInterest(ctx context.Context, in *QueryClaimableInterestRequest, opts ...grpc.CallOption) (*QueryClaimableInterestResponse, error) {
	out := new(QueryClaimableInterestResponse)
	err := c.cc.Invoke(ctx, "/joltify.spv.Query/ClaimableInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WithdrawalPrincipal(ctx context.Context, in *QuerywithdrawalPrincipalRequest, opts ...grpc.CallOption) (*QuerywithdrawalPrincipalResponse, error) {
	out := new(QuerywithdrawalPrincipalResponse)
	err := c.cc.Invoke(ctx, "/joltify.spv.Query/withdrawalPrincipal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of Listpools items.
	ListPools(context.Context, *QueryListPoolsRequest) (*QueryListPoolsResponse, error)
	// Queries a list of QueryPool items.
	QueryPool(context.Context, *QueryQueryPoolRequest) (*QueryQueryPoolResponse, error)
	Depositor(context.Context, *QueryDepositorRequest) (*QueryDepositorResponse, error)
	// Queries a list of AllowedPools items.
	AllowedPools(context.Context, *QueryAllowedPoolsRequest) (*QueryAllowedPoolsResponse, error)
	OutstandingInterest(context.Context, *QueryOutstandingInterestRequest) (*QueryOutstandingInterestResponse, error)
	// Queries a list of ClaimableInterest items.
	ClaimableInterest(context.Context, *QueryClaimableInterestRequest) (*QueryClaimableInterestResponse, error)
	// Queries a list of withdrawalPrincipal items.
	WithdrawalPrincipal(context.Context, *QuerywithdrawalPrincipalRequest) (*QuerywithdrawalPrincipalResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) ListPools(ctx context.Context, req *QueryListPoolsRequest) (*QueryListPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (*UnimplementedQueryServer) QueryPool(ctx context.Context, req *QueryQueryPoolRequest) (*QueryQueryPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPool not implemented")
}
func (*UnimplementedQueryServer) Depositor(ctx context.Context, req *QueryDepositorRequest) (*QueryDepositorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Depositor not implemented")
}
func (*UnimplementedQueryServer) AllowedPools(ctx context.Context, req *QueryAllowedPoolsRequest) (*QueryAllowedPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowedPools not implemented")
}
func (*UnimplementedQueryServer) OutstandingInterest(ctx context.Context, req *QueryOutstandingInterestRequest) (*QueryOutstandingInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutstandingInterest not implemented")
}
func (*UnimplementedQueryServer) ClaimableInterest(ctx context.Context, req *QueryClaimableInterestRequest) (*QueryClaimableInterestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimableInterest not implemented")
}
func (*UnimplementedQueryServer) WithdrawalPrincipal(ctx context.Context, req *QuerywithdrawalPrincipalRequest) (*QuerywithdrawalPrincipalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawalPrincipal not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.spv.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryListPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.spv.Query/ListPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPools(ctx, req.(*QueryListPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryQueryPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.spv.Query/QueryPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryPool(ctx, req.(*QueryQueryPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Depositor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Depositor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.spv.Query/Depositor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Depositor(ctx, req.(*QueryDepositorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowedPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowedPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowedPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.spv.Query/AllowedPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowedPools(ctx, req.(*QueryAllowedPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OutstandingInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOutstandingInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OutstandingInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.spv.Query/OutstandingInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OutstandingInterest(ctx, req.(*QueryOutstandingInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimableInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClaimableInterestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimableInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.spv.Query/ClaimableInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimableInterest(ctx, req.(*QueryClaimableInterestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WithdrawalPrincipal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerywithdrawalPrincipalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WithdrawalPrincipal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/joltify.spv.Query/WithdrawalPrincipal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WithdrawalPrincipal(ctx, req.(*QuerywithdrawalPrincipalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "joltify.spv.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "ListPools",
			Handler:    _Query_ListPools_Handler,
		},
		{
			MethodName: "QueryPool",
			Handler:    _Query_QueryPool_Handler,
		},
		{
			MethodName: "Depositor",
			Handler:    _Query_Depositor_Handler,
		},
		{
			MethodName: "AllowedPools",
			Handler:    _Query_AllowedPools_Handler,
		},
		{
			MethodName: "OutstandingInterest",
			Handler:    _Query_OutstandingInterest_Handler,
		},
		{
			MethodName: "ClaimableInterest",
			Handler:    _Query_ClaimableInterest_Handler,
		},
		{
			MethodName: "withdrawalPrincipal",
			Handler:    _Query_WithdrawalPrincipal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "joltify/spv/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryListPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryListPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryListPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryListPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolsInfo) > 0 {
		for iNdEx := len(m.PoolsInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolsInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueryPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueryPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueryPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryQueryPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryQueryPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryQueryPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolInfo != nil {
		{
			size, err := m.PoolInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DepositPoolIndex) > 0 {
		i -= len(m.DepositPoolIndex)
		copy(dAtA[i:], m.DepositPoolIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DepositPoolIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDepositorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDepositorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDepositorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Depositor != nil {
		{
			size, err := m.Depositor.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllowedPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowedPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowedPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolsIndex) > 0 {
		for iNdEx := len(m.PoolsIndex) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PoolsIndex[iNdEx])
			copy(dAtA[i:], m.PoolsIndex[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolsIndex[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimableInterestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimableInterestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimableInterestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Wallet) > 0 {
		i -= len(m.Wallet)
		copy(dAtA[i:], m.Wallet)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Wallet)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryClaimableInterestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryClaimableInterestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryClaimableInterestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ClaimableInterestAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	return len(dAtA) - i, nil
}

func (m *QueryOutstandingInterestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutstandingInterestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutstandingInterestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Wallet) > 0 {
		i -= len(m.Wallet)
		copy(dAtA[i:], m.Wallet)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Wallet)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOutstandingInterestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOutstandingInterestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOutstandingInterestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerywithdrawalPrincipalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerywithdrawalPrincipalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerywithdrawalPrincipalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerywithdrawalPrincipalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerywithdrawalPrincipalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerywithdrawalPrincipalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryListPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryListPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolsInfo) > 0 {
		for _, e := range m.PoolsInfo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQueryPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryQueryPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolInfo != nil {
		l = m.PoolInfo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.DepositPoolIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDepositorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Depositor != nil {
		l = m.Depositor.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllowedPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllowedPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolsIndex) > 0 {
		for _, s := range m.PoolsIndex {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryClaimableInterestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Wallet)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryClaimableInterestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClaimableInterestAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOutstandingInterestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Wallet)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOutstandingInterestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerywithdrawalPrincipalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerywithdrawalPrincipalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryListPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryListPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryListPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolsInfo = append(m.PoolsInfo, &PoolInfo{})
			if err := m.PoolsInfo[len(m.PoolsInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueryPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueryPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueryPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryQueryPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryQueryPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryQueryPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PoolInfo == nil {
				m.PoolInfo = &PoolInfo{}
			}
			if err := m.PoolInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositPoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositPoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDepositorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDepositorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDepositorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Depositor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Depositor == nil {
				m.Depositor = &DepositorInfo{}
			}
			if err := m.Depositor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowedPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowedPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowedPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolsIndex = append(m.PoolsIndex, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimableInterestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimableInterestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimableInterestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryClaimableInterestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryClaimableInterestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryClaimableInterestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableInterestAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimableInterestAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutstandingInterestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutstandingInterestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutstandingInterestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wallet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wallet = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOutstandingInterestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOutstandingInterestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOutstandingInterestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerywithdrawalPrincipalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerywithdrawalPrincipalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerywithdrawalPrincipalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerywithdrawalPrincipalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerywithdrawalPrincipalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerywithdrawalPrincipalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
