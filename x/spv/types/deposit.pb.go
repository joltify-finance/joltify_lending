// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/spv/deposit.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DepositorInfo_DEPOSITTYPE int32

const (
	DepositorInfo_withdraw_proposal DepositorInfo_DEPOSITTYPE = 0
	DepositorInfo_transfer_request  DepositorInfo_DEPOSITTYPE = 1
	DepositorInfo_deposit_close     DepositorInfo_DEPOSITTYPE = 2
	DepositorInfo_unset             DepositorInfo_DEPOSITTYPE = 3
	DepositorInfo_processed         DepositorInfo_DEPOSITTYPE = 4
	DepositorInfo_deactive          DepositorInfo_DEPOSITTYPE = 5
	DepositorInfo_unusable          DepositorInfo_DEPOSITTYPE = 6
)

var DepositorInfo_DEPOSITTYPE_name = map[int32]string{
	0: "withdraw_proposal",
	1: "transfer_request",
	2: "deposit_close",
	3: "unset",
	4: "processed",
	5: "deactive",
	6: "unusable",
}

var DepositorInfo_DEPOSITTYPE_value = map[string]int32{
	"withdraw_proposal": 0,
	"transfer_request":  1,
	"deposit_close":     2,
	"unset":             3,
	"processed":         4,
	"deactive":          5,
	"unusable":          6,
}

func (x DepositorInfo_DEPOSITTYPE) String() string {
	return proto.EnumName(DepositorInfo_DEPOSITTYPE_name, int32(x))
}

func (DepositorInfo_DEPOSITTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5bb054114dab9679, []int{0, 0}
}

type DepositorInfo struct {
	InvestorId                 string                                        `protobuf:"bytes,1,opt,name=investor_id,json=investorId,proto3" json:"investor_id,omitempty"`
	DepositorAddress           github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,2,opt,name=depositor_address,json=depositorAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"depositor_address,omitempty"`
	PoolIndex                  string                                        `protobuf:"bytes,3,opt,name=pool_index,json=poolIndex,proto3" json:"pool_index,omitempty"`
	LockedAmount               types.Coin                                    `protobuf:"bytes,4,opt,name=locked_amount,json=lockedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"locked_amount"`
	WithdrawalAmount           types.Coin                                    `protobuf:"bytes,5,opt,name=withdrawal_amount,json=withdrawalAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdrawal_amount"`
	IncentiveAmount            types.Coin                                    `protobuf:"bytes,6,opt,name=incentive_amount,json=incentiveAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"incentive_amount"`
	LinkedNFT                  []string                                      `protobuf:"bytes,7,rep,name=linkedNFT,proto3" json:"linkedNFT,omitempty"`
	DepositType                DepositorInfo_DEPOSITTYPE                     `protobuf:"varint,8,opt,name=deposit_type,json=depositType,proto3,enum=joltify.spv.DepositorInfo_DEPOSITTYPE" json:"deposit_type,omitempty"`
	PendingInterest            types.Coin                                    `protobuf:"bytes,9,opt,name=pending_interest,json=pendingInterest,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pending_interest"`
	TotalPaidLiquidationAmount cosmossdk_io_math.Int                         `protobuf:"bytes,10,opt,name=total_paid_liquidation_amount,json=totalPaidLiquidationAmount,proto3,customtype=cosmossdk.io/math.Int" json:"total_paid_liquidation_amount"`
}

func (m *DepositorInfo) Reset()         { *m = DepositorInfo{} }
func (m *DepositorInfo) String() string { return proto.CompactTextString(m) }
func (*DepositorInfo) ProtoMessage()    {}
func (*DepositorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5bb054114dab9679, []int{0}
}
func (m *DepositorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositorInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositorInfo.Merge(m, src)
}
func (m *DepositorInfo) XXX_Size() int {
	return m.Size()
}
func (m *DepositorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DepositorInfo proto.InternalMessageInfo

func (m *DepositorInfo) GetInvestorId() string {
	if m != nil {
		return m.InvestorId
	}
	return ""
}

func (m *DepositorInfo) GetDepositorAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.DepositorAddress
	}
	return nil
}

func (m *DepositorInfo) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

func (m *DepositorInfo) GetLockedAmount() types.Coin {
	if m != nil {
		return m.LockedAmount
	}
	return types.Coin{}
}

func (m *DepositorInfo) GetWithdrawalAmount() types.Coin {
	if m != nil {
		return m.WithdrawalAmount
	}
	return types.Coin{}
}

func (m *DepositorInfo) GetIncentiveAmount() types.Coin {
	if m != nil {
		return m.IncentiveAmount
	}
	return types.Coin{}
}

func (m *DepositorInfo) GetLinkedNFT() []string {
	if m != nil {
		return m.LinkedNFT
	}
	return nil
}

func (m *DepositorInfo) GetDepositType() DepositorInfo_DEPOSITTYPE {
	if m != nil {
		return m.DepositType
	}
	return DepositorInfo_withdraw_proposal
}

func (m *DepositorInfo) GetPendingInterest() types.Coin {
	if m != nil {
		return m.PendingInterest
	}
	return types.Coin{}
}

func init() {
	proto.RegisterEnum("joltify.spv.DepositorInfo_DEPOSITTYPE", DepositorInfo_DEPOSITTYPE_name, DepositorInfo_DEPOSITTYPE_value)
	proto.RegisterType((*DepositorInfo)(nil), "joltify.spv.DepositorInfo")
}

func init() { proto.RegisterFile("joltify/spv/deposit.proto", fileDescriptor_5bb054114dab9679) }

var fileDescriptor_5bb054114dab9679 = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x4e, 0xdb, 0x4a,
	0x14, 0xc6, 0x63, 0xfe, 0x5d, 0x32, 0x49, 0xee, 0x35, 0x73, 0x41, 0x32, 0xe8, 0xe2, 0x44, 0x2c,
	0xae, 0x22, 0x55, 0xb1, 0x0b, 0x95, 0xba, 0x27, 0x85, 0xaa, 0x96, 0xaa, 0x36, 0x4a, 0xb3, 0x69,
	0x37, 0xd6, 0xc4, 0x73, 0x12, 0xa6, 0x71, 0x66, 0x8c, 0x67, 0x1c, 0xc8, 0xb2, 0xea, 0x0b, 0xf4,
	0x39, 0xba, 0xe6, 0x21, 0x58, 0x22, 0x56, 0x55, 0x17, 0xb4, 0x82, 0xb7, 0xe8, 0xaa, 0x1a, 0x7b,
	0x0c, 0x74, 0xd7, 0x05, 0x5d, 0xd9, 0xf3, 0xcd, 0xcc, 0xf9, 0x9d, 0xf3, 0x9d, 0xa3, 0x41, 0x9b,
	0xef, 0x45, 0xac, 0xd8, 0x68, 0xee, 0xcb, 0x64, 0xe6, 0x53, 0x48, 0x84, 0x64, 0xca, 0x4b, 0x52,
	0xa1, 0x04, 0xae, 0x99, 0x2d, 0x4f, 0x26, 0xb3, 0xad, 0xcd, 0x48, 0xc8, 0xa9, 0x90, 0x61, 0xbe,
	0xe5, 0x17, 0x8b, 0xe2, 0xdc, 0xd6, 0xfa, 0x58, 0x8c, 0x45, 0xa1, 0xeb, 0x3f, 0xa3, 0xba, 0xc5,
	0x19, 0x7f, 0x48, 0x24, 0xf8, 0xb3, 0xdd, 0x21, 0x28, 0xb2, 0xeb, 0x47, 0x82, 0x71, 0xb3, 0xdf,
	0x1c, 0x0b, 0x31, 0x8e, 0xc1, 0xcf, 0x57, 0xc3, 0x6c, 0xe4, 0x2b, 0x36, 0x05, 0xa9, 0xc8, 0x34,
	0x29, 0x0e, 0xec, 0x7c, 0x58, 0x45, 0x8d, 0x83, 0x22, 0x21, 0x91, 0x06, 0x7c, 0x24, 0x70, 0x13,
	0xd5, 0x18, 0x9f, 0x81, 0x54, 0x22, 0x0d, 0x19, 0x75, 0xac, 0x96, 0xd5, 0xae, 0xf6, 0x51, 0x29,
	0x05, 0x14, 0x67, 0x68, 0x8d, 0x96, 0x37, 0x42, 0x42, 0x69, 0x0a, 0x52, 0x3a, 0x0b, 0x2d, 0xab,
	0x5d, 0xef, 0xbe, 0xf8, 0x71, 0xd5, 0xec, 0x8c, 0x99, 0x3a, 0xca, 0x86, 0x5e, 0x24, 0xa6, 0xa6,
	0x02, 0xf3, 0xe9, 0x48, 0x3a, 0xf1, 0xd5, 0x3c, 0x01, 0xe9, 0xed, 0x47, 0xd1, 0x7e, 0x71, 0xf1,
	0xf2, 0xac, 0xf3, 0xaf, 0xa9, 0xd3, 0x28, 0xdd, 0xb9, 0x02, 0xd9, 0xb7, 0x6f, 0x11, 0x46, 0xc6,
	0xdb, 0x08, 0x25, 0x42, 0xc4, 0x21, 0xe3, 0x14, 0x4e, 0x9d, 0xc5, 0x3c, 0xad, 0xaa, 0x56, 0x02,
	0x2d, 0xe0, 0x04, 0x35, 0x62, 0x11, 0x4d, 0x80, 0x86, 0x64, 0x2a, 0x32, 0xae, 0x9c, 0xa5, 0x96,
	0xd5, 0xae, 0xed, 0x6d, 0x7a, 0x26, 0xba, 0x76, 0xc8, 0x33, 0x0e, 0x79, 0xcf, 0x04, 0xe3, 0xdd,
	0xc7, 0xe7, 0x57, 0xcd, 0xca, 0xe7, 0x6f, 0xcd, 0xf6, 0x6f, 0x24, 0xac, 0x2f, 0xc8, 0x7e, 0xbd,
	0x20, 0xec, 0xe7, 0x00, 0x7c, 0x8a, 0xd6, 0x4e, 0x98, 0x3a, 0xa2, 0x29, 0x39, 0x21, 0x71, 0x49,
	0x5d, 0x7e, 0x78, 0xaa, 0x7d, 0x47, 0x31, 0xe4, 0x19, 0xb2, 0x19, 0x8f, 0x80, 0x2b, 0x36, 0x83,
	0x12, 0xbc, 0xf2, 0xf0, 0xe0, 0x7f, 0x6e, 0x21, 0x86, 0xfb, 0x1f, 0xaa, 0xc6, 0x8c, 0x4f, 0x80,
	0xbe, 0x7a, 0x3e, 0x70, 0xfe, 0x6a, 0x2d, 0xea, 0x0e, 0xdc, 0x0a, 0x38, 0x40, 0x75, 0xd3, 0xb4,
	0x50, 0x47, 0x71, 0x56, 0x5b, 0x56, 0xfb, 0xef, 0xbd, 0xff, 0xbd, 0x7b, 0x03, 0xee, 0xfd, 0x32,
	0x6a, 0xde, 0xc1, 0x61, 0xef, 0xf5, 0x9b, 0x60, 0x30, 0x78, 0xdb, 0x3b, 0xec, 0xd7, 0xcc, 0xdd,
	0xc1, 0x3c, 0x01, 0x5d, 0x60, 0x02, 0x9c, 0x32, 0x3e, 0x0e, 0x19, 0x57, 0x90, 0x82, 0x54, 0x4e,
	0xf5, 0x0f, 0x14, 0x68, 0x20, 0x81, 0x61, 0x60, 0x8e, 0xb6, 0x95, 0x50, 0x24, 0x0e, 0x13, 0xc2,
	0x68, 0x18, 0xb3, 0xe3, 0x8c, 0x51, 0xa2, 0x98, 0xe0, 0xa5, 0xcb, 0x48, 0x8f, 0x5d, 0xf7, 0x91,
	0x26, 0x7d, 0xbd, 0x6a, 0x6e, 0x14, 0x71, 0x25, 0x9d, 0x78, 0x4c, 0xf8, 0x53, 0xa2, 0x8e, 0xbc,
	0x80, 0xab, 0xcb, 0xb3, 0x0e, 0x32, 0x49, 0x06, 0x5c, 0xf5, 0xb7, 0xf2, 0x88, 0x3d, 0xc2, 0xe8,
	0xcb, 0xbb, 0x78, 0x85, 0xa1, 0x3b, 0x1f, 0x2d, 0x54, 0xbb, 0x67, 0x02, 0xde, 0xb8, 0x1b, 0x29,
	0xfd, 0x06, 0x24, 0x42, 0x92, 0xd8, 0xae, 0xe0, 0x75, 0x64, 0xab, 0x94, 0x70, 0x39, 0x82, 0x34,
	0x4c, 0xe1, 0x38, 0x03, 0xa9, 0x6c, 0x0b, 0xaf, 0xa1, 0x46, 0xe9, 0x77, 0x14, 0x0b, 0x09, 0xf6,
	0x02, 0xae, 0xa2, 0xe5, 0x8c, 0x4b, 0x50, 0xf6, 0x22, 0x6e, 0xa0, 0x6a, 0x92, 0x8a, 0x08, 0xa4,
	0x04, 0x6a, 0x2f, 0xe1, 0x3a, 0x5a, 0xa5, 0x40, 0x22, 0xdd, 0x4c, 0x7b, 0x59, 0xaf, 0x32, 0x9e,
	0x49, 0x32, 0x8c, 0xc1, 0x5e, 0xe9, 0xf6, 0xce, 0xaf, 0x5d, 0xeb, 0xe2, 0xda, 0xb5, 0xbe, 0x5f,
	0xbb, 0xd6, 0xa7, 0x1b, 0xb7, 0x72, 0x71, 0xe3, 0x56, 0xbe, 0xdc, 0xb8, 0x95, 0x77, 0x4f, 0xef,
	0x59, 0x69, 0xda, 0xd8, 0x19, 0x31, 0x4e, 0x78, 0x04, 0xe5, 0x3a, 0x8c, 0x0b, 0x0f, 0xfd, 0xd3,
	0xfc, 0x71, 0xcb, 0xed, 0x1d, 0xae, 0xe4, 0x8f, 0xcb, 0x93, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xa3, 0x0c, 0x65, 0x46, 0xf8, 0x04, 0x00, 0x00,
}

func (m *DepositorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalPaidLiquidationAmount.Size()
		i -= size
		if _, err := m.TotalPaidLiquidationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.PendingInterest.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.DepositType != 0 {
		i = encodeVarintDeposit(dAtA, i, uint64(m.DepositType))
		i--
		dAtA[i] = 0x40
	}
	if len(m.LinkedNFT) > 0 {
		for iNdEx := len(m.LinkedNFT) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LinkedNFT[iNdEx])
			copy(dAtA[i:], m.LinkedNFT[iNdEx])
			i = encodeVarintDeposit(dAtA, i, uint64(len(m.LinkedNFT[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.IncentiveAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.WithdrawalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.LockedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeposit(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DepositorAddress) > 0 {
		i -= len(m.DepositorAddress)
		copy(dAtA[i:], m.DepositorAddress)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.DepositorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.InvestorId) > 0 {
		i -= len(m.InvestorId)
		copy(dAtA[i:], m.InvestorId)
		i = encodeVarintDeposit(dAtA, i, uint64(len(m.InvestorId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeposit(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeposit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.InvestorId)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.DepositorAddress)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovDeposit(uint64(l))
	}
	l = m.LockedAmount.Size()
	n += 1 + l + sovDeposit(uint64(l))
	l = m.WithdrawalAmount.Size()
	n += 1 + l + sovDeposit(uint64(l))
	l = m.IncentiveAmount.Size()
	n += 1 + l + sovDeposit(uint64(l))
	if len(m.LinkedNFT) > 0 {
		for _, s := range m.LinkedNFT {
			l = len(s)
			n += 1 + l + sovDeposit(uint64(l))
		}
	}
	if m.DepositType != 0 {
		n += 1 + sovDeposit(uint64(m.DepositType))
	}
	l = m.PendingInterest.Size()
	n += 1 + l + sovDeposit(uint64(l))
	l = m.TotalPaidLiquidationAmount.Size()
	n += 1 + l + sovDeposit(uint64(l))
	return n
}

func sovDeposit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeposit(x uint64) (n int) {
	return sovDeposit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvestorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InvestorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositorAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepositorAddress = append(m.DepositorAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.DepositorAddress == nil {
				m.DepositorAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LockedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentiveAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncentiveAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedNFT", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LinkedNFT = append(m.LinkedNFT, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositType", wireType)
			}
			m.DepositType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositType |= DepositorInfo_DEPOSITTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingInterest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PendingInterest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPaidLiquidationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeposit
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeposit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalPaidLiquidationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeposit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeposit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeposit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeposit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeposit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeposit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeposit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeposit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeposit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeposit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeposit = fmt.Errorf("proto: unexpected end of group")
)
