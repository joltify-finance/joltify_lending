// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/spv/poolinfo.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_x_nft "github.com/cosmos/cosmos-sdk/x/nft"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolInfo struct {
	Index         string                                        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	PoolName      string                                        `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	LinkedProject int32                                         `protobuf:"varint,3,opt,name=linked_project,json=linkedProject,proto3" json:"linked_project,omitempty"`
	OwnerAddress  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner_address,omitempty"`
	Apy           github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,5,opt,name=apy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"apy"`
	TotalAmount   github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,6,opt,name=total_amount,json=totalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"total_amount"`
	PayFreq       int32                                         `protobuf:"varint,7,opt,name=pay_freq,json=payFreq,proto3" json:"pay_freq,omitempty"`
	ReserveFactor github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,8,opt,name=reserve_factor,json=reserveFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_factor"`
	PoolNFTClass  github_com_cosmos_cosmos_sdk_x_nft.Class      `protobuf:"bytes,9,opt,name=pool_nFT_class,json=poolNFTClass,proto3,customtype=github.com/cosmos/cosmos-sdk/x/nft.Class" json:"pool_nFT_class"`
	PoolStartTime time.Time                                     `protobuf:"bytes,10,opt,name=pool_start_time,json=poolStartTime,proto3,stdtime" json:"pool_start_time"`
}

func (m *PoolInfo) Reset()         { *m = PoolInfo{} }
func (m *PoolInfo) String() string { return proto.CompactTextString(m) }
func (*PoolInfo) ProtoMessage()    {}
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_353391ba5ffe1b1b, []int{0}
}
func (m *PoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfo.Merge(m, src)
}
func (m *PoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfo proto.InternalMessageInfo

func (m *PoolInfo) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *PoolInfo) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *PoolInfo) GetLinkedProject() int32 {
	if m != nil {
		return m.LinkedProject
	}
	return 0
}

func (m *PoolInfo) GetOwnerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

func (m *PoolInfo) GetPayFreq() int32 {
	if m != nil {
		return m.PayFreq
	}
	return 0
}

func (m *PoolInfo) GetPoolStartTime() time.Time {
	if m != nil {
		return m.PoolStartTime
	}
	return time.Time{}
}

type PoolWithInvestors struct {
	PoolIndex string   `protobuf:"bytes,1,opt,name=poolIndex,proto3" json:"poolIndex,omitempty"`
	Investors []string `protobuf:"bytes,2,rep,name=investors,proto3" json:"investors,omitempty"`
}

func (m *PoolWithInvestors) Reset()         { *m = PoolWithInvestors{} }
func (m *PoolWithInvestors) String() string { return proto.CompactTextString(m) }
func (*PoolWithInvestors) ProtoMessage()    {}
func (*PoolWithInvestors) Descriptor() ([]byte, []int) {
	return fileDescriptor_353391ba5ffe1b1b, []int{1}
}
func (m *PoolWithInvestors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolWithInvestors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolWithInvestors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolWithInvestors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolWithInvestors.Merge(m, src)
}
func (m *PoolWithInvestors) XXX_Size() int {
	return m.Size()
}
func (m *PoolWithInvestors) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolWithInvestors.DiscardUnknown(m)
}

var xxx_messageInfo_PoolWithInvestors proto.InternalMessageInfo

func (m *PoolWithInvestors) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

func (m *PoolWithInvestors) GetInvestors() []string {
	if m != nil {
		return m.Investors
	}
	return nil
}

func init() {
	proto.RegisterType((*PoolInfo)(nil), "joltify.spv.Pool_info")
	proto.RegisterType((*PoolWithInvestors)(nil), "joltify.spv.PoolWithInvestors")
}

func init() { proto.RegisterFile("joltify/spv/poolinfo.proto", fileDescriptor_353391ba5ffe1b1b) }

var fileDescriptor_353391ba5ffe1b1b = []byte{
	// 577 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x53, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0x8e, 0xdb, 0x3f, 0x6d, 0xb2, 0x4d, 0xfa, 0x8b, 0xa5, 0x87, 0x6d, 0x84, 0x9c, 0xa8, 0x12,
	0x28, 0x17, 0xdb, 0x12, 0x08, 0x4e, 0x1c, 0x48, 0xa8, 0x22, 0x2a, 0xa1, 0x12, 0xb9, 0x91, 0x90,
	0xb8, 0x58, 0x1b, 0x7b, 0xed, 0xba, 0xb5, 0x77, 0x5d, 0xef, 0x26, 0xc4, 0x6f, 0xd1, 0x87, 0xc9,
	0x43, 0xf4, 0x58, 0xe5, 0x84, 0x38, 0x04, 0x94, 0x3c, 0x00, 0x77, 0x4e, 0x68, 0xd7, 0x1b, 0x0a,
	0x17, 0xe0, 0xd0, 0x53, 0x32, 0xdf, 0xcc, 0x7c, 0xdf, 0xcc, 0xf8, 0x5b, 0xd0, 0xba, 0x60, 0x89,
	0x88, 0xc3, 0xc2, 0xe1, 0xd9, 0xd4, 0xc9, 0x18, 0x4b, 0x62, 0x1a, 0x32, 0x3b, 0xcb, 0x99, 0x60,
	0x70, 0x4f, 0xe7, 0x6c, 0x9e, 0x4d, 0x5b, 0x87, 0x3e, 0xe3, 0x29, 0xe3, 0x9e, 0x4a, 0x39, 0x65,
	0x50, 0xd6, 0xb5, 0x0e, 0x22, 0x16, 0xb1, 0x12, 0x97, 0xff, 0x34, 0xda, 0x8e, 0x18, 0x8b, 0x12,
	0xe2, 0xa8, 0x68, 0x3c, 0x09, 0x1d, 0x11, 0xa7, 0x84, 0x0b, 0x9c, 0x66, 0x65, 0xc1, 0xd1, 0xb7,
	0x2a, 0xa8, 0x0f, 0x19, 0x4b, 0x3c, 0x29, 0x09, 0x6d, 0x50, 0x8d, 0x69, 0x40, 0x66, 0xc8, 0xe8,
	0x18, 0xdd, 0x7a, 0x1f, 0x2d, 0xe6, 0xd6, 0x81, 0x56, 0xe9, 0x05, 0x41, 0x4e, 0x38, 0x3f, 0x13,
	0x79, 0x4c, 0x23, 0xb7, 0x2c, 0x83, 0xcf, 0x41, 0x5d, 0x8e, 0xeb, 0x51, 0x9c, 0x12, 0xb4, 0xf5,
	0x97, 0x9e, 0x9a, 0x2c, 0x3d, 0xc5, 0x29, 0x81, 0x8f, 0xc1, 0x7e, 0x12, 0xd3, 0x4b, 0x12, 0xc8,
	0x45, 0x2e, 0x88, 0x2f, 0xd0, 0x76, 0xc7, 0xe8, 0x56, 0xdd, 0x66, 0x89, 0x0e, 0x4b, 0x10, 0xa6,
	0xa0, 0xc9, 0x3e, 0x52, 0x92, 0x7b, 0xb8, 0xe4, 0x41, 0xff, 0x75, 0x8c, 0x6e, 0xa3, 0xff, 0xe6,
	0xfb, 0xb2, 0x6d, 0x45, 0xb1, 0x38, 0x9f, 0x8c, 0x6d, 0x9f, 0xa5, 0xfa, 0x0c, 0xfa, 0xc7, 0xe2,
	0xc1, 0xa5, 0x23, 0x8a, 0x8c, 0x70, 0xbb, 0xe7, 0xfb, 0x7a, 0x80, 0xc5, 0xdc, 0x7a, 0xf8, 0xfb,
	0x48, 0xfd, 0x42, 0x10, 0xee, 0x36, 0x14, 0xbd, 0x86, 0xe0, 0x29, 0xd8, 0xc6, 0x59, 0x81, 0xaa,
	0x6a, 0x8d, 0x97, 0x37, 0xcb, 0x76, 0xe5, 0xf3, 0xb2, 0xfd, 0xe4, 0x1f, 0x84, 0x8e, 0x89, 0xbf,
	0x98, 0x5b, 0x40, 0x2b, 0x1c, 0x13, 0xdf, 0x95, 0x44, 0xd0, 0x03, 0x0d, 0xc1, 0x04, 0x4e, 0x3c,
	0x9c, 0xb2, 0x09, 0x15, 0x68, 0xe7, 0x1e, 0x88, 0xf7, 0x14, 0x63, 0x4f, 0x11, 0xc2, 0x43, 0x50,
	0xcb, 0x70, 0xe1, 0x85, 0x39, 0xb9, 0x42, 0xbb, 0xea, 0x80, 0xbb, 0x19, 0x2e, 0x06, 0x39, 0xb9,
	0x82, 0x3e, 0xd8, 0xcf, 0x09, 0x27, 0xf9, 0x94, 0x78, 0x21, 0xf6, 0x05, 0xcb, 0x51, 0xed, 0x1e,
	0xd4, 0x9b, 0x9a, 0x73, 0xa0, 0x28, 0x61, 0x08, 0xf6, 0xcb, 0xaf, 0x3f, 0x18, 0x79, 0x7e, 0x82,
	0x39, 0x47, 0x75, 0x25, 0xf2, 0x4a, 0x8b, 0x74, 0xff, 0x28, 0x32, 0x73, 0x68, 0x28, 0xec, 0xd7,
	0xb2, 0x6f, 0x31, 0xb7, 0x1a, 0x5a, 0x46, 0xc5, 0x6e, 0x43, 0x59, 0x65, 0x30, 0x52, 0x11, 0x7c,
	0x0b, 0xfe, 0x57, 0x3a, 0x5c, 0xe0, 0x5c, 0x78, 0xd2, 0xc1, 0x08, 0x74, 0x8c, 0xee, 0xde, 0xd3,
	0x96, 0x5d, 0xda, 0xdb, 0xde, 0xd8, 0xdb, 0x1e, 0x6d, 0xec, 0xdd, 0xaf, 0xc9, 0x21, 0xae, 0xbf,
	0xb4, 0x0d, 0xb7, 0x29, 0x9b, 0xcf, 0x64, 0xaf, 0xcc, 0x1e, 0xbd, 0x03, 0x0f, 0xa4, 0xe1, 0xdf,
	0xc7, 0xe2, 0xfc, 0x84, 0x4e, 0x09, 0x17, 0x2c, 0xe7, 0xf0, 0x51, 0x69, 0xe4, 0x93, 0x3b, 0xf3,
	0xbb, 0x77, 0x80, 0xcc, 0xc6, 0x9b, 0x52, 0xb4, 0xd5, 0xd9, 0x96, 0xd9, 0x9f, 0x40, 0x7f, 0x78,
	0xb3, 0x32, 0x8d, 0xdb, 0x95, 0x69, 0x7c, 0x5d, 0x99, 0xc6, 0xf5, 0xda, 0xac, 0xdc, 0xae, 0xcd,
	0xca, 0xa7, 0xb5, 0x59, 0xf9, 0xf0, 0xe2, 0x97, 0x03, 0xe8, 0x67, 0x6c, 0x85, 0x31, 0xc5, 0xd4,
	0x27, 0x9b, 0xd8, 0x4b, 0x08, 0x0d, 0x62, 0x1a, 0x39, 0x33, 0xf5, 0xf8, 0xd5, 0xe5, 0xc7, 0x3b,
	0x6a, 0x9f, 0x67, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfd, 0x54, 0x63, 0x3d, 0x18, 0x04, 0x00,
	0x00,
}

func (m *PoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PoolStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PoolStartTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPoolinfo(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x52
	{
		size := m.PoolNFTClass.Size()
		i -= size
		if _, err := m.PoolNFTClass.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.ReserveFactor.Size()
		i -= size
		if _, err := m.ReserveFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.PayFreq != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.PayFreq))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.TotalAmount.Size()
		i -= size
		if _, err := m.TotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.Apy.Size()
		i -= size
		if _, err := m.Apy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.LinkedProject != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.LinkedProject))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolWithInvestors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolWithInvestors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolWithInvestors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Investors) > 0 {
		for iNdEx := len(m.Investors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Investors[iNdEx])
			copy(dAtA[i:], m.Investors[iNdEx])
			i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.Investors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	if m.LinkedProject != 0 {
		n += 1 + sovPoolinfo(uint64(m.LinkedProject))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	l = m.Apy.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	l = m.TotalAmount.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	if m.PayFreq != 0 {
		n += 1 + sovPoolinfo(uint64(m.PayFreq))
	}
	l = m.ReserveFactor.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	l = m.PoolNFTClass.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PoolStartTime)
	n += 1 + l + sovPoolinfo(uint64(l))
	return n
}

func (m *PoolWithInvestors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	if len(m.Investors) > 0 {
		for _, s := range m.Investors {
			l = len(s)
			n += 1 + l + sovPoolinfo(uint64(l))
		}
	}
	return n
}

func sovPoolinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolinfo(x uint64) (n int) {
	return sovPoolinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool_info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool_info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedProject", wireType)
			}
			m.LinkedProject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkedProject |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = append(m.OwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnerAddress == nil {
				m.OwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Apy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayFreq", wireType)
			}
			m.PayFreq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayFreq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolNFTClass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolNFTClass.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PoolStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolWithInvestors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolWithInvestors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolWithInvestors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Investors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Investors = append(m.Investors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolinfo = fmt.Errorf("proto: unexpected end of group")
)
