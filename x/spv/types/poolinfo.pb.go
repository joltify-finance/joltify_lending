// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: joltify/spv/poolinfo.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolInfo_POOLSTATUS int32

const (
	PoolInfo_ACTIVE      PoolInfo_POOLSTATUS = 0
	PoolInfo_INACTIVE    PoolInfo_POOLSTATUS = 1
	PoolInfo_FROZEN      PoolInfo_POOLSTATUS = 2
	PoolInfo_PREPARE     PoolInfo_POOLSTATUS = 3
	PoolInfo_FREEZING    PoolInfo_POOLSTATUS = 4
	PoolInfo_Liquidation PoolInfo_POOLSTATUS = 5
)

var PoolInfo_POOLSTATUS_name = map[int32]string{
	0: "ACTIVE",
	1: "INACTIVE",
	2: "FROZEN",
	3: "PREPARE",
	4: "FREEZING",
	5: "Liquidation",
}

var PoolInfo_POOLSTATUS_value = map[string]int32{
	"ACTIVE":      0,
	"INACTIVE":    1,
	"FROZEN":      2,
	"PREPARE":     3,
	"FREEZING":    4,
	"Liquidation": 5,
}

func (x PoolInfo_POOLSTATUS) String() string {
	return proto.EnumName(PoolInfo_POOLSTATUS_name, int32(x))
}

func (PoolInfo_POOLSTATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_353391ba5ffe1b1b, []int{0, 0}
}

type PoolInfo_POOLTYPE int32

const (
	PoolInfo_JUNIOR PoolInfo_POOLTYPE = 0
	PoolInfo_SENIOR PoolInfo_POOLTYPE = 1
)

var PoolInfo_POOLTYPE_name = map[int32]string{
	0: "JUNIOR",
	1: "SENIOR",
}

var PoolInfo_POOLTYPE_value = map[string]int32{
	"JUNIOR": 0,
	"SENIOR": 1,
}

func (x PoolInfo_POOLTYPE) String() string {
	return proto.EnumName(PoolInfo_POOLTYPE_name, int32(x))
}

func (PoolInfo_POOLTYPE) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_353391ba5ffe1b1b, []int{0, 1}
}

type PoolInfo struct {
	Index         string                                        `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	PoolName      string                                        `protobuf:"bytes,2,opt,name=pool_name,json=poolName,proto3" json:"pool_name,omitempty"`
	LinkedProject int32                                         `protobuf:"varint,3,opt,name=linked_project,json=linkedProject,proto3" json:"linked_project,omitempty"`
	OwnerAddress  github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"owner_address,omitempty"`
	Apy           github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,5,opt,name=apy,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"apy"`
	PrincipalPaid bool                                          `protobuf:"varint,6,opt,name=principal_paid,json=principalPaid,proto3" json:"principal_paid,omitempty"`
	PayFreq       int32                                         `protobuf:"varint,7,opt,name=pay_freq,json=payFreq,proto3" json:"pay_freq,omitempty"`
	ReserveFactor github_com_cosmos_cosmos_sdk_types.Dec        `protobuf:"bytes,8,opt,name=reserve_factor,json=reserveFactor,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reserve_factor"`
	//  string            pool_nFT_class      = 9 [
	//    (cosmos_proto.scalar)  = "cosmos.Class",
	//    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/x/nft.Class",
	//    (gogoproto.nullable)   = false
	//  ];
	PoolNFTIds                    []string                                        `protobuf:"bytes,9,rep,name=pool_nFT_ids,json=poolNFTIds,proto3" json:"pool_nFT_ids,omitempty"`
	LastPaymentTime               time.Time                                       `protobuf:"bytes,10,opt,name=last_payment_time,json=lastPaymentTime,proto3,stdtime" json:"last_payment_time"`
	PoolStatus                    PoolInfo_POOLSTATUS                             `protobuf:"varint,11,opt,name=pool_status,json=poolStatus,proto3,enum=joltify.spv.PoolInfo_POOLSTATUS" json:"pool_status,omitempty"`
	BorrowedAmount                types.Coin                                      `protobuf:"bytes,12,opt,name=borrowed_amount,json=borrowedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"borrowed_amount"`
	PoolInterest                  github_com_cosmos_cosmos_sdk_types.Dec          `protobuf:"bytes,13,opt,name=pool_interest,json=poolInterest,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"pool_interest"`
	ProjectLength                 uint64                                          `protobuf:"varint,14,opt,name=project_length,json=projectLength,proto3" json:"project_length,omitempty"`
	UsableAmount                  types.Coin                                      `protobuf:"bytes,15,opt,name=usable_amount,json=usableAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"usable_amount"`
	TargetAmount                  types.Coin                                      `protobuf:"bytes,16,opt,name=target_amount,json=targetAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"target_amount"`
	PoolType                      PoolInfo_POOLTYPE                               `protobuf:"varint,17,opt,name=pool_type,json=poolType,proto3,enum=joltify.spv.PoolInfo_POOLTYPE" json:"pool_type,omitempty"`
	EscrowInterestAmount          github_com_cosmos_cosmos_sdk_types.Int          `protobuf:"bytes,18,opt,name=escrow_interest_amount,json=escrowInterestAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"escrow_interest_amount"`
	EscrowPrincipalAmount         types.Coin                                      `protobuf:"bytes,19,opt,name=escrow_principal_amount,json=escrowPrincipalAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"escrow_principal_amount"`
	WithdrawProposalAmount        types.Coin                                      `protobuf:"bytes,20,opt,name=withdraw_proposal_amount,json=withdrawProposalAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"withdraw_proposal_amount"`
	ProjectDueTime                time.Time                                       `protobuf:"bytes,21,opt,name=project_due_time,json=projectDueTime,proto3,stdtime" json:"project_due_time"`
	WithdrawAccounts              []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,22,rep,name=withdraw_accounts,json=withdrawAccounts,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"withdraw_accounts,omitempty"`
	TransferAccounts              []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,23,rep,name=transfer_accounts,json=transferAccounts,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"transfer_accounts,omitempty"`
	WithdrawRequestWindowSeconds  int32                                           `protobuf:"varint,24,opt,name=withdraw_request_window_seconds,json=withdrawRequestWindowSeconds,proto3" json:"withdraw_request_window_seconds,omitempty"`
	PoolLockedSeconds             int32                                           `protobuf:"varint,25,opt,name=pool_locked_seconds,json=poolLockedSeconds,proto3" json:"pool_locked_seconds,omitempty"`
	PoolTotalBorrowLimit          int32                                           `protobuf:"varint,26,opt,name=pool_total_borrow_limit,json=poolTotalBorrowLimit,proto3" json:"pool_total_borrow_limit,omitempty"`
	CurrentPoolTotalBorrowCounter int32                                           `protobuf:"varint,27,opt,name=current_pool_total_borrow_counter,json=currentPoolTotalBorrowCounter,proto3" json:"current_pool_total_borrow_counter,omitempty"`
	PoolCreatedTime               time.Time                                       `protobuf:"bytes,28,opt,name=pool_created_time,json=poolCreatedTime,proto3,stdtime" json:"pool_created_time"`
	PoolFirstDueTime              time.Time                                       `protobuf:"bytes,29,opt,name=pool_first_due_time,json=poolFirstDueTime,proto3,stdtime" json:"pool_first_due_time"`
	GraceTime                     time.Duration                                   `protobuf:"bytes,30,opt,name=grace_time,json=graceTime,proto3,stdduration" json:"grace_time"`
	NegativeInterestCounter       int32                                           `protobuf:"varint,31,opt,name=negative_interest_counter,json=negativeInterestCounter,proto3" json:"negative_interest_counter,omitempty"`
	LiquidationRatio              github_com_cosmos_cosmos_sdk_types.Dec          `protobuf:"bytes,32,opt,name=liquidation_ratio,json=liquidationRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_ratio"`
	ConvertRatio                  github_com_cosmos_cosmos_sdk_types.Dec          `protobuf:"bytes,33,opt,name=convert_ratio,json=convertRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"convert_ratio"`
	TotalLiquidationAmount        github_com_cosmos_cosmos_sdk_types.Int          `protobuf:"bytes,34,opt,name=total_liquidation_amount,json=totalLiquidationAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_liquidation_amount"`
}

func (m *PoolInfo) Reset()         { *m = PoolInfo{} }
func (m *PoolInfo) String() string { return proto.CompactTextString(m) }
func (*PoolInfo) ProtoMessage()    {}
func (*PoolInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_353391ba5ffe1b1b, []int{0}
}
func (m *PoolInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolInfo.Merge(m, src)
}
func (m *PoolInfo) XXX_Size() int {
	return m.Size()
}
func (m *PoolInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PoolInfo proto.InternalMessageInfo

func (m *PoolInfo) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *PoolInfo) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *PoolInfo) GetLinkedProject() int32 {
	if m != nil {
		return m.LinkedProject
	}
	return 0
}

func (m *PoolInfo) GetOwnerAddress() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

func (m *PoolInfo) GetPrincipalPaid() bool {
	if m != nil {
		return m.PrincipalPaid
	}
	return false
}

func (m *PoolInfo) GetPayFreq() int32 {
	if m != nil {
		return m.PayFreq
	}
	return 0
}

func (m *PoolInfo) GetPoolNFTIds() []string {
	if m != nil {
		return m.PoolNFTIds
	}
	return nil
}

func (m *PoolInfo) GetLastPaymentTime() time.Time {
	if m != nil {
		return m.LastPaymentTime
	}
	return time.Time{}
}

func (m *PoolInfo) GetPoolStatus() PoolInfo_POOLSTATUS {
	if m != nil {
		return m.PoolStatus
	}
	return PoolInfo_ACTIVE
}

func (m *PoolInfo) GetBorrowedAmount() types.Coin {
	if m != nil {
		return m.BorrowedAmount
	}
	return types.Coin{}
}

func (m *PoolInfo) GetProjectLength() uint64 {
	if m != nil {
		return m.ProjectLength
	}
	return 0
}

func (m *PoolInfo) GetUsableAmount() types.Coin {
	if m != nil {
		return m.UsableAmount
	}
	return types.Coin{}
}

func (m *PoolInfo) GetTargetAmount() types.Coin {
	if m != nil {
		return m.TargetAmount
	}
	return types.Coin{}
}

func (m *PoolInfo) GetPoolType() PoolInfo_POOLTYPE {
	if m != nil {
		return m.PoolType
	}
	return PoolInfo_JUNIOR
}

func (m *PoolInfo) GetEscrowPrincipalAmount() types.Coin {
	if m != nil {
		return m.EscrowPrincipalAmount
	}
	return types.Coin{}
}

func (m *PoolInfo) GetWithdrawProposalAmount() types.Coin {
	if m != nil {
		return m.WithdrawProposalAmount
	}
	return types.Coin{}
}

func (m *PoolInfo) GetProjectDueTime() time.Time {
	if m != nil {
		return m.ProjectDueTime
	}
	return time.Time{}
}

func (m *PoolInfo) GetWithdrawAccounts() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.WithdrawAccounts
	}
	return nil
}

func (m *PoolInfo) GetTransferAccounts() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.TransferAccounts
	}
	return nil
}

func (m *PoolInfo) GetWithdrawRequestWindowSeconds() int32 {
	if m != nil {
		return m.WithdrawRequestWindowSeconds
	}
	return 0
}

func (m *PoolInfo) GetPoolLockedSeconds() int32 {
	if m != nil {
		return m.PoolLockedSeconds
	}
	return 0
}

func (m *PoolInfo) GetPoolTotalBorrowLimit() int32 {
	if m != nil {
		return m.PoolTotalBorrowLimit
	}
	return 0
}

func (m *PoolInfo) GetCurrentPoolTotalBorrowCounter() int32 {
	if m != nil {
		return m.CurrentPoolTotalBorrowCounter
	}
	return 0
}

func (m *PoolInfo) GetPoolCreatedTime() time.Time {
	if m != nil {
		return m.PoolCreatedTime
	}
	return time.Time{}
}

func (m *PoolInfo) GetPoolFirstDueTime() time.Time {
	if m != nil {
		return m.PoolFirstDueTime
	}
	return time.Time{}
}

func (m *PoolInfo) GetGraceTime() time.Duration {
	if m != nil {
		return m.GraceTime
	}
	return 0
}

func (m *PoolInfo) GetNegativeInterestCounter() int32 {
	if m != nil {
		return m.NegativeInterestCounter
	}
	return 0
}

type PoolWithInvestors struct {
	PoolIndex string   `protobuf:"bytes,1,opt,name=pool_index,json=poolIndex,proto3" json:"pool_index,omitempty"`
	Investors []string `protobuf:"bytes,2,rep,name=investors,proto3" json:"investors,omitempty"`
}

func (m *PoolWithInvestors) Reset()         { *m = PoolWithInvestors{} }
func (m *PoolWithInvestors) String() string { return proto.CompactTextString(m) }
func (*PoolWithInvestors) ProtoMessage()    {}
func (*PoolWithInvestors) Descriptor() ([]byte, []int) {
	return fileDescriptor_353391ba5ffe1b1b, []int{1}
}
func (m *PoolWithInvestors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolWithInvestors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolWithInvestors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolWithInvestors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolWithInvestors.Merge(m, src)
}
func (m *PoolWithInvestors) XXX_Size() int {
	return m.Size()
}
func (m *PoolWithInvestors) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolWithInvestors.DiscardUnknown(m)
}

var xxx_messageInfo_PoolWithInvestors proto.InternalMessageInfo

func (m *PoolWithInvestors) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

func (m *PoolWithInvestors) GetInvestors() []string {
	if m != nil {
		return m.Investors
	}
	return nil
}

type PoolDepositedInvestors struct {
	PoolIndex     string                                          `protobuf:"bytes,1,opt,name=pool_index,json=poolIndex,proto3" json:"pool_index,omitempty"`
	WalletAddress []github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,4,rep,name=wallet_address,json=walletAddress,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"wallet_address,omitempty"`
}

func (m *PoolDepositedInvestors) Reset()         { *m = PoolDepositedInvestors{} }
func (m *PoolDepositedInvestors) String() string { return proto.CompactTextString(m) }
func (*PoolDepositedInvestors) ProtoMessage()    {}
func (*PoolDepositedInvestors) Descriptor() ([]byte, []int) {
	return fileDescriptor_353391ba5ffe1b1b, []int{2}
}
func (m *PoolDepositedInvestors) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolDepositedInvestors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolDepositedInvestors.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolDepositedInvestors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolDepositedInvestors.Merge(m, src)
}
func (m *PoolDepositedInvestors) XXX_Size() int {
	return m.Size()
}
func (m *PoolDepositedInvestors) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolDepositedInvestors.DiscardUnknown(m)
}

var xxx_messageInfo_PoolDepositedInvestors proto.InternalMessageInfo

func (m *PoolDepositedInvestors) GetPoolIndex() string {
	if m != nil {
		return m.PoolIndex
	}
	return ""
}

func (m *PoolDepositedInvestors) GetWalletAddress() []github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.WalletAddress
	}
	return nil
}

func init() {
	proto.RegisterEnum("joltify.spv.PoolInfo_POOLSTATUS", PoolInfo_POOLSTATUS_name, PoolInfo_POOLSTATUS_value)
	proto.RegisterEnum("joltify.spv.PoolInfo_POOLTYPE", PoolInfo_POOLTYPE_name, PoolInfo_POOLTYPE_value)
	proto.RegisterType((*PoolInfo)(nil), "joltify.spv.PoolInfo")
	proto.RegisterType((*PoolWithInvestors)(nil), "joltify.spv.PoolWithInvestors")
	proto.RegisterType((*PoolDepositedInvestors)(nil), "joltify.spv.PoolDepositedInvestors")
}

func init() { proto.RegisterFile("joltify/spv/poolinfo.proto", fileDescriptor_353391ba5ffe1b1b) }

var fileDescriptor_353391ba5ffe1b1b = []byte{
	// 1290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xcf, 0x12, 0x02, 0xf6, 0x24, 0x4e, 0x9c, 0x25, 0x24, 0x9b, 0x00, 0xb6, 0xb1, 0xf4, 0xfd,
	0xca, 0x97, 0xac, 0x0b, 0x55, 0x7b, 0x68, 0x7b, 0xb1, 0x13, 0xbb, 0xb8, 0x8a, 0x9c, 0xd5, 0xc6,
	0x14, 0x95, 0x43, 0x57, 0xe3, 0xdd, 0xb1, 0x33, 0xb0, 0xde, 0xd9, 0xcc, 0xcc, 0xda, 0xf8, 0x5c,
	0xf5, 0xce, 0xb1, 0x7f, 0x42, 0xd5, 0x33, 0x7f, 0x04, 0x52, 0x2f, 0x88, 0x53, 0xd5, 0x03, 0x54,
	0xf0, 0x5f, 0xf4, 0x54, 0xcd, 0x2f, 0xdb, 0xa5, 0xaa, 0x44, 0x24, 0xf7, 0x92, 0xec, 0xbc, 0x1f,
	0x9f, 0xcf, 0x7b, 0x33, 0x6f, 0xde, 0x1b, 0x83, 0x83, 0x27, 0x24, 0xe6, 0x78, 0x30, 0xad, 0xb3,
	0x74, 0x5c, 0x4f, 0x09, 0x89, 0x71, 0x32, 0x20, 0x6e, 0x4a, 0x09, 0x27, 0xf6, 0xba, 0xd6, 0xb9,
	0x2c, 0x1d, 0x1f, 0xec, 0x87, 0x84, 0x8d, 0x08, 0x0b, 0xa4, 0xaa, 0xae, 0x16, 0xca, 0xee, 0x60,
	0x67, 0x48, 0x86, 0x44, 0xc9, 0xc5, 0x97, 0x96, 0x96, 0x94, 0x4d, 0xbd, 0x0f, 0x19, 0xaa, 0x8f,
	0xef, 0xf5, 0x11, 0x87, 0xf7, 0xea, 0x21, 0xc1, 0x89, 0xd6, 0x97, 0x87, 0x84, 0x0c, 0x63, 0x54,
	0x97, 0xab, 0x7e, 0x36, 0xa8, 0x73, 0x3c, 0x42, 0x8c, 0xc3, 0x51, 0x6a, 0x00, 0x3e, 0x34, 0x88,
	0x32, 0x0a, 0x39, 0x26, 0x1a, 0xa0, 0xfa, 0xeb, 0x2e, 0xc8, 0x79, 0x84, 0xc4, 0x9d, 0x64, 0x40,
	0xec, 0x1d, 0xb0, 0x86, 0x93, 0x08, 0x3d, 0x73, 0xac, 0x8a, 0x55, 0xcb, 0xfb, 0x6a, 0x61, 0xdf,
	0x02, 0x79, 0x91, 0x53, 0x90, 0xc0, 0x11, 0x72, 0xae, 0x48, 0x4d, 0x4e, 0x08, 0xba, 0x70, 0x84,
	0xec, 0xff, 0x81, 0xcd, 0x18, 0x27, 0x4f, 0x51, 0x24, 0x72, 0x7a, 0x82, 0x42, 0xee, 0xac, 0x56,
	0xac, 0xda, 0x9a, 0x5f, 0x50, 0x52, 0x4f, 0x09, 0xed, 0x11, 0x28, 0x90, 0x49, 0x82, 0x68, 0x00,
	0xa3, 0x88, 0x22, 0xc6, 0x9c, 0xab, 0x15, 0xab, 0xb6, 0xd1, 0x7c, 0xf0, 0xe7, 0x9b, 0xf2, 0xe1,
	0x10, 0xf3, 0xf3, 0xac, 0xef, 0x86, 0x64, 0xa4, 0x77, 0x44, 0xff, 0x3b, 0x64, 0xd1, 0xd3, 0x3a,
	0x9f, 0xa6, 0x88, 0xb9, 0x8d, 0x30, 0x6c, 0x28, 0xc7, 0xd7, 0x2f, 0x0e, 0x6f, 0xe8, 0x7d, 0xd3,
	0x92, 0xe6, 0x94, 0x23, 0xe6, 0x6f, 0x48, 0x78, 0x2d, 0xb2, 0xbb, 0x60, 0x15, 0xa6, 0x53, 0x67,
	0x4d, 0x04, 0xdb, 0xfc, 0xea, 0xe5, 0x9b, 0xf2, 0xca, 0xef, 0x6f, 0xca, 0xff, 0xff, 0x08, 0xa2,
	0x63, 0x14, 0xbe, 0x7e, 0x71, 0x08, 0x34, 0xc3, 0x31, 0x0a, 0x7d, 0x01, 0x24, 0xb2, 0x4c, 0x29,
	0x4e, 0x42, 0x9c, 0xc2, 0x38, 0x48, 0x21, 0x8e, 0x9c, 0x6b, 0x15, 0xab, 0x96, 0xf3, 0x0b, 0x33,
	0xa9, 0x07, 0x71, 0x64, 0xef, 0x83, 0x5c, 0x0a, 0xa7, 0xc1, 0x80, 0xa2, 0x0b, 0xe7, 0xba, 0xdc,
	0x86, 0xeb, 0x29, 0x9c, 0xb6, 0x29, 0xba, 0xb0, 0x43, 0xb0, 0x49, 0x11, 0x43, 0x74, 0x8c, 0x82,
	0x01, 0x0c, 0x39, 0xa1, 0x4e, 0x6e, 0x09, 0xc1, 0x15, 0x34, 0x66, 0x5b, 0x42, 0xda, 0x15, 0xb0,
	0xa1, 0x4e, 0xaa, 0xdd, 0x0b, 0x70, 0xc4, 0x9c, 0x7c, 0x65, 0xb5, 0x96, 0xf7, 0x81, 0x3c, 0xac,
	0x76, 0xaf, 0x13, 0x31, 0xdb, 0x03, 0xdb, 0x31, 0x64, 0x3c, 0x48, 0xe1, 0x74, 0x84, 0x12, 0x1e,
	0x88, 0x72, 0x71, 0x40, 0xc5, 0xaa, 0xad, 0xdf, 0x3f, 0x70, 0x55, 0xa9, 0xb8, 0xa6, 0x54, 0xdc,
	0x9e, 0xa9, 0xa5, 0x66, 0x4e, 0x44, 0xf9, 0xfc, 0x6d, 0xd9, 0xf2, 0xb7, 0x84, 0xbb, 0xa7, 0xbc,
	0x85, 0xde, 0x6e, 0x80, 0x75, 0xc9, 0xc9, 0x38, 0xe4, 0x19, 0x73, 0xd6, 0x2b, 0x56, 0x6d, 0xf3,
	0x7e, 0xc5, 0x5d, 0xa8, 0x7a, 0xd7, 0xd4, 0x97, 0xeb, 0x9d, 0x9e, 0x9e, 0x9c, 0xf5, 0x1a, 0xbd,
	0x87, 0x67, 0x2a, 0xa8, 0x33, 0xe9, 0x63, 0x73, 0xb0, 0xd5, 0x27, 0x94, 0x92, 0x09, 0x8a, 0x02,
	0x38, 0x22, 0x59, 0xc2, 0x9d, 0x0d, 0x19, 0xd2, 0xbe, 0xab, 0x73, 0x15, 0xe5, 0xef, 0xea, 0xf2,
	0x77, 0x8f, 0x08, 0x4e, 0x9a, 0x9f, 0x88, 0x88, 0x7e, 0x79, 0x5b, 0xae, 0x7d, 0xc4, 0xbe, 0x09,
	0x07, 0xe6, 0x6f, 0x1a, 0x8e, 0x86, 0xa4, 0xb0, 0x21, 0x28, 0xc8, 0xc0, 0x71, 0xc2, 0x11, 0x45,
	0x8c, 0x3b, 0x85, 0x25, 0x1c, 0x88, 0xdc, 0xff, 0x8e, 0x46, 0x54, 0x65, 0x23, 0x2f, 0x40, 0x10,
	0xa3, 0x64, 0xc8, 0xcf, 0x9d, 0xcd, 0x8a, 0x55, 0xbb, 0x2a, 0xca, 0x46, 0x4a, 0x4f, 0xa4, 0xd0,
	0x4e, 0x41, 0x21, 0x63, 0xb0, 0x1f, 0x23, 0x93, 0xfd, 0xd6, 0xf2, 0xb3, 0xdf, 0x50, 0x0c, 0x3a,
	0xf7, 0x14, 0x14, 0x38, 0xa4, 0x43, 0xc4, 0x0d, 0x63, 0xf1, 0x3f, 0x60, 0x54, 0x0c, 0x9a, 0xf1,
	0x4b, 0xdd, 0x44, 0x84, 0x85, 0xb3, 0x2d, 0x8b, 0xa4, 0xf4, 0xef, 0x45, 0xd2, 0xfb, 0xce, 0x6b,
	0xa9, 0x26, 0xd3, 0x9b, 0xa6, 0xc8, 0xa6, 0x60, 0x17, 0xb1, 0x90, 0x92, 0xc9, 0xec, 0xb0, 0x4c,
	0xdc, 0xf6, 0xa5, 0xcf, 0xac, 0x93, 0xf0, 0x85, 0x33, 0xeb, 0x24, 0xdc, 0xdf, 0x51, 0xd8, 0xe6,
	0xd4, 0x74, 0xc0, 0x3f, 0x58, 0x60, 0x4f, 0x93, 0xce, 0xaf, 0xbe, 0x66, 0xbd, 0xb1, 0xfc, 0xdd,
	0xba, 0xa9, 0xb8, 0x3c, 0x43, 0xa5, 0xa3, 0xf8, 0xd1, 0x02, 0xce, 0x04, 0xf3, 0xf3, 0x88, 0x42,
	0x11, 0x07, 0x49, 0x09, 0x9b, 0x87, 0xb1, 0xb3, 0xfc, 0x30, 0x76, 0x0d, 0x99, 0xa7, 0xb9, 0x74,
	0x1c, 0x5d, 0x50, 0x34, 0x95, 0x1c, 0x65, 0x48, 0xb5, 0x8d, 0x9b, 0x97, 0x68, 0x1b, 0xe6, 0x1e,
	0x1c, 0x67, 0x48, 0x76, 0x8d, 0x0c, 0x6c, 0xcf, 0xd2, 0x82, 0x61, 0x28, 0x38, 0x98, 0xb3, 0x5b,
	0x59, 0x5d, 0xea, 0x4c, 0x28, 0x1a, 0x8a, 0x86, 0x66, 0x10, 0xb4, 0x9c, 0xc2, 0x84, 0x0d, 0xc4,
	0x24, 0x32, 0xb4, 0x7b, 0xcb, 0xa6, 0x35, 0x14, 0x33, 0xda, 0x16, 0x28, 0xcf, 0xb2, 0xa5, 0xe8,
	0x22, 0x13, 0x05, 0x3c, 0xc1, 0x49, 0x44, 0x26, 0x01, 0x43, 0x21, 0x49, 0x22, 0xe6, 0x38, 0x72,
	0x5c, 0xdc, 0x36, 0x66, 0xbe, 0xb2, 0x7a, 0x24, 0x8d, 0xce, 0x94, 0x8d, 0xed, 0x82, 0x1b, 0xf2,
	0x0e, 0xc5, 0x24, 0x14, 0x03, 0xd7, 0xb8, 0xee, 0x4b, 0xd7, 0x6d, 0xa1, 0x3a, 0x91, 0x1a, 0x63,
	0xff, 0x19, 0xd8, 0x53, 0x77, 0x8e, 0x70, 0x18, 0x07, 0xaa, 0xfd, 0x05, 0x31, 0x1e, 0x61, 0xee,
	0x1c, 0x48, 0x9f, 0x1d, 0x79, 0xc3, 0x84, 0xb6, 0x29, 0x95, 0x27, 0x42, 0x67, 0x3f, 0x00, 0x77,
	0xc3, 0x8c, 0x52, 0x31, 0x1e, 0xfe, 0xe9, 0x2e, 0x33, 0x42, 0xd4, 0xb9, 0x25, 0x01, 0xee, 0x68,
	0x43, 0xef, 0xef, 0x38, 0x47, 0xca, 0x48, 0x4c, 0x1b, 0x89, 0x10, 0x52, 0x04, 0x39, 0x8a, 0x54,
	0xd9, 0xdc, 0xbe, 0xcc, 0xb4, 0x11, 0xee, 0x47, 0xca, 0x5b, 0xd6, 0xcd, 0x99, 0xde, 0x82, 0x01,
	0xa6, 0x6c, 0xa1, 0x14, 0xef, 0x5c, 0x02, 0xb3, 0x28, 0x00, 0xda, 0xc2, 0xdf, 0x14, 0x63, 0x13,
	0x80, 0x21, 0x85, 0xa1, 0xc6, 0x2a, 0xe9, 0x5b, 0xf5, 0x21, 0xd6, 0xb1, 0x7e, 0x38, 0x29, 0xa8,
	0x9f, 0x04, 0x54, 0x5e, 0xba, 0x49, 0x8c, 0x2f, 0xc0, 0x7e, 0x82, 0x86, 0x90, 0xe3, 0x31, 0x9a,
	0x37, 0x29, 0xb3, 0x59, 0x65, 0xb9, 0x59, 0x7b, 0xc6, 0xc0, 0x74, 0x1a, 0xb3, 0x4d, 0x18, 0x6c,
	0xc7, 0xf8, 0x22, 0xc3, 0x91, 0xc4, 0x0f, 0x24, 0x8d, 0x53, 0x59, 0xc2, 0x34, 0x2a, 0x2e, 0xc0,
	0xfa, 0xe2, 0xaf, 0x18, 0x7a, 0x21, 0x49, 0xc6, 0x88, 0x72, 0x4d, 0x73, 0x77, 0x19, 0x43, 0x4f,
	0x43, 0x2a, 0x8a, 0x31, 0x70, 0x54, 0xc5, 0x2c, 0xe6, 0xa4, 0x3b, 0x56, 0x75, 0x09, 0xed, 0x7a,
	0x57, 0xa2, 0x9f, 0xcc, 0xc1, 0x55, 0x8b, 0xaa, 0x7e, 0x0f, 0xc0, 0xfc, 0x7d, 0x61, 0x03, 0x70,
	0xad, 0x71, 0xd4, 0xeb, 0x7c, 0xdb, 0x2a, 0xae, 0xd8, 0x1b, 0x20, 0xd7, 0xe9, 0xea, 0x95, 0x25,
	0x34, 0x6d, 0xff, 0xf4, 0x71, 0xab, 0x5b, 0xbc, 0x62, 0xaf, 0x83, 0xeb, 0x9e, 0xdf, 0xf2, 0x1a,
	0x7e, 0xab, 0xb8, 0x2a, 0xcc, 0xda, 0x7e, 0xab, 0xf5, 0xb8, 0xd3, 0xfd, 0xba, 0x78, 0xd5, 0xde,
	0x02, 0xeb, 0x0b, 0x1c, 0xc5, 0xb5, 0x6a, 0x15, 0xe4, 0xcc, 0x68, 0x12, 0x18, 0xdf, 0x3c, 0xec,
	0x76, 0x4e, 0xfd, 0xe2, 0x8a, 0xf8, 0x3e, 0x6b, 0xc9, 0x6f, 0xab, 0xea, 0x81, 0x6d, 0x71, 0x15,
	0x1e, 0x61, 0x7e, 0xde, 0x49, 0xc6, 0x88, 0x71, 0x42, 0x99, 0x7d, 0x07, 0x00, 0xfd, 0xd0, 0x98,
	0x3f, 0xad, 0xf3, 0xea, 0x9d, 0x20, 0x9e, 0xd7, 0xb7, 0x41, 0x1e, 0x1b, 0x5b, 0xe7, 0x8a, 0x7c,
	0xb1, 0xcd, 0x05, 0xd5, 0x9f, 0x2d, 0xb0, 0x2b, 0x20, 0x8f, 0x51, 0x4a, 0x18, 0xe6, 0x28, 0xfa,
	0x68, 0x5c, 0x02, 0x36, 0x27, 0x30, 0x8e, 0xc5, 0x8c, 0x9f, 0xbd, 0xb9, 0x97, 0xdb, 0xe8, 0x0a,
	0x0a, 0xdf, 0xc8, 0xbc, 0x97, 0xef, 0x4a, 0xd6, 0xab, 0x77, 0x25, 0xeb, 0x8f, 0x77, 0x25, 0xeb,
	0xf9, 0xfb, 0xd2, 0xca, 0xab, 0xf7, 0xa5, 0x95, 0xdf, 0xde, 0x97, 0x56, 0x1e, 0x7f, 0xbe, 0x40,
	0xa7, 0x67, 0xfe, 0xe1, 0x00, 0x27, 0x30, 0x09, 0x91, 0x59, 0x8b, 0x07, 0x52, 0x84, 0x93, 0x61,
	0xfd, 0x99, 0xfc, 0x11, 0x25, 0x43, 0xe8, 0x5f, 0x93, 0x97, 0xef, 0xd3, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xa2, 0xf5, 0x87, 0x80, 0x60, 0x0d, 0x00, 0x00,
}

func (m *PoolInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalLiquidationAmount.Size()
		i -= size
		if _, err := m.TotalLiquidationAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x92
	{
		size := m.ConvertRatio.Size()
		i -= size
		if _, err := m.ConvertRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x8a
	{
		size := m.LiquidationRatio.Size()
		i -= size
		if _, err := m.LiquidationRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2
	i--
	dAtA[i] = 0x82
	if m.NegativeInterestCounter != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.NegativeInterestCounter))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.GraceTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.GraceTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintPoolinfo(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xf2
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PoolFirstDueTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PoolFirstDueTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintPoolinfo(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xea
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.PoolCreatedTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.PoolCreatedTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintPoolinfo(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xe2
	if m.CurrentPoolTotalBorrowCounter != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.CurrentPoolTotalBorrowCounter))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.PoolTotalBorrowLimit != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.PoolTotalBorrowLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.PoolLockedSeconds != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.PoolLockedSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.WithdrawRequestWindowSeconds != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.WithdrawRequestWindowSeconds))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.TransferAccounts) > 0 {
		for iNdEx := len(m.TransferAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TransferAccounts[iNdEx])
			copy(dAtA[i:], m.TransferAccounts[iNdEx])
			i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.TransferAccounts[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if len(m.WithdrawAccounts) > 0 {
		for iNdEx := len(m.WithdrawAccounts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WithdrawAccounts[iNdEx])
			copy(dAtA[i:], m.WithdrawAccounts[iNdEx])
			i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.WithdrawAccounts[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
	}
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.ProjectDueTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.ProjectDueTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintPoolinfo(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	{
		size, err := m.WithdrawProposalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa2
	{
		size, err := m.EscrowPrincipalAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x9a
	{
		size := m.EscrowInterestAmount.Size()
		i -= size
		if _, err := m.EscrowInterestAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if m.PoolType != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.PoolType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	{
		size, err := m.TargetAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	{
		size, err := m.UsableAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.ProjectLength != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.ProjectLength))
		i--
		dAtA[i] = 0x70
	}
	{
		size := m.PoolInterest.Size()
		i -= size
		if _, err := m.PoolInterest.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.BorrowedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.PoolStatus != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.PoolStatus))
		i--
		dAtA[i] = 0x58
	}
	n10, err10 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastPaymentTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastPaymentTime):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintPoolinfo(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x52
	if len(m.PoolNFTIds) > 0 {
		for iNdEx := len(m.PoolNFTIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PoolNFTIds[iNdEx])
			copy(dAtA[i:], m.PoolNFTIds[iNdEx])
			i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.PoolNFTIds[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size := m.ReserveFactor.Size()
		i -= size
		if _, err := m.ReserveFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.PayFreq != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.PayFreq))
		i--
		dAtA[i] = 0x38
	}
	if m.PrincipalPaid {
		i--
		if m.PrincipalPaid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Apy.Size()
		i -= size
		if _, err := m.Apy.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolinfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if m.LinkedProject != 0 {
		i = encodeVarintPoolinfo(dAtA, i, uint64(m.LinkedProject))
		i--
		dAtA[i] = 0x18
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolWithInvestors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolWithInvestors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolWithInvestors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Investors) > 0 {
		for iNdEx := len(m.Investors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Investors[iNdEx])
			copy(dAtA[i:], m.Investors[iNdEx])
			i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.Investors[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolDepositedInvestors) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolDepositedInvestors) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolDepositedInvestors) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WalletAddress) > 0 {
		for iNdEx := len(m.WalletAddress) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WalletAddress[iNdEx])
			copy(dAtA[i:], m.WalletAddress[iNdEx])
			i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.WalletAddress[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PoolIndex) > 0 {
		i -= len(m.PoolIndex)
		copy(dAtA[i:], m.PoolIndex)
		i = encodeVarintPoolinfo(dAtA, i, uint64(len(m.PoolIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	if m.LinkedProject != 0 {
		n += 1 + sovPoolinfo(uint64(m.LinkedProject))
	}
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	l = m.Apy.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	if m.PrincipalPaid {
		n += 2
	}
	if m.PayFreq != 0 {
		n += 1 + sovPoolinfo(uint64(m.PayFreq))
	}
	l = m.ReserveFactor.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	if len(m.PoolNFTIds) > 0 {
		for _, s := range m.PoolNFTIds {
			l = len(s)
			n += 1 + l + sovPoolinfo(uint64(l))
		}
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastPaymentTime)
	n += 1 + l + sovPoolinfo(uint64(l))
	if m.PoolStatus != 0 {
		n += 1 + sovPoolinfo(uint64(m.PoolStatus))
	}
	l = m.BorrowedAmount.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	l = m.PoolInterest.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	if m.ProjectLength != 0 {
		n += 1 + sovPoolinfo(uint64(m.ProjectLength))
	}
	l = m.UsableAmount.Size()
	n += 1 + l + sovPoolinfo(uint64(l))
	l = m.TargetAmount.Size()
	n += 2 + l + sovPoolinfo(uint64(l))
	if m.PoolType != 0 {
		n += 2 + sovPoolinfo(uint64(m.PoolType))
	}
	l = m.EscrowInterestAmount.Size()
	n += 2 + l + sovPoolinfo(uint64(l))
	l = m.EscrowPrincipalAmount.Size()
	n += 2 + l + sovPoolinfo(uint64(l))
	l = m.WithdrawProposalAmount.Size()
	n += 2 + l + sovPoolinfo(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.ProjectDueTime)
	n += 2 + l + sovPoolinfo(uint64(l))
	if len(m.WithdrawAccounts) > 0 {
		for _, b := range m.WithdrawAccounts {
			l = len(b)
			n += 2 + l + sovPoolinfo(uint64(l))
		}
	}
	if len(m.TransferAccounts) > 0 {
		for _, b := range m.TransferAccounts {
			l = len(b)
			n += 2 + l + sovPoolinfo(uint64(l))
		}
	}
	if m.WithdrawRequestWindowSeconds != 0 {
		n += 2 + sovPoolinfo(uint64(m.WithdrawRequestWindowSeconds))
	}
	if m.PoolLockedSeconds != 0 {
		n += 2 + sovPoolinfo(uint64(m.PoolLockedSeconds))
	}
	if m.PoolTotalBorrowLimit != 0 {
		n += 2 + sovPoolinfo(uint64(m.PoolTotalBorrowLimit))
	}
	if m.CurrentPoolTotalBorrowCounter != 0 {
		n += 2 + sovPoolinfo(uint64(m.CurrentPoolTotalBorrowCounter))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PoolCreatedTime)
	n += 2 + l + sovPoolinfo(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.PoolFirstDueTime)
	n += 2 + l + sovPoolinfo(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.GraceTime)
	n += 2 + l + sovPoolinfo(uint64(l))
	if m.NegativeInterestCounter != 0 {
		n += 2 + sovPoolinfo(uint64(m.NegativeInterestCounter))
	}
	l = m.LiquidationRatio.Size()
	n += 2 + l + sovPoolinfo(uint64(l))
	l = m.ConvertRatio.Size()
	n += 2 + l + sovPoolinfo(uint64(l))
	l = m.TotalLiquidationAmount.Size()
	n += 2 + l + sovPoolinfo(uint64(l))
	return n
}

func (m *PoolWithInvestors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	if len(m.Investors) > 0 {
		for _, s := range m.Investors {
			l = len(s)
			n += 1 + l + sovPoolinfo(uint64(l))
		}
	}
	return n
}

func (m *PoolDepositedInvestors) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolIndex)
	if l > 0 {
		n += 1 + l + sovPoolinfo(uint64(l))
	}
	if len(m.WalletAddress) > 0 {
		for _, b := range m.WalletAddress {
			l = len(b)
			n += 1 + l + sovPoolinfo(uint64(l))
		}
	}
	return n
}

func sovPoolinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolinfo(x uint64) (n int) {
	return sovPoolinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LinkedProject", wireType)
			}
			m.LinkedProject = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LinkedProject |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = append(m.OwnerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.OwnerAddress == nil {
				m.OwnerAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Apy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Apy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrincipalPaid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.PrincipalPaid = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayFreq", wireType)
			}
			m.PayFreq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayFreq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReserveFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReserveFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolNFTIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolNFTIds = append(m.PoolNFTIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPaymentTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastPaymentTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolStatus", wireType)
			}
			m.PoolStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolStatus |= PoolInfo_POOLSTATUS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BorrowedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolInterest", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolInterest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectLength", wireType)
			}
			m.ProjectLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsableAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsableAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolType", wireType)
			}
			m.PoolType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolType |= PoolInfo_POOLTYPE(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowInterestAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EscrowInterestAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowPrincipalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EscrowPrincipalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawProposalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.WithdrawProposalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectDueTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.ProjectDueTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAccounts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAccounts = append(m.WithdrawAccounts, make([]byte, postIndex-iNdEx))
			copy(m.WithdrawAccounts[len(m.WithdrawAccounts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransferAccounts", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TransferAccounts = append(m.TransferAccounts, make([]byte, postIndex-iNdEx))
			copy(m.TransferAccounts[len(m.TransferAccounts)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawRequestWindowSeconds", wireType)
			}
			m.WithdrawRequestWindowSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.WithdrawRequestWindowSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolLockedSeconds", wireType)
			}
			m.PoolLockedSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolLockedSeconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolTotalBorrowLimit", wireType)
			}
			m.PoolTotalBorrowLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolTotalBorrowLimit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPoolTotalBorrowCounter", wireType)
			}
			m.CurrentPoolTotalBorrowCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPoolTotalBorrowCounter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreatedTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PoolCreatedTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 29:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolFirstDueTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.PoolFirstDueTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 30:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GraceTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.GraceTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NegativeInterestCounter", wireType)
			}
			m.NegativeInterestCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NegativeInterestCounter |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 32:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 33:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConvertRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConvertRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 34:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLiquidationAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalLiquidationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolWithInvestors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolWithInvestors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolWithInvestors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Investors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Investors = append(m.Investors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolDepositedInvestors) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolDepositedInvestors: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolDepositedInvestors: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPoolinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = append(m.WalletAddress, make([]byte, postIndex-iNdEx))
			copy(m.WalletAddress[len(m.WalletAddress)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolinfo = fmt.Errorf("proto: unexpected end of group")
)
